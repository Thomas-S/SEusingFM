\settings {
"#Proof-Settings-Config-File
#Wed Feb 15 10:19:18 CET 2012
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=SIMPLIFY_PROVER
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[Choice]DefaultChoices=transactions-transactions\\:transactionsOff , throughout-throughout\\:toutOff , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff , rtsj-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool , memory-memory\\:off , javacard-javacard\\:jcOff
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_EXPAND
[DecisionProcedure]pd_mode=0
[DecisionProcedure]Exec=Z3\\=z3 -smt -m %f\\:Simplify\\=simplify.exe %f\\:Yices\\=yices -tc -e -smt %f\\:CVC3\\=cvc3 -lang smt +model %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=throughout-throughout\\:toutOn-throughout\\:toutOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , programRules-programRules\\:Java-programRules\\:ODL , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , rtsj-rtsj\\:on-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool-stringRules\\:withoutStringPool , memory-memory\\:off-memory\\:on , javacard-javacard\\:jcOff-javacard\\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[TacletTranslation]maxGeneric=3
"
}

\javaSource "C:\\Users\\dome\\UNI\\WS_11_12\\SEFM\\SEFM_Git\\Lab_2\\MazeLab\\src\\maze";



\programVariables {
java.lang.Throwable exc;
maze.Maze self;
int _direction;
int newCol;
int direction;
int _newRow;
int _newCol;
int newRow;
boolean result;
}

\functions {
\nonRigid[LocationNoHeap] jint playerColAtPre_0(maze.Maze);
\nonRigid[LocationNoHeap] jint playerRowAtPre_0(maze.Maze);
}

\predicates {
}

\problem {
     inReachableState
   & (  \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (     (jint)(0) <= i
                    & i <  m_0.maze@(maze.Maze).length
                    & inInt(i)
                 -> !m_0.maze@(maze.Maze)[i] = null))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> !m_0.maze@(maze.Maze) = null)
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \exists jint colNr; 
                (  colNr >= (jint)(0)
                 & inInt(colNr)
                 & \forall jint row; 
                     (     row >= (jint)(0)
                         &    row
                           <  m_0.maze@(maze.Maze).length
                         & inInt(row)
                      ->   m_0.maze@(maze.Maze)[row].length
                         = colNr)))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint row; 
                (     row >= (jint)(0)
                    &    row
                      <  m_0.maze@(maze.Maze).length
                    & inInt(row)
                 -> \forall jint col; 
                      (     col >= (jint)(0)
                          &    col
                            <  m_0.maze@(maze.Maze)[row].length
                          & inInt(col)
                       ->      m_0.maze@(maze.Maze)[row][col]
                            >= maze.Maze.FREE
                          &    m_0.maze@(maze.Maze)[row][col]
                            <= maze.Maze.EXIT)))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \exists jint row; 
                (  row >= (jint)(0)
                 & row <  m_0.maze@(maze.Maze).length
                 & inInt(row)
                 & \exists jint col; 
                     (  col >= (jint)(0)
                      &    col
                        <  m_0.maze@(maze.Maze)[row].length
                      & inInt(col)
                      & (    m_0.maze@(maze.Maze)[row][col]
                           = maze.Maze.EXIT
                         & \forall jint row2; 
                             (   inInt(row2)
                              -> \forall jint col2; 
                                   (        row2
                                         >= (jint)(0)
                                       & (     row2
                                            <  m_0.maze@(maze.Maze).length
                                          & (     col2
                                               >= (jint)(0)
                                             &    col2
                                               <  m_0.maze@(maze.Maze)[row].length))
                                       & inInt(col2)
                                    ->   m_0.maze@(maze.Maze)[row2][col2]
                                       = maze.Maze.EXIT
                                    ->   row2 = row
                                       & col2 = col))))))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->   m_0.playerRow@(maze.Maze) >= (jint)(0)
              & (     m_0.playerRow@(maze.Maze)
                   <  m_0.maze@(maze.Maze).length
                 & (     m_0.playerCol@(maze.Maze)
                      >= (jint)(0)
                    & (     m_0.playerCol@(maze.Maze)
                         <  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)].length
                       & !  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)][m_0.playerCol@(maze.Maze)]
                          = maze.Maze.WALL)))))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & (inInt(newRow) & inInt(newCol))
   & !(  newRow >= (jint)(0)
       & (  newCol >= (jint)(0)
          & (  newRow <  self.maze@(maze.Maze).length
             &    newCol
               <  self.maze@(maze.Maze)[newRow].length)))
-> {_newCol:=newCol ||
     _newRow:=newRow}
     \<{
         exc=null;try {
           result=self.isPossible(_newRow,_newCol)@maze.Maze;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\> (!result = TRUE & exc = null)

}

\proof {
(keyLog "0" (keyUser "dome" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "5226")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,1,1,1,0,1,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "0,1,0,0"))
(rule "inInt" (formula "1") (term "1,1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,0,0,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_1" (formula "1") (term "1,0,0"))
(rule "concrete_impl_1" (formula "1") (term "0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "assignment_instance_field_of_this" (formula "11") (term "2"))
(builtin "Update Simplification" (formula "11"))
(rule "castDelInt" (formula "10") (term "1,0"))
(rule "castDelInt" (formula "10") (term "1,0,1"))
(rule "castDelInt" (formula "7") (term "1,0,1,0"))
(rule "castDelInt" (formula "7") (term "1,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,0,1,1,0,1,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "5") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "5") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "4") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "4") (term "1,0,0,1,0"))
(rule "castDelInt" (formula "2") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,1,1"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "10") (term "0,1,1,1"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,1,1"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,1,0"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,1,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,1,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "double_not" (formula "7") (term "1,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "double_not" (formula "6") (term "1,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "double_not" (formula "5") (term "1,0,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "double_not" (formula "4") (term "1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0"))
(rule "nnf_imp2or" (formula "2") (term "0,1,0"))
(rule "nnf_imp2or" (formula "4") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,1,0"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "1,0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "shift_paren_and" (formula "7") (term "1,1,1,0"))
(rule "commute_and" (formula "6") (term "1,1,0,0,1,1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "5") (term "0,1,0,1,0"))
(rule "commute_or" (formula "5") (term "1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "1,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "6") (term "1,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,1,0,0,1,1,0,1,0,1,0"))
(rule "cut_direct" (formula "10") (term "0"))
(branch " CUT: newRow >= 0 TRUE"
   (rule "concrete_and_1" (formula "11"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,1,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "1,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,1,1,0"))
   (rule "commute_and" (formula "8") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "methodBodyExpand" (formula "16") (term "3"))
   (rule "all_pull_out1" (formula "5") (term "0,1,0"))
   (rule "all_pull_out3" (formula "3") (term "0"))
   (rule "shift_paren_or" (formula "3") (term "0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0,0"))
   (rule "all_pull_out3" (formula "6") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "6") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "1,0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,1,0"))
   (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "1,0,1,0,1,0"))
   (rule "ex_pull_out3" (formula "5") (term "0"))
   (rule "cut_direct" (formula "15") (term "0"))
   (branch " CUT: newCol >= 0 TRUE"
      (rule "concrete_and_1" (formula "16"))
      (rule "all_pull_out3" (formula "7") (term "0"))
      (rule "all_pull_out1" (formula "8") (term "0,1,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "8") (term "0,0,1,0,1,0,1,0"))
      (rule "all_pull_out3" (formula "6") (term "0,0"))
      (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
      (rule "commute_or_2" (formula "6") (term "1,0,0,0"))
      (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "6") (term "0,1,0,0,0"))
      (rule "commute_or" (formula "6") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "6") (term "0,0,1,0,0,0"))
      (rule "all_pull_out3" (formula "7") (term "0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
      (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
      (rule "ifElseUnfold" (formula "18") (term "3") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "18") (term "3") (newnames "b_1"))
      (rule "compound_assignment_3" (formula "18") (term "3"))
      (rule "all_pull_out1" (formula "9") (term "0,1,0,1,0"))
      (rule "all_pull_out1" (formula "9") (term "0,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0,1,0"))
      (rule "ex_pull_out1" (formula "9") (term "0,1,0"))
      (rule "cut_direct" (formula "17") (term "0"))
      (branch " CUT: self.maze.length >= 1 + newRow TRUE"
         (rule "concrete_and_1" (formula "18"))
         (rule "inEqSimp_geqRight" (formula "18"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "all_pull_out1" (formula "11") (term "0,0,1,0"))
         (rule "all_pull_out1" (formula "11") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "11") (term "0,0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "11") (term "0,0,0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "11") (term "0,0,0,0,0,0,0,1,0"))
         (rule "commute_and_2" (formula "11") (term "0,0,0,0,0,0,0,0,1,0"))
         (rule "commute_and" (formula "11") (term "0,0,0,0,0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "11") (term "0"))
         (rule "ex_pull_out3" (formula "11") (term "0,0"))
         (rule "ifElseUnfold" (formula "19") (term "3") (inst "#boolv=b_2"))
         (rule "variableDeclaration" (formula "19") (term "3") (newnames "b_2"))
         (rule "compound_assignment_2" (formula "19") (term "3") (inst "#v=b_3"))
         (rule "variableDeclarationAssign" (formula "19") (term "3"))
         (rule "variableDeclaration" (formula "19") (term "3") (newnames "b_3"))
         (rule "compound_assignment_3" (formula "19") (term "3"))
         (rule "allLeft" (formula "7") (inst "t=self"))
         (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "7") (term "1,0"))
         (rule "concrete_or_4" (formula "7") (term "0"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "7"))
         (rule "notLeft" (formula "7"))
         (rule "all_pull_out3" (formula "11") (term "0,0,0"))
         (rule "allLeft" (formula "16") (inst "t=self"))
         (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "20"))
         (rule "concrete_or_2" (formula "16") (term "0"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "16") (term "0"))
         (rule "concrete_or_2" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "all_pull_out3" (formula "11") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,0,1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,1,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,0,1,0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "11") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "11") (term "1,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "11") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "11") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "11") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "11") (term "1,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "11") (term "0,0,0,0,0,0,0,0"))
         (rule "allLeft" (formula "15") (inst "t=self"))
         (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "15") (term "1,0"))
         (rule "concrete_or_4" (formula "15") (term "0"))
         (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "21"))
         (rule "concrete_or_2" (formula "15"))
         (rule "ifElseUnfold" (formula "22") (term "3") (inst "#boolv=b_4"))
         (rule "variableDeclaration" (formula "22") (term "3") (newnames "b_23"))
         (rule "compound_assignment_2" (formula "22") (term "3") (inst "#v=b_24"))
         (rule "variableDeclarationAssign" (formula "22") (term "3"))
         (rule "variableDeclaration" (formula "22") (term "3") (newnames "b_24"))
         (rule "evaluate_lazy_and" (formula "22") (term "3"))
         (rule "allLeft" (formula "14") (inst "t=self"))
         (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "19"))
         (rule "concrete_not_1" (formula "14") (term "1,0"))
         (rule "concrete_or_4" (formula "14") (term "0"))
         (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
         (rule "concrete_or_2" (formula "14"))
         (rule "allLeft" (formula "6") (inst "t=self"))
         (rule "replace_known_left" (formula "6") (term "0,1,0,0,0") (ifseqformula "20"))
         (rule "concrete_not_1" (formula "6") (term "1,0,0,0"))
         (rule "concrete_or_4" (formula "6") (term "0,0,0"))
         (rule "replace_known_right" (formula "6") (term "1,0,0,0") (ifseqformula "23"))
         (rule "concrete_or_4" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0"))
         (rule "allLeft" (formula "9") (inst "t=self"))
         (rule "exLeft" (formula "9") (inst "sk=colNr_0"))
         (rule "replace_known_left" (formula "9") (term "0,1,0,0,1,0") (ifseqformula "21"))
         (rule "concrete_not_1" (formula "9") (term "1,0,0,1,0"))
         (rule "concrete_or_4" (formula "9") (term "0,0,1,0"))
         (rule "replace_known_right" (formula "9") (term "1,0,0,0") (ifseqformula "24"))
         (rule "concrete_or_4" (formula "9") (term "0,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,1,0,0") (ifseqformula "21"))
         (rule "concrete_not_1" (formula "9") (term "1,0,0"))
         (rule "concrete_or_4" (formula "9") (term "0,0"))
         (rule "replace_known_right" (formula "9") (term "1,0,0,1,0") (ifseqformula "24"))
         (rule "concrete_or_4" (formula "9") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
         (rule "distr_forallAnd" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "all_unused" (formula "9"))
         (rule "ifElseUnfold" (formula "26") (term "3") (inst "#boolv=b_25"))
         (rule "variableDeclaration" (formula "26") (term "3") (newnames "b_25"))
         (rule "compound_assignment_2" (formula "26") (term "3") (inst "#v=b_26"))
         (rule "variableDeclarationAssign" (formula "26") (term "3"))
         (rule "variableDeclaration" (formula "26") (term "3") (newnames "b_26"))
         (rule "remove_parentheses_right" (formula "26") (term "3"))
         (rule "greater_equal_than_comparison_new" (formula "26") (term "3"))
         (builtin "Update Simplification" (formula "26"))
         (rule "assignment_instance_field_of_this" (formula "26") (term "3,2"))
         (builtin "Update Simplification" (formula "26"))
         (rule "assignment_instance_field_of_this" (formula "26") (term "3,1"))
         (builtin "Update Simplification" (formula "26"))
         (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "4"))
         (rule "ifthenelse_true_for" (formula "26"))
         (rule "compound_assignment_1" (formula "26") (term "4"))
         (rule "allLeft" (formula "15") (inst "t=self"))
         (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "26"))
         (rule "concrete_or_2" (formula "15") (term "0"))
         (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "23"))
         (rule "concrete_not_1" (formula "15") (term "0"))
         (rule "concrete_or_2" (formula "15"))
         (rule "allLeft" (formula "17") (inst "t=self"))
         (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "27"))
         (rule "concrete_or_2" (formula "17") (term "0"))
         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "24"))
         (rule "concrete_not_1" (formula "17") (term "0"))
         (rule "concrete_or_2" (formula "17"))
         (rule "allLeft" (formula "6") (inst "t=newRow"))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
         (rule "add_literals" (formula "6") (term "0,0,1,0"))
         (rule "leq_literals" (formula "6") (term "0,1,0"))
         (rule "concrete_and_2" (formula "6") (term "1,0"))
         (rule "concrete_or_4" (formula "6") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "6") (term "0,0"))
         (rule "concrete_and_2" (formula "6") (term "0"))
         (rule "concrete_or_2" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "allLeft" (formula "6") (inst "t=self.playerRow@(maze.Maze)"))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "20"))
         (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
         (rule "leq_literals" (formula "6") (term "0,1,0"))
         (rule "concrete_and_2" (formula "6") (term "1,0"))
         (rule "concrete_or_4" (formula "6") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "16"))
         (rule "qeq_literals" (formula "6") (term "0,0"))
         (rule "concrete_and_2" (formula "6") (term "0"))
         (rule "concrete_or_2" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "allLeft" (formula "10") (inst "t=newRow"))
         (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
         (rule "leq_literals" (formula "10") (term "0,1,0"))
         (rule "concrete_and_2" (formula "10") (term "1,0"))
         (rule "concrete_or_4" (formula "10") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "10") (term "0,0"))
         (rule "concrete_and_2" (formula "10") (term "0"))
         (rule "concrete_or_2" (formula "10"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
         (rule "leq_literals" (formula "11") (term "0,1,0"))
         (rule "concrete_and_2" (formula "11") (term "1,0"))
         (rule "concrete_or_4" (formula "11") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "17"))
         (rule "qeq_literals" (formula "11") (term "0,0"))
         (rule "concrete_and_2" (formula "11") (term "0"))
         (rule "concrete_or_2" (formula "11"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "23"))
         (rule "polySimp_addComm1" (formula "23") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23"))
         (rule "polySimp_mulComm0" (formula "23") (term "1"))
         (rule "polySimp_rightDist" (formula "23") (term "1"))
         (rule "mul_literals" (formula "23") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "23"))
         (rule "times_zero_1" (formula "19") (term "0,0"))
         (rule "add_zero_left" (formula "19") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19"))
         (rule "mul_literals" (formula "19") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "19"))
         (rule "leq_literals" (formula "9") (term "0"))
         (rule "concrete_or_1" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "allLeft" (formula "14") (inst "t=self"))
         (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0,0") (ifseqformula "27"))
         (rule "concrete_not_1" (formula "14") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "14") (term "0,0,0,0,0"))
         (rule "replace_known_right" (formula "14") (term "1,0,0,0,0,0") (ifseqformula "32"))
         (rule "concrete_or_4" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0"))
         (rule "allLeft" (formula "13") (inst "t=self"))
         (rule "replace_known_right" (formula "13") (term "1,0,0,0,0,0,0") (ifseqformula "33"))
         (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0,0"))
         (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "13") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
         (rule "ifElseSplit" (formula "34"))
         (branch " if b_26 true"
            (builtin "Update Simplification" (formula "35"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "34") (term "3"))
            (builtin "Update Simplification" (formula "34"))
            (rule "only_created_object_are_referenced_non_null" (formula "2") (term "0,0") (ifseqformula "28") (ifseqformula "5") (ifseqformula "32"))
            (rule "ifElse" (formula "35") (term "4"))
            (builtin "Update Simplification" (formula "35"))
            (rule "boolean_not_equal_2" (formula "35") (term "0"))
            (rule "ifthenelse_false_for" (formula "35"))
            (rule "elim_double_block_2" (formula "35") (term "3"))
            (rule "greater_equal_than_comparison_new" (formula "35") (term "3"))
            (builtin "Update Simplification" (formula "35"))
            (rule "assignment_instance_field_of_this" (formula "35") (term "3,2"))
            (builtin "Update Simplification" (formula "35"))
            (rule "blockEmpty" (formula "35") (term "4,2"))
            (rule "assignment_instance_field_of_this" (formula "35") (term "3,1"))
            (builtin "Update Simplification" (formula "35"))
            (rule "blockEmpty" (formula "35") (term "4,1"))
            (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "4"))
            (rule "ifthenelse_true_for" (formula "35"))
            (rule "compound_assignment_1" (formula "35") (term "4"))
            (rule "ifElseSplit" (formula "35"))
            (branch " if b_24 true"
               (builtin "Update Simplification" (formula "36"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment_instance_field_of_this" (formula "35") (term "3"))
               (builtin "Update Simplification" (formula "35"))
               (rule "ifElseSplit" (formula "35"))
               (branch " if b_23 true"
                  (builtin "Update Simplification" (formula "36"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_23 false"
                  (rule "false_to_not_true" (formula "1") (term "4"))
                  (builtin "Update Simplification" (formula "36"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "compound_less_than_comparison_2" (formula "35") (term "3") (inst "#v1=j_1") (inst "#v0=j"))
                  (rule "variableDeclarationAssign" (formula "35") (term "3"))
                  (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_2"))
                  (rule "assignment_instance_field_of_this" (formula "35") (term "3"))
                  (builtin "Update Simplification" (formula "35"))
                  (rule "variableDeclarationAssign" (formula "35") (term "4"))
                  (rule "variableDeclaration" (formula "35") (term "4") (newnames "j_3"))
                  (rule "assignment_read_attribute" (formula "35") (term "4"))
                  (branch " Normal Execution (maze != null)"
                     (builtin "Update Simplification" (formula "36"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "less_than_comparison_new" (formula "35") (term "5"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "assignment_instance_field_of_this" (formula "35") (term "3,2"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "blockEmpty" (formula "35") (term "4,2"))
                     (rule "assignment_instance_field_of_this" (formula "35") (term "3,1"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "blockEmpty" (formula "35") (term "4,1"))
                     (rule "inEqSimp_ltToLeq" (formula "35") (term "0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "0,0"))
                     (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "3"))
                     (rule "ifthenelse_true_for" (formula "35"))
                     (rule "compound_assignment_1" (formula "35") (term "4"))
                     (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "32") (term "0,0") (ifseqformula "2") (ifseqformula "6") (ifseqformula "30"))
                     (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "32") (term "0") (ifseqformula "3") (ifseqformula "7") (ifseqformula "32"))
                     (rule "ifElse" (formula "37") (term "4"))
                     (builtin "Update Simplification" (formula "37"))
                     (rule "boolean_equal" (formula "37") (term "0"))
                     (rule "ifthenelse_true_for" (formula "37"))
                     (rule "assignment_instance_field_of_this" (formula "37") (term "3"))
                     (builtin "Update Simplification" (formula "37"))
                     (rule "ifElse" (formula "37") (term "4"))
                     (builtin "Update Simplification" (formula "37"))
                     (rule "boolean_not_equal_2" (formula "37") (term "0"))
                     (rule "ifthenelse_false_for" (formula "37"))
                     (rule "compound_less_than_comparison_2" (formula "37") (term "3") (inst "#v1=j_1") (inst "#v0=j"))
                     (rule "variableDeclarationAssign" (formula "37") (term "3"))
                     (rule "variableDeclaration" (formula "37") (term "3") (newnames "j_4"))
                     (rule "assignment_instance_field_of_this" (formula "37") (term "3"))
                     (builtin "Update Simplification" (formula "37"))
                     (rule "variableDeclarationAssign" (formula "37") (term "4"))
                     (rule "variableDeclaration" (formula "37") (term "4") (newnames "j_5"))
                     (rule "eval_order_array_access6" (formula "37") (term "4") (inst "#v0=var"))
                     (rule "variableDeclarationAssign" (formula "37") (term "4"))
                     (rule "variableDeclaration" (formula "37") (term "4") (newnames "var"))
                     (rule "assignment_array2" (formula "37") (term "4"))
                     (branch " Normal Execution (maze != null)"
                        (builtin "Update Simplification" (formula "38"))
                        (builtin "Update Simplification" (formula "37"))
                        (rule "orRight" (formula "37"))
                        (rule "orRight" (formula "37"))
                        (rule "inEqSimp_ltRight" (formula "38"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "37"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "assignment_read_attribute" (formula "37") (term "5"))
                        (branch " Normal Execution (var != null)"
                           (builtin "Update Simplification" (formula "38"))
                           (builtin "Update Simplification" (formula "37"))
                           (rule "applyEq" (formula "37") (term "4") (ifseqformula "12"))
                           (rule "less_than_comparison_new" (formula "37") (term "5"))
                           (builtin "Update Simplification" (formula "37"))
                           (rule "assignment_instance_field_of_this" (formula "37") (term "3,2"))
                           (builtin "Update Simplification" (formula "37"))
                           (rule "blockEmpty" (formula "37") (term "4,2"))
                           (rule "assignment_instance_field_of_this" (formula "37") (term "3,1"))
                           (builtin "Update Simplification" (formula "37"))
                           (rule "blockEmpty" (formula "37") (term "4,1"))
                           (rule "inEqSimp_ltToLeq" (formula "37") (term "0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "37") (term "1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "37") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "37") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,0"))
                           (rule "add_literals" (formula "37") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "37") (term "0,0,0"))
                           (rule "leq_literals" (formula "37") (term "0,0"))
                           (rule "concrete_and_2" (formula "37") (term "0"))
                           (rule "ifthenelse_false_for" (formula "37"))
                           (rule "array_length_non_negative_3" (formula "14") (term "1,1,0,0") (ifseqformula "8") (ifseqformula "4") (ifseqformula "35"))
                           (rule "array_length_non_negative_3" (formula "13") (term "0") (ifseqformula "8") (ifseqformula "2") (ifseqformula "33"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "25"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (rule "concrete_or_1" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "ifElse" (formula "38") (term "4"))
                           (builtin "Update Simplification" (formula "38"))
                           (rule "boolean_not_equal_2" (formula "38") (term "0"))
                           (rule "ifthenelse_false_for" (formula "38"))
                           (rule "blockReturn" (formula "38") (term "1"))
                           (rule "methodCallReturn" (formula "38") (term "1"))
                           (rule "assignment_instance_field_of_this" (formula "38") (term "1"))
                           (builtin "Update Simplification" (formula "38"))
                           (rule "methodCallEmpty" (formula "38") (term "2"))
                           (rule "tryEmpty" (formula "38") (term "2"))
                           (rule "emptyModality" (formula "38") (term "2"))
                           (builtin "Update Simplification" (formula "38"))
                           (rule "boolean_not_equal_2" (formula "38") (term "0,0"))
                           (rule "eqClose" (formula "38") (term "1"))
                           (rule "concrete_not_2" (formula "38") (term "0"))
                           (rule "concrete_and_1" (formula "38"))
                           (rule "closeTrue" (formula "38"))
                        )
                        (branch " Null Reference (var = null)"
                           (builtin "Update Simplification" (formula "38"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "close" (formula "34") (ifseqformula "1"))
                        )
                     )
                     (branch " Null Reference (maze = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                     (branch " Index Out of Bounds (maze != null, but _newRow Out of Bounds!)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "blockThrow" (formula "38") (term "4"))
                        (builtin "Update Simplification" (formula "38"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch " Null Reference (maze = null)"
                     (builtin "Update Simplification" (formula "1"))
                     (rule "close" (formula "34") (ifseqformula "1"))
                  )
               )
            )
            (branch " if b_24 false"
               (rule "false_to_not_true" (formula "1") (term "4"))
               (builtin "Update Simplification" (formula "36"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1") (term "0"))
               (rule "concrete_not_1" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch " if b_26 false"
            (rule "false_to_not_true" (formula "1") (term "4"))
            (builtin "Update Simplification" (formula "35"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch " CUT: self.maze.length >= 1 + newRow FALSE"
         (rule "concrete_and_2" (formula "18"))
         (rule "false_right" (formula "18"))
         (rule "inEqSimp_geqRight" (formula "17"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "all_pull_out1" (formula "10") (term "0,0,1,0"))
         (rule "all_pull_out1" (formula "10") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,0,0,1,0"))
         (rule "commute_and_2" (formula "10") (term "0,0,0,0,0,0,0,0,1,0"))
         (rule "commute_and" (formula "10") (term "0,0,0,0,0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "10") (term "0"))
         (rule "ex_pull_out3" (formula "10") (term "0,0"))
         (rule "ifElseUnfold" (formula "18") (term "3") (inst "#boolv=b_2"))
         (rule "variableDeclaration" (formula "18") (term "3") (newnames "b_4"))
         (rule "compound_assignment_2" (formula "18") (term "3") (inst "#v=b_5"))
         (rule "variableDeclarationAssign" (formula "18") (term "3"))
         (rule "variableDeclaration" (formula "18") (term "3") (newnames "b_5"))
         (rule "compound_assignment_3" (formula "18") (term "3"))
         (rule "allLeft" (formula "6") (inst "t=self"))
         (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "18"))
         (rule "concrete_or_2" (formula "6") (term "0"))
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "6") (term "0"))
         (rule "concrete_or_2" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "all_pull_out3" (formula "10") (term "0,0,0"))
         (rule "allLeft" (formula "14") (inst "t=self"))
         (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "14") (term "0"))
         (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "14") (term "0"))
         (rule "concrete_or_2" (formula "14"))
         (rule "allLeft" (formula "16") (inst "t=self"))
         (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "20"))
         (rule "concrete_or_2" (formula "16") (term "0"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "16") (term "0"))
         (rule "concrete_or_2" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "all_pull_out3" (formula "10") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0,1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "10") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "10") (term "1,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "10") (term "1,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "10") (term "0,0,0,0,0,0,0,0"))
         (rule "ifElseUnfold" (formula "21") (term "3") (inst "#boolv=b_6"))
         (rule "variableDeclaration" (formula "21") (term "3") (newnames "b_6"))
         (rule "compound_assignment_2" (formula "21") (term "3") (inst "#v=b_7"))
         (rule "variableDeclarationAssign" (formula "21") (term "3"))
         (rule "variableDeclaration" (formula "21") (term "3") (newnames "b_7"))
         (rule "compound_assignment_3" (formula "21") (term "3"))
         (rule "allLeft" (formula "13") (inst "t=self"))
         (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "21"))
         (rule "concrete_or_2" (formula "13") (term "0"))
         (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "13") (term "0"))
         (rule "concrete_or_2" (formula "13"))
         (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "13") (term "0,0"))
         (rule "mul_literals" (formula "13") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "polySimp_elimOne" (formula "13") (term "0"))
         (rule "ifElseUnfold" (formula "23") (term "3") (inst "#boolv=b_8"))
         (rule "variableDeclaration" (formula "23") (term "3") (newnames "b_8"))
         (rule "compound_assignment_2" (formula "23") (term "3") (inst "#v=b_9"))
         (rule "variableDeclarationAssign" (formula "23") (term "3"))
         (rule "variableDeclaration" (formula "23") (term "3") (newnames "b_9"))
         (rule "greater_equal_than_comparison_new" (formula "23") (term "3"))
         (builtin "Update Simplification" (formula "23"))
         (rule "assignment_instance_field_of_this" (formula "23") (term "3,1"))
         (builtin "Update Simplification" (formula "23"))
         (rule "assignment" (formula "23") (term "3,2"))
         (builtin "Update Simplification" (formula "23"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "3"))
         (rule "ifthenelse_true_for" (formula "23"))
         (rule "compound_assignment_1" (formula "23") (term "4"))
         (rule "allLeft" (formula "11") (inst "t=self"))
         (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "20"))
         (rule "concrete_not_1" (formula "11") (term "1,0"))
         (rule "concrete_or_4" (formula "11") (term "0"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
         (rule "concrete_or_2" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "14"))
         (rule "times_zero_1" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "11"))
         (rule "leq_literals" (formula "3") (term "0"))
         (rule "concrete_or_1" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "allLeft" (formula "13") (inst "t=self"))
         (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "24"))
         (rule "concrete_or_2" (formula "13") (term "0"))
         (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "21"))
         (rule "concrete_not_1" (formula "13") (term "0"))
         (rule "concrete_or_2" (formula "13"))
         (rule "allLeft" (formula "6") (inst "t=self"))
         (rule "exLeft" (formula "6") (inst "sk=colNr_1"))
         (rule "replace_known_left" (formula "6") (term "0,1,0,0,1,0") (ifseqformula "22"))
         (rule "concrete_not_1" (formula "6") (term "1,0,0,1,0"))
         (rule "concrete_or_4" (formula "6") (term "0,0,1,0"))
         (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "22"))
         (rule "concrete_not_1" (formula "6") (term "1,0,0"))
         (rule "concrete_or_4" (formula "6") (term "0,0"))
         (rule "replace_known_right" (formula "6") (term "1,0,0") (ifseqformula "25"))
         (rule "concrete_or_4" (formula "6") (term "0,0"))
         (rule "replace_known_right" (formula "6") (term "1,0,0,1,0") (ifseqformula "25"))
         (rule "concrete_or_4" (formula "6") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0"))
         (rule "distr_forallAnd" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "all_unused" (formula "6"))
         (rule "allLeft" (formula "10") (inst "t=self"))
         (rule "replace_known_right" (formula "10") (term "1,0,0,0,0,0,0") (ifseqformula "27"))
         (rule "concrete_or_4" (formula "10") (term "0,0,0,0,0,0"))
         (rule "replace_known_left" (formula "10") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
         (rule "concrete_not_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0"))
         (rule "allLeft" (formula "9") (inst "t=self"))
         (rule "replace_known_right" (formula "9") (term "1,0,0,0,0,0,0") (ifseqformula "28"))
         (rule "concrete_or_4" (formula "9") (term "0,0,0,0,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
         (rule "concrete_not_1" (formula "9") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,0"))
         (rule "ifElseSplit" (formula "29"))
         (branch " if b_9 true"
            (builtin "Update Simplification" (formula "30"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "29") (term "3"))
            (builtin "Update Simplification" (formula "29"))
            (rule "allLeft" (formula "4") (inst "t=self"))
            (rule "replace_known_right" (formula "4") (term "1,0,0,0,0") (ifseqformula "29"))
            (rule "concrete_or_4" (formula "4") (term "0,0,0,0"))
            (rule "replace_known_left" (formula "4") (term "0,1,0,0,0") (ifseqformula "26"))
            (rule "concrete_not_1" (formula "4") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "4") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
            (rule "allLeft" (formula "8") (inst "t=self.playerRow@(maze.Maze)"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "8") (term "0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0"))
            (rule "concrete_or_2" (formula "8") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "22"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0"))
            (rule "leq_literals" (formula "8") (term "0,0"))
            (rule "concrete_and_2" (formula "8") (term "0"))
            (rule "concrete_or_2" (formula "8"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq1" (formula "24"))
            (rule "polySimp_addComm1" (formula "24") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24"))
            (rule "polySimp_mulComm0" (formula "24") (term "1"))
            (rule "polySimp_rightDist" (formula "24") (term "1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
            (rule "mul_literals" (formula "24") (term "0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "24"))
            (rule "times_zero_1" (formula "19") (term "0,0"))
            (rule "add_zero_left" (formula "19") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19"))
            (rule "mul_literals" (formula "19") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "19"))
            (rule "leq_literals" (formula "7") (term "0"))
            (rule "concrete_or_1" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "ifElse" (formula "31") (term "4"))
            (builtin "Update Simplification" (formula "31"))
            (rule "boolean_not_equal_2" (formula "31") (term "0"))
            (rule "ifthenelse_false_for" (formula "31"))
            (rule "greater_equal_than_comparison_new" (formula "31") (term "3"))
            (builtin "Update Simplification" (formula "31"))
            (rule "assignment_instance_field_of_this" (formula "31") (term "3,2"))
            (builtin "Update Simplification" (formula "31"))
            (rule "assignment_instance_field_of_this" (formula "31") (term "3,1"))
            (builtin "Update Simplification" (formula "31"))
            (rule "blockEmpty" (formula "31") (term "4,1"))
            (rule "blockEmpty" (formula "31") (term "4,2"))
            (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "2"))
            (rule "ifthenelse_true_for" (formula "31"))
            (rule "compound_assignment_1" (formula "31") (term "4"))
            (rule "allLeft" (formula "4") (inst "t=self.playerRow@(maze.Maze)"))
            (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "4") (term "0,0,0"))
            (rule "concrete_and_2" (formula "4") (term "0,0"))
            (rule "concrete_or_2" (formula "4") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0,0"))
            (rule "leq_literals" (formula "4") (term "0,0"))
            (rule "concrete_and_2" (formula "4") (term "0"))
            (rule "concrete_or_2" (formula "4"))
            (rule "notLeft" (formula "4"))
            (rule "only_created_object_are_referenced_non_null" (formula "1") (term "0,0") (ifseqformula "27") (ifseqformula "3") (ifseqformula "30"))
            (rule "ifElse" (formula "33") (term "4"))
            (builtin "Update Simplification" (formula "33"))
            (rule "boolean_equal" (formula "33") (term "0"))
            (rule "ifthenelse_true_for" (formula "33"))
            (rule "assignment_instance_field_of_this" (formula "33") (term "3"))
            (builtin "Update Simplification" (formula "33"))
            (rule "ifElse" (formula "33") (term "4"))
            (builtin "Update Simplification" (formula "33"))
            (rule "boolean_not_equal_2" (formula "33") (term "0"))
            (rule "ifthenelse_false_for" (formula "33"))
            (rule "compound_less_than_comparison_2" (formula "33") (term "3") (inst "#v1=j_1") (inst "#v0=j"))
            (rule "variableDeclarationAssign" (formula "33") (term "3"))
            (rule "variableDeclaration" (formula "33") (term "3") (newnames "j"))
            (rule "assignment" (formula "33") (term "3"))
            (builtin "Update Simplification" (formula "33"))
            (rule "variableDeclarationAssign" (formula "33") (term "4"))
            (rule "variableDeclaration" (formula "33") (term "4") (newnames "j_1"))
            (rule "assignment_read_attribute" (formula "33") (term "4"))
            (branch " Normal Execution (maze != null)"
               (builtin "Update Simplification" (formula "34"))
               (builtin "Update Simplification" (formula "33"))
               (rule "less_than_comparison_new" (formula "33") (term "5"))
               (builtin "Update Simplification" (formula "33"))
               (rule "assignment" (formula "33") (term "3,1"))
               (builtin "Update Simplification" (formula "33"))
               (rule "assignment_instance_field_of_this" (formula "33") (term "3,2"))
               (builtin "Update Simplification" (formula "33"))
               (rule "blockEmpty" (formula "33") (term "4,1"))
               (rule "blockEmpty" (formula "33") (term "4,2"))
               (rule "inEqSimp_ltToLeq" (formula "33") (term "0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "33") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "0,0"))
               (rule "polySimp_elimOne" (formula "33") (term "0,0"))
               (rule "inEqSimp_contradInEq0" (formula "33") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "33") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0"))
               (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
               (rule "add_literals" (formula "33") (term "0,0,0"))
               (rule "leq_literals" (formula "33") (term "0,0"))
               (rule "concrete_and_2" (formula "33") (term "0"))
               (rule "ifthenelse_false_for" (formula "33"))
               (rule "compound_assignment_1" (formula "33") (term "4"))
               (rule "ifElse" (formula "33") (term "4"))
               (builtin "Update Simplification" (formula "33"))
               (rule "boolean_not_equal_2" (formula "33") (term "0"))
               (rule "ifthenelse_false_for" (formula "33"))
               (rule "assignment_instance_field_of_this" (formula "33") (term "3"))
               (builtin "Update Simplification" (formula "33"))
               (rule "ifElse" (formula "33") (term "4"))
               (builtin "Update Simplification" (formula "33"))
               (rule "boolean_equal" (formula "33") (term "0"))
               (rule "ifthenelse_true_for" (formula "33"))
               (rule "assignment_instance_field_of_this" (formula "33") (term "3"))
               (builtin "Update Simplification" (formula "33"))
               (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "30") (term "0,0") (ifseqformula "1") (ifseqformula "4") (ifseqformula "29"))
               (rule "array_length_non_negative_3" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "5") (ifseqformula "2") (ifseqformula "32"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "3"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "19"))
               (rule "leq_literals" (formula "14") (term "0"))
               (rule "concrete_or_1" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "ifElse" (formula "35") (term "4"))
               (builtin "Update Simplification" (formula "35"))
               (rule "boolean_not_equal_2" (formula "35") (term "0"))
               (rule "ifthenelse_false_for" (formula "35"))
               (rule "blockReturn" (formula "35") (term "1"))
               (rule "methodCallReturn" (formula "35") (term "1"))
               (rule "assignment_instance_field_of_this" (formula "35") (term "1"))
               (builtin "Update Simplification" (formula "35"))
               (rule "methodCallEmpty" (formula "35") (term "2"))
               (rule "tryEmpty" (formula "35") (term "2"))
               (rule "emptyModality" (formula "35") (term "2"))
               (builtin "Update Simplification" (formula "35"))
               (rule "boolean_not_equal_2" (formula "35") (term "0,0"))
               (rule "eqClose" (formula "35") (term "1"))
               (rule "concrete_not_2" (formula "35") (term "0"))
               (rule "concrete_and_1" (formula "35"))
               (rule "closeTrue" (formula "35"))
            )
            (branch " Null Reference (maze = null)"
               (builtin "Update Simplification" (formula "1"))
               (rule "close" (formula "32") (ifseqformula "1"))
            )
         )
         (branch " if b_9 false"
            (rule "false_to_not_true" (formula "1") (term "4"))
            (builtin "Update Simplification" (formula "30"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch " CUT: newCol >= 0 FALSE"
      (rule "concrete_and_2" (formula "16"))
      (rule "false_right" (formula "16"))
      (rule "inEqSimp_geqRight" (formula "15"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "all_pull_out3" (formula "7") (term "0"))
      (rule "all_pull_out1" (formula "8") (term "0,1,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "8") (term "0,0,1,0,1,0,1,0"))
      (rule "all_pull_out3" (formula "6") (term "0,0"))
      (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
      (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "6") (term "1,0,0,0"))
      (rule "commute_or" (formula "6") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "6") (term "0,1,0,0,0"))
      (rule "shift_paren_or" (formula "6") (term "0,0,1,0,0,0"))
      (rule "ifElseUnfold" (formula "16") (term "3") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_10"))
      (rule "evaluate_lazy_and" (formula "16") (term "3"))
      (rule "all_pull_out3" (formula "7") (term "0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
      (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
      (rule "all_pull_out1" (formula "9") (term "0,1,0,1,0"))
      (rule "all_pull_out1" (formula "9") (term "0,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0,1,0"))
      (rule "ex_pull_out1" (formula "9") (term "0,1,0"))
      (rule "ifElseUnfold" (formula "17") (term "3") (inst "#boolv=b_11"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_11"))
      (rule "compound_assignment_2" (formula "17") (term "3") (inst "#v=b_12"))
      (rule "variableDeclarationAssign" (formula "17") (term "3"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_12"))
      (rule "remove_parentheses_right" (formula "17") (term "3"))
      (rule "compound_assignment_3" (formula "17") (term "3"))
      (rule "all_pull_out1" (formula "9") (term "0,0,1,0"))
      (rule "all_pull_out1" (formula "9") (term "0,0,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,0,1,0"))
      (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,0,0,1,0"))
      (rule "commute_and_2" (formula "9") (term "0,0,0,0,0,0,0,0,1,0"))
      (rule "commute_and" (formula "9") (term "0,0,0,0,0,0,0,0,0,1,0"))
      (rule "ex_pull_out3" (formula "9") (term "0"))
      (rule "ex_pull_out3" (formula "9") (term "0,0"))
      (rule "all_pull_out3" (formula "9") (term "0,0,0"))
      (rule "all_pull_out3" (formula "9") (term "0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "1,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,1,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "1,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,1,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,1,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "9") (term "1,0,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "9") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "9") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "1,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "9") (term "0,0,0,0,0,0,0,0"))
      (rule "ifElseUnfold" (formula "17") (term "3") (inst "#boolv=b_13"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_13"))
      (rule "compound_assignment_2" (formula "17") (term "3") (inst "#v=b_14"))
      (rule "variableDeclarationAssign" (formula "17") (term "3"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_14"))
      (rule "evaluate_lazy_and" (formula "17") (term "3"))
      (rule "ifElseUnfold" (formula "17") (term "3") (inst "#boolv=b_15"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_15"))
      (rule "compound_assignment_2" (formula "17") (term "3") (inst "#v=b_16"))
      (rule "variableDeclarationAssign" (formula "17") (term "3"))
      (rule "variableDeclaration" (formula "17") (term "3") (newnames "b_16"))
      (rule "remove_parentheses_right" (formula "17") (term "3"))
      (rule "greater_equal_than_comparison_new" (formula "17") (term "3"))
      (builtin "Update Simplification" (formula "17"))
      (rule "assignment_instance_field_of_this" (formula "17") (term "3,1"))
      (builtin "Update Simplification" (formula "17"))
      (rule "assignment_instance_field_of_this" (formula "17") (term "3,2"))
      (builtin "Update Simplification" (formula "17"))
      (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "2"))
      (rule "ifthenelse_true_for" (formula "17"))
      (rule "compound_assignment_1" (formula "17") (term "4"))
      (rule "ifElse" (formula "17") (term "4"))
      (builtin "Update Simplification" (formula "17"))
      (rule "boolean_equal" (formula "17") (term "0"))
      (rule "ifthenelse_true_for" (formula "17"))
      (rule "assignment_instance_field_of_this" (formula "17") (term "3"))
      (builtin "Update Simplification" (formula "17"))
      (rule "ifElseSplit" (formula "17"))
      (branch " if b_15 true"
         (builtin "Update Simplification" (formula "18"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch " if b_15 false"
         (rule "false_to_not_true" (formula "1") (term "4"))
         (builtin "Update Simplification" (formula "18"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "0"))
         (rule "concrete_not_2" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block_2" (formula "17") (term "3"))
         (rule "greater_equal_than_comparison_new" (formula "17") (term "3"))
         (builtin "Update Simplification" (formula "17"))
         (rule "assignment_instance_field_of_this" (formula "17") (term "3,1"))
         (builtin "Update Simplification" (formula "17"))
         (rule "assignment_instance_field_of_this" (formula "17") (term "3,2"))
         (builtin "Update Simplification" (formula "17"))
         (rule "blockEmpty" (formula "17") (term "4,1"))
         (rule "blockEmpty" (formula "17") (term "4,2"))
         (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "17") (term "0,0"))
         (rule "concrete_and_2" (formula "17") (term "0"))
         (rule "ifthenelse_false_for" (formula "17"))
         (rule "compound_assignment_1" (formula "17") (term "4"))
         (rule "ifElseSplit" (formula "17"))
         (branch " if b_14 true"
            (builtin "Update Simplification" (formula "18"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " if b_14 false"
            (rule "false_to_not_true" (formula "1") (term "4"))
            (builtin "Update Simplification" (formula "18"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "0"))
            (rule "concrete_not_2" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "17") (term "3"))
            (builtin "Update Simplification" (formula "17"))
            (rule "ifElse" (formula "17") (term "4"))
            (builtin "Update Simplification" (formula "17"))
            (rule "boolean_equal" (formula "17") (term "0"))
            (rule "ifthenelse_true_for" (formula "17"))
            (rule "assignment_instance_field_of_this" (formula "17") (term "3"))
            (builtin "Update Simplification" (formula "17"))
            (rule "compound_assignment_1" (formula "17") (term "4"))
            (rule "ifElseSplit" (formula "17"))
            (branch " if b_12 true"
               (builtin "Update Simplification" (formula "18"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b_12 false"
               (rule "false_to_not_true" (formula "1") (term "4"))
               (builtin "Update Simplification" (formula "18"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment_instance_field_of_this" (formula "17") (term "3"))
               (builtin "Update Simplification" (formula "17"))
               (rule "ifElse" (formula "17") (term "4"))
               (builtin "Update Simplification" (formula "17"))
               (rule "boolean_equal" (formula "17") (term "0"))
               (rule "ifthenelse_true_for" (formula "17"))
               (rule "assignment_instance_field_of_this" (formula "17") (term "3"))
               (builtin "Update Simplification" (formula "17"))
               (rule "blockEmpty" (formula "17") (term "4"))
               (rule "ifElseSplit" (formula "17"))
               (branch " if b_10 true"
                  (builtin "Update Simplification" (formula "18"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_10 false"
                  (rule "false_to_not_true" (formula "1") (term "4"))
                  (builtin "Update Simplification" (formula "18"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "blockReturn" (formula "17") (term "1"))
                  (rule "methodCallReturn" (formula "17") (term "1"))
                  (rule "assignment" (formula "17") (term "1"))
                  (builtin "Update Simplification" (formula "17"))
                  (rule "methodCallEmpty" (formula "17") (term "2"))
                  (rule "tryEmpty" (formula "17") (term "2"))
                  (rule "emptyModality" (formula "17") (term "2"))
                  (builtin "Update Simplification" (formula "17"))
                  (rule "boolean_not_equal_2" (formula "17") (term "0,0"))
                  (rule "eqClose" (formula "17") (term "1"))
                  (rule "concrete_not_2" (formula "17") (term "0"))
                  (rule "concrete_and_1" (formula "17"))
                  (rule "closeTrue" (formula "17"))
               )
            )
         )
      )
   )
)
(branch " CUT: newRow >= 0 FALSE"
   (rule "concrete_and_2" (formula "11"))
   (rule "false_right" (formula "11"))
   (rule "inEqSimp_geqRight" (formula "10"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,1,0,0,1,1,0,1,0,1,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,1,0,0,1,1,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "1,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,1,1,0"))
   (rule "commute_and" (formula "8") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "methodBodyExpand" (formula "15") (term "3"))
   (rule "all_pull_out1" (formula "5") (term "0,1,0"))
   (rule "all_pull_out3" (formula "3") (term "0"))
   (rule "shift_paren_or" (formula "3") (term "0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0,0"))
   (rule "all_pull_out3" (formula "6") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "6") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "1,0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,1,0"))
   (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "1,0,1,0,1,0"))
   (rule "ex_pull_out3" (formula "5") (term "0"))
   (rule "all_pull_out3" (formula "6") (term "0"))
   (rule "all_pull_out1" (formula "7") (term "0,1,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,1,0,1,0,1,0"))
   (rule "all_pull_out3" (formula "5") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
   (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "5") (term "0,1,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,1,0,0,0"))
   (rule "all_pull_out3" (formula "6") (term "0,0"))
   (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "6") (term "0,0"))
   (rule "distr_forallAnd" (formula "6") (term "0"))
   (rule "distr_forallAnd" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "commute_or_2" (formula "7") (term "0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
   (rule "all_pull_out1" (formula "8") (term "0,1,0,1,0"))
   (rule "ifElseUnfold" (formula "16") (term "3") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b"))
   (rule "compound_assignment_3" (formula "16") (term "3"))
   (rule "all_pull_out1" (formula "8") (term "0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0,1,0"))
   (rule "ex_pull_out1" (formula "8") (term "0,1,0"))
   (rule "all_pull_out1" (formula "8") (term "0,0,1,0"))
   (rule "all_pull_out1" (formula "8") (term "0,0,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,0,0,1,0"))
   (rule "commute_and_2" (formula "8") (term "0,0,0,0,0,0,0,0,1,0"))
   (rule "commute_and" (formula "8") (term "0,0,0,0,0,0,0,0,0,1,0"))
   (rule "ex_pull_out3" (formula "8") (term "0"))
   (rule "ex_pull_out3" (formula "8") (term "0,0"))
   (rule "all_pull_out3" (formula "8") (term "0,0,0"))
   (rule "all_pull_out3" (formula "8") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,1,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0,0,1,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,1,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "8") (term "1,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "8") (term "0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "8") (term "0,0,0,0,0,0,0,0"))
   (rule "ifElseUnfold" (formula "16") (term "3") (inst "#boolv=b_1"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_17"))
   (rule "compound_assignment_2" (formula "16") (term "3") (inst "#v=b_18"))
   (rule "variableDeclarationAssign" (formula "16") (term "3"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_18"))
   (rule "compound_assignment_3" (formula "16") (term "3"))
   (rule "ifElseUnfold" (formula "16") (term "3") (inst "#boolv=b_19"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_19"))
   (rule "compound_assignment_2" (formula "16") (term "3") (inst "#v=b_20"))
   (rule "variableDeclarationAssign" (formula "16") (term "3"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_20"))
   (rule "compound_assignment_3" (formula "16") (term "3"))
   (rule "ifElseUnfold" (formula "16") (term "3") (inst "#boolv=b_21"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_21"))
   (rule "compound_assignment_2" (formula "16") (term "3") (inst "#v=b_22"))
   (rule "variableDeclarationAssign" (formula "16") (term "3"))
   (rule "variableDeclaration" (formula "16") (term "3") (newnames "b_22"))
   (rule "greater_equal_than_comparison_new" (formula "16") (term "3"))
   (builtin "Update Simplification" (formula "16"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "3,2"))
   (builtin "Update Simplification" (formula "16"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "3,1"))
   (builtin "Update Simplification" (formula "16"))
   (rule "inEqSimp_contradInEq0" (formula "16") (term "0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "16") (term "0,0"))
   (rule "concrete_and_2" (formula "16") (term "0"))
   (rule "ifthenelse_false_for" (formula "16"))
   (rule "compound_assignment_1" (formula "16") (term "4"))
   (rule "ifElseSplit" (formula "16"))
   (branch " if b_22 true"
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " if b_22 false"
      (rule "false_to_not_true" (formula "1") (term "4"))
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "0"))
      (rule "concrete_not_2" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
      (builtin "Update Simplification" (formula "16"))
      (rule "ifElseSplit" (formula "16"))
      (branch " if b_21 true"
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
         (builtin "Update Simplification" (formula "16"))
         (rule "compound_assignment_1" (formula "16") (term "4"))
         (rule "ifElse" (formula "16") (term "4"))
         (builtin "Update Simplification" (formula "16"))
         (rule "boolean_not_equal_2" (formula "16") (term "0"))
         (rule "ifthenelse_false_for" (formula "16"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
         (builtin "Update Simplification" (formula "16"))
         (rule "ifElse" (formula "16") (term "4"))
         (builtin "Update Simplification" (formula "16"))
         (rule "boolean_equal" (formula "16") (term "0"))
         (rule "ifthenelse_true_for" (formula "16"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
         (builtin "Update Simplification" (formula "16"))
         (rule "compound_assignment_1" (formula "16") (term "4"))
         (rule "ifElse" (formula "16") (term "4"))
         (builtin "Update Simplification" (formula "16"))
         (rule "boolean_not_equal_2" (formula "16") (term "0"))
         (rule "ifthenelse_false_for" (formula "16"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
         (builtin "Update Simplification" (formula "16"))
         (rule "ifElseSplit" (formula "16"))
         (branch " if b_17 true"
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "3"))
            (builtin "Update Simplification" (formula "16"))
            (rule "ifElseSplit" (formula "16"))
            (branch " if b true"
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b false"
               (rule "false_to_not_true" (formula "1") (term "4"))
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockReturn" (formula "16") (term "1"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "Update Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "2"))
               (rule "tryEmpty" (formula "16") (term "2"))
               (rule "emptyModality" (formula "16") (term "2"))
               (builtin "Update Simplification" (formula "16"))
               (rule "boolean_not_equal_2" (formula "16") (term "0,0"))
               (rule "eqClose" (formula "16") (term "1"))
               (rule "concrete_not_2" (formula "16") (term "0"))
               (rule "concrete_and_1" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch " if b_17 false"
            (rule "false_to_not_true" (formula "1") (term "4"))
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch " if b_21 false"
         (rule "false_to_not_true" (formula "1") (term "4"))
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_equal" (formula "1") (term "0"))
         (rule "concrete_not_1" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)

}
