\settings {
"#Proof-Settings-Config-File
#Mon Feb 13 12:21:20 CET 2012
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=SIMPLIFY_PROVER
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[Choice]DefaultChoices=throughout-throughout\\:toutOff , transactions-transactions\\:transactionsOff , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff , rtsj-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool , memory-memory\\:off , javacard-javacard\\:jcOff
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_EXPAND
[DecisionProcedure]pd_mode=0
[DecisionProcedure]Exec=Z3\\=z3 -smt -m %f\\:Simplify\\=simplify.exe %f\\:Yices\\=yices -tc -e -smt %f\\:CVC3\\=cvc3 -lang smt +model %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=throughout-throughout\\:toutOn-throughout\\:toutOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , programRules-programRules\\:Java-programRules\\:ODL , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , rtsj-rtsj\\:on-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool-stringRules\\:withoutStringPool , memory-memory\\:off-memory\\:on , javacard-javacard\\:jcOff-javacard\\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[TacletTranslation]maxGeneric=3
"
}

\javaSource "C:\\Users\\dome\\UNI\\WS_11_12\\SEFM\\SEFM_Git\\Lab_2\\MazeLab\\src\\maze";



\programVariables {
java.lang.Throwable exc;
maze.Maze self;
int _direction;
int newCol;
int direction;
int _newRow;
int _newCol;
int newRow;
boolean result;
}

\functions {
jint playerRow_0(maze.Maze);
\nonRigid[LocationNoHeap] jint playerColAtPre_0(maze.Maze);
\nonRigid[LocationNoHeap] jint playerRowAtPre_0(maze.Maze);
jint playerCol_0(maze.Maze);
\nonRigid[LocationNoHeap] maze.Maze selfAtPre_0;
}

\predicates {
\nonRigid[HeapDependent]  anonHeapPred;
\nonRigid[HeapDependent]  anonHeapPred_3;
\nonRigid[HeapDependent]  anonHeapPred_2;
\nonRigid[HeapDependent]  anonHeapPred_1;
\nonRigid[HeapDependent]  anonHeapPred_0;
}

\problem {
     inReachableState
   & (  \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->   m_0.playerRow@(maze.Maze) >= (jint)(0)
              & (     m_0.playerRow@(maze.Maze)
                   <  m_0.maze@(maze.Maze).length
                 & (     m_0.playerCol@(maze.Maze)
                      >= (jint)(0)
                    & (     m_0.playerCol@(maze.Maze)
                         <  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)].length
                       & !  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)][m_0.playerCol@(maze.Maze)]
                          = maze.Maze.WALL))))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint row; 
                (     row >= (jint)(0)
                    &    row
                      <  m_0.maze@(maze.Maze).length
                    & inInt(row)
                 -> \forall jint col; 
                      (     col >= (jint)(0)
                          &    col
                            <  m_0.maze@(maze.Maze)[row].length
                          & inInt(col)
                       ->      m_0.maze@(maze.Maze)[row][col]
                            >= maze.Maze.FREE
                          &    m_0.maze@(maze.Maze)[row][col]
                            <= maze.Maze.EXIT)))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (     (jint)(0) <= i
                    & i <  m_0.maze@(maze.Maze).length
                    & inInt(i)
                 -> !m_0.maze@(maze.Maze)[i] = null))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> !m_0.maze@(maze.Maze) = null))
   & (  direction <  (jint)(0)
      | direction >  (jint)(3)
      | direction >= maze.Maze.MOVE_UP
      & (  direction <= maze.Maze.MOVE_RIGHT
         & !  self.isPossible@(maze.Maze)((jint)(javaAddInt(self.playerRow@(maze.Maze),
                                                            (jint)(\if (  direction
                                                                        = maze.Maze.MOVE_UP)
                                                                       \then ((jint)-((jint)(1)))
                                                                       \else ((jint)(\if (  direction
                                                                                          = maze.Maze.MOVE_DOWN)
                                                                                         \then ((jint)(1))
                                                                                         \else ((jint)(0))))))),
                                          (jint)(javaAddInt(self.playerCol@(maze.Maze),
                                                            (jint)(\if (  direction
                                                                        = maze.Maze.MOVE_LEFT)
                                                                       \then ((jint)-((jint)(1)))
                                                                       \else ((jint)(\if (  direction
                                                                                          = maze.Maze.MOVE_RIGHT)
                                                                                         \then ((jint)(1))
                                                                                         \else ((jint)(0))))))))
            = TRUE)
      | direction >= maze.Maze.MOVE_UP
      & (  direction <= maze.Maze.MOVE_RIGHT
         &   self.isPossible@(maze.Maze)((jint)(javaAddInt(self.playerRow@(maze.Maze),
                                                           (jint)(\if (  direction
                                                                       = maze.Maze.MOVE_UP)
                                                                      \then ((jint)-((jint)(1)))
                                                                      \else ((jint)(\if (  direction
                                                                                         = maze.Maze.MOVE_DOWN)
                                                                                        \then ((jint)(1))
                                                                                        \else ((jint)(0))))))),
                                         (jint)(javaAddInt(self.playerCol@(maze.Maze),
                                                           (jint)(\if (  direction
                                                                       = maze.Maze.MOVE_LEFT)
                                                                      \then ((jint)-((jint)(1)))
                                                                      \else ((jint)(\if (  direction
                                                                                         = maze.Maze.MOVE_RIGHT)
                                                                                        \then ((jint)(1))
                                                                                        \else ((jint)(0))))))))
           = TRUE))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & inInt(direction)
-> {_direction:=direction}
     \[{
         exc=null;try {
           result=self.move(_direction)@maze.Maze;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\] \forall maze.Maze m_0; 
             (       m_0.<created>@(java.lang.Object)
                   = TRUE
                 & !m_0 = null
              ->      m_0.playerRow@(maze.Maze)
                   >= (jint)(0)
                 & (     m_0.playerRow@(maze.Maze)
                      <  m_0.maze@(maze.Maze).length
                    & (     m_0.playerCol@(maze.Maze)
                         >= (jint)(0)
                       & (     m_0.playerCol@(maze.Maze)
                            <  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)].length
                          & !  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)][m_0.playerCol@(maze.Maze)]
                             = maze.Maze.WALL))))

}

\proof {
(keyLog "0" (keyUser "dome" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "20337")

(branch "dummy ID"
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,0,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,1,0,2,0,0,1,1,1,0,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,1,0,2,0,1,1,1,1,0,0,0"))
(rule "inInt" (formula "1") (term "1,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,1,1,1,0,0,1,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,2,0,1,0,2,0,0,1,1,1,0,1,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,2,0,1,0,1,0,1,1,1,1,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,2,0,1,0,2,0,1,1,1,1,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,2,0,1,0,1,0,0,1,1,1,0,1,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "assignment_instance_field_of_this" (formula "9") (term "1"))
(builtin "Update Simplification" (formula "9"))
(rule "castDelInt" (formula "6") (term "1,0,2,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,1,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "1,1,0,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0"))
(rule "castDelInt" (formula "6") (term "1,0,2,0,1,1,1"))
(rule "castDelInt" (formula "6") (term "1,0,1,0,1,1,1"))
(rule "castDelInt" (formula "4") (term "0,0,0,0,1,0"))
(rule "castDelInt" (formula "2") (term "1,0,1,1,1,0"))
(rule "castDelInt" (formula "2") (term "1,0,1,0"))
(rule "castDelInt" (formula "3") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "3") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "9") (term "1,0,1,0,0,2"))
(rule "castDelInt" (formula "9") (term "1,0,1,1,1,0,0,2"))
(rule "translateJavaAddInt" (formula "6") (term "0,2,0,0,1,1,1,0"))
(rule "translateJavaAddInt" (formula "6") (term "0,1,0,0,1,1,1,0"))
(rule "translateJavaAddInt" (formula "6") (term "0,2,0,1,1,1"))
(rule "translateJavaAddInt" (formula "6") (term "0,1,0,1,1,1"))
(rule "castDelInt" (formula "6") (term "2,1,0,2,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "0,0,1,1,0,2,0,0,1,1,1,0"))
(rule "neg_literal" (formula "6") (term "0,1,1,0,2,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "2,1,0,1,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "0,0,1,1,0,1,0,0,1,1,1,0"))
(rule "neg_literal" (formula "6") (term "0,1,1,0,1,0,0,1,1,1,0"))
(rule "castDelInt" (formula "6") (term "0,0,1,1,0,2,0,1,1,1"))
(rule "neg_literal" (formula "6") (term "0,1,1,0,2,0,1,1,1"))
(rule "castDelInt" (formula "6") (term "2,1,0,2,0,1,1,1"))
(rule "castDelInt" (formula "6") (term "0,0,1,1,0,1,0,1,1,1"))
(rule "neg_literal" (formula "6") (term "0,1,1,0,1,0,1,1,1"))
(rule "castDelInt" (formula "6") (term "2,1,0,1,0,1,1,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,1,1,0,0,2"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0,2"))
(rule "inEqSimp_gtToGeq" (formula "6") (term "1,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1,0,0,2"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,0,0,2"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,1,1,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,1,0"))
(rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "9") (term "0,0,1,1,1,1,0,0,2"))
(rule "polySimp_addComm1" (formula "9") (term "0,0,1,1,0,0,2"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "mul_literals" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1,1,0,0,2"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,1,0,0,2"))
(rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,1,0,0,2"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,0,0,2"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,0,0,2"))
(rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,0,0,2"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "double_not" (formula "5") (term "1,0,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "double_not" (formula "4") (term "1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0,0,2"))
(rule "nnf_imp2or" (formula "4") (term "0,1,0"))
(rule "nnf_imp2or" (formula "3") (term "0,1,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,2"))
(rule "double_not" (formula "9") (term "1,0,0,0,2"))
(rule "nnf_notAnd" (formula "4") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "3") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,1,0"))
(rule "nnf_imp2or" (formula "3") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "3") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,1,0,1,0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "shift_paren_and" (formula "2") (term "1,1,1,0"))
(rule "cnf_rightDist" (formula "3") (term "0,1,0,1,0"))
(rule "commute_or" (formula "3") (term "1,0,1,0,1,0"))
(rule "shift_paren_and" (formula "2") (term "1,1,0"))
(rule "shift_paren_and" (formula "2") (term "0,1,1,0"))
(rule "commute_and" (formula "2") (term "0,0,1,1,0"))
(rule "cnf_rightDist" (formula "2") (term "0"))
(rule "distr_forallAnd" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "commute_or" (formula "3") (term "0"))
(rule "cnf_rightDist" (formula "3") (term "0"))
(rule "distr_forallAnd" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "commute_or" (formula "4") (term "0"))
(rule "cnf_rightDist" (formula "3") (term "0"))
(rule "distr_forallAnd" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "commute_or" (formula "4") (term "0"))
(rule "cnf_rightDist" (formula "3") (term "0"))
(rule "distr_forallAnd" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "commute_or" (formula "4") (term "0"))
(rule "ifthenelse_split" (formula "10") (term "1,0,2,0,0,1,1,1,0"))
(branch " direction = 2 TRUE"
   (rule "castDelInt" (formula "11") (term "1,0,2,0,0,1,1,1,0"))
   (rule "replace_known_left" (formula "11") (term "0,1,0,2,0,1,1,1") (ifseqformula "10"))
   (rule "ifthenelse_true" (formula "11") (term "1,0,2,0,1,1,1"))
   (rule "castDelInt" (formula "11") (term "1,0,2,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0,1,1,1"))
   (rule "applyEq" (formula "11") (term "0,0,1,1,0") (ifseqformula "10"))
   (rule "leq_literals" (formula "11") (term "0,1,1,0"))
   (rule "concrete_and_1" (formula "11") (term "1,1,0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,1,0,1,1,1") (ifseqformula "10"))
   (rule "equal_literals" (formula "11") (term "0,1,0,1,0,1,1,1"))
   (rule "ifthenelse_false" (formula "11") (term "1,0,1,0,1,1,1"))
   (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "10"))
   (rule "leq_literals" (formula "11") (term "0,0,0"))
   (rule "concrete_or_2" (formula "11") (term "0,0"))
   (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "10"))
   (rule "qeq_literals" (formula "11") (term "0,1"))
   (rule "concrete_and_1" (formula "11") (term "1"))
   (rule "applyEq" (formula "14") (term "0") (ifseqformula "10"))
   (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
   (rule "qeq_literals" (formula "11") (term "0,1,0"))
   (rule "concrete_and_1" (formula "11") (term "1,0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,1,0,1,1") (ifseqformula "10"))
   (rule "equal_literals" (formula "11") (term "0,1,0,1,0,1,1"))
   (rule "ifthenelse_false" (formula "11") (term "1,0,1,0,1,1"))
   (rule "castDelInt" (formula "11") (term "1,0,1,0,1,1"))
   (rule "add_zero_right" (formula "11") (term "0,1,0,1,1"))
   (rule "castDelInt" (formula "11") (term "1,0,1,1"))
   (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "10"))
   (rule "leq_literals" (formula "11") (term "0,1"))
   (rule "concrete_and_1" (formula "11") (term "1"))
   (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
   (rule "qeq_literals" (formula "11") (term "0,0"))
   (rule "concrete_or_2" (formula "11") (term "0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,1,0,0,0") (ifseqformula "10"))
   (rule "equal_literals" (formula "11") (term "0,1,0,1,0,0,0"))
   (rule "ifthenelse_false" (formula "11") (term "1,0,1,0,0,0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,1,0,0,0") (ifseqformula "10"))
   (rule "equal_literals" (formula "11") (term "0,1,0,1,0,0,0"))
   (rule "ifthenelse_false" (formula "11") (term "1,0,1,0,0,0"))
   (rule "castDelInt" (formula "11") (term "1,0,1,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,1,0,0,0"))
   (rule "castDelInt" (formula "11") (term "1,0,0,0"))
   (rule "neq_or_2" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "all_pull_out3" (formula "8") (term "0"))
   (rule "shift_paren_or" (formula "8") (term "0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
   (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
   (rule "all_pull_out3" (formula "7") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,1,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,1,0"))
   (rule "methodBodyExpand" (formula "13") (term "2"))
   (rule "variableDeclarationAssign" (formula "13") (term "2"))
   (rule "variableDeclaration" (formula "13") (term "2") (newnames "newRow_1"))
   (rule "assignment_instance_field_of_this" (formula "13") (term "2"))
   (builtin "Update Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "3"))
   (rule "variableDeclaration" (formula "13") (term "3") (newnames "newCol_1"))
   (rule "assignment_instance_field_of_this" (formula "13") (term "3"))
   (builtin "Update Simplification" (formula "13"))
   (rule "switch" (formula "13") (term "4"))
   (rule "variableDeclaration" (formula "13") (term "4") (newnames "_var"))
   (rule "assignment_instance_field_of_this" (formula "13") (term "4"))
   (builtin "Update Simplification" (formula "13"))
   (rule "castDelInt" (formula "13") (term "0"))
   (rule "all_pull_out3" (formula "7") (term "0"))
   (rule "all_pull_out3" (formula "7") (term "0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "7") (term "0,0"))
   (rule "distr_forallAnd" (formula "7") (term "0"))
   (rule "distr_forallAnd" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "commute_or_2" (formula "8") (term "0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "14") (term "4") (newnames "b"))
   (rule "equality_comparison_new" (formula "14") (term "4"))
   (builtin "Update Simplification" (formula "14"))
   (rule "insert_constant_value" (formula "14") (term "1,0,0"))
   (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
   (builtin "Update Simplification" (formula "14"))
   (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
   (builtin "Update Simplification" (formula "14"))
   (rule "castDelInt" (formula "14") (term "0,0,0"))
   (rule "equal_literals" (formula "14") (term "0,0"))
   (rule "concrete_not_2" (formula "14") (term "0"))
   (rule "ifthenelse_true_for" (formula "14"))
   (rule "ifSplit" (formula "14"))
   (branch " if b true"
      (builtin "Update Simplification" (formula "15"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " if b false"
      (rule "false_to_not_true" (formula "1") (term "5"))
      (builtin "Update Simplification" (formula "15"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "0"))
      (rule "concrete_not_2" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_10"))
      (rule "equality_comparison_new" (formula "14") (term "4"))
      (builtin "Update Simplification" (formula "14"))
      (rule "insert_constant_value" (formula "14") (term "1,0,0"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
      (builtin "Update Simplification" (formula "14"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
      (builtin "Update Simplification" (formula "14"))
      (rule "castDelInt" (formula "14") (term "0,0,0"))
      (rule "equal_literals" (formula "14") (term "0,0"))
      (rule "concrete_not_2" (formula "14") (term "0"))
      (rule "ifthenelse_true_for" (formula "14"))
      (rule "ifSplit" (formula "14"))
      (branch " if b_10 true"
         (builtin "Update Simplification" (formula "15"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch " if b_10 false"
         (rule "false_to_not_true" (formula "1") (term "5"))
         (builtin "Update Simplification" (formula "15"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "0"))
         (rule "concrete_not_2" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_11"))
         (rule "equality_comparison_new" (formula "14") (term "4"))
         (builtin "Update Simplification" (formula "14"))
         (rule "insert_constant_value" (formula "14") (term "1,0,0"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
         (builtin "Update Simplification" (formula "14"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
         (builtin "Update Simplification" (formula "14"))
         (rule "castDelInt" (formula "14") (term "0,0,0"))
         (rule "eqClose" (formula "14") (term "0,0"))
         (rule "concrete_not_1" (formula "14") (term "0"))
         (rule "ifthenelse_false_for" (formula "14"))
         (rule "ifSplit" (formula "14"))
         (branch " if b_11 true"
            (builtin "Update Simplification" (formula "15"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignmentSubtractionInt" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "blockBreakNoLabel" (formula "14") (term "4"))
            (rule "translateJavaSubInt" (formula "14") (term "2"))
            (rule "polySimp_elimSub" (formula "14") (term "2"))
            (rule "mul_literals" (formula "14") (term "1,2"))
            (rule "polySimp_addComm0" (formula "14") (term "2"))
            (rule "blockBreakLabel" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "blockEmpty" (formula "14") (term "3"))
            (rule "ifElseUnfold" (formula "14") (term "3") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_12"))
            (rule "methodCallWithAssignmentWithinClass" (formula "14") (term "3") (inst "#v0=b_13"))
            (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_13"))
            (rule "variableDeclarationAssign" (formula "14") (term "3"))
            (rule "variableDeclaration" (formula "14") (term "3") (newnames "newRow_7"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "4"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "newCol_7"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "castDelInt" (formula "14") (term "2"))
            (rule "methodBodyExpand" (formula "14") (term "5"))
            (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_14"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_14"))
            (rule "evaluate_lazy_and" (formula "14") (term "5"))
            (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_15"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_15"))
            (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_16"))
            (rule "variableDeclarationAssign" (formula "14") (term "5"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_16"))
            (rule "remove_parentheses_right" (formula "14") (term "5"))
            (rule "evaluate_lazy_and" (formula "14") (term "5"))
            (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_17"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_17"))
            (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_18"))
            (rule "variableDeclarationAssign" (formula "14") (term "5"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_65"))
            (rule "remove_parentheses_right" (formula "14") (term "5"))
            (rule "evaluate_lazy_and" (formula "14") (term "5"))
            (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_66"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_66"))
            (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_67"))
            (rule "variableDeclarationAssign" (formula "14") (term "5"))
            (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_67"))
            (rule "remove_parentheses_right" (formula "14") (term "5"))
            (rule "greater_equal_than_comparison_new" (formula "14") (term "5"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "5,1"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "5,2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "ifthenelse_split_for" (formula "14"))
            (branch " self.playerRow >= 0 TRUE"
               (rule "compound_assignment_1" (formula "15") (term "6"))
               (rule "allLeft" (formula "6") (inst "t=self"))
               (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "15"))
               (rule "concrete_or_2" (formula "6") (term "0"))
               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "14"))
               (rule "concrete_not_1" (formula "6") (term "0"))
               (rule "concrete_or_2" (formula "6"))
               (rule "allLeft" (formula "8") (inst "t=self"))
               (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "15"))
               (rule "concrete_not_1" (formula "8") (term "1,0"))
               (rule "concrete_or_4" (formula "8") (term "0"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "16"))
               (rule "concrete_or_2" (formula "8"))
               (rule "notLeft" (formula "8"))
               (rule "allLeft" (formula "4") (inst "t=self"))
               (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "15"))
               (rule "concrete_not_1" (formula "4") (term "1,0"))
               (rule "concrete_or_4" (formula "4") (term "0"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "17"))
               (rule "concrete_or_2" (formula "4"))
               (rule "allLeft" (formula "6") (inst "t=self"))
               (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "18"))
               (rule "concrete_or_2" (formula "6") (term "0"))
               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "16"))
               (rule "concrete_not_1" (formula "6") (term "0"))
               (rule "concrete_or_2" (formula "6"))
               (rule "ifElse" (formula "19") (term "6"))
               (builtin "Update Simplification" (formula "19"))
               (rule "boolean_equal" (formula "19") (term "0"))
               (rule "ifthenelse_true_for" (formula "19"))
               (rule "assignment_instance_field_of_this" (formula "19") (term "5"))
               (builtin "Update Simplification" (formula "19"))
               (rule "allLeft" (formula "13") (inst "t=self"))
               (rule "replace_known_right" (formula "13") (term "1,0,0,0,0") (ifseqformula "19"))
               (rule "concrete_or_4" (formula "13") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "13") (term "0,1,0,0,0") (ifseqformula "17"))
               (rule "concrete_not_1" (formula "13") (term "1,0,0,0"))
               (rule "concrete_or_4" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
               (rule "allLeft" (formula "15") (inst "t=self"))
               (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "18"))
               (rule "concrete_not_1" (formula "15") (term "1,0"))
               (rule "concrete_or_4" (formula "15") (term "0"))
               (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "20"))
               (rule "concrete_or_2" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "allLeft" (formula "11") (inst "t=self"))
               (rule "replace_known_right" (formula "11") (term "1,0,0,0,0,0,0") (ifseqformula "21"))
               (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
               (rule "concrete_not_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
               (rule "allLeft" (formula "13") (inst "t=self"))
               (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
               (rule "concrete_not_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
               (rule "replace_known_right" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "22"))
               (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
               (rule "ifElseSplit" (formula "23"))
               (branch " if b_66 true"
                  (builtin "Update Simplification" (formula "24"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_66 false"
                  (rule "false_to_not_true" (formula "1") (term "6"))
                  (builtin "Update Simplification" (formula "24"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "elim_double_block_2" (formula "23") (term "5"))
                  (rule "greater_equal_than_comparison_new" (formula "23") (term "5"))
                  (builtin "Update Simplification" (formula "23"))
                  (rule "assignment_instance_field_of_this" (formula "23") (term "5,2"))
                  (builtin "Update Simplification" (formula "23"))
                  (rule "assignment_instance_field_of_this" (formula "23") (term "5,1"))
                  (builtin "Update Simplification" (formula "23"))
                  (rule "blockEmpty" (formula "23") (term "6,1"))
                  (rule "blockEmpty" (formula "23") (term "6,2"))
                  (rule "castDelInt" (formula "23") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                  (rule "mul_literals" (formula "23") (term "1,0"))
                  (rule "ifthenelse_split_for" (formula "23"))
                  (branch " self.playerCol >= 1 TRUE"
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                     (rule "leq_literals" (formula "5") (term "0"))
                     (rule "concrete_or_1" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "compound_assignment_1" (formula "23") (term "6"))
                     (rule "allLeft" (formula "15") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "15") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "15") (term "0,0"))
                     (rule "concrete_or_2" (formula "15") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (rule "concrete_and_2" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0,0,0,0"))
                     (rule "concrete_and_2" (formula "11") (term "1,0,0,0,0"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                     (rule "allLeft" (formula "14") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "14") (term "0,1,0,0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "1,0,0,0,0"))
                     (rule "concrete_or_4" (formula "14") (term "0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "14") (term "0,0,0"))
                     (rule "ifElse" (formula "26") (term "6"))
                     (builtin "Update Simplification" (formula "26"))
                     (rule "boolean_equal" (formula "26") (term "0"))
                     (rule "ifthenelse_true_for" (formula "26"))
                     (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
                     (builtin "Update Simplification" (formula "26"))
                     (rule "allLeft" (formula "11") (inst "t=self.playerCol@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "11") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "11") (term "0,0"))
                     (rule "concrete_or_2" (formula "11") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,0"))
                     (rule "concrete_and_2" (formula "11") (term "0"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "allLeft" (formula "15") (inst "t=self.playerCol@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "15") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "15") (term "1,0"))
                     (rule "concrete_or_4" (formula "15") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "15") (term "0,0"))
                     (rule "concrete_and_2" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "ifElse" (formula "28") (term "6"))
                     (builtin "Update Simplification" (formula "28"))
                     (rule "boolean_not_equal_2" (formula "28") (term "0"))
                     (rule "ifthenelse_false_for" (formula "28"))
                     (rule "elim_double_block_2" (formula "28") (term "5"))
                     (rule "compound_less_than_comparison_2" (formula "28") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                     (rule "variableDeclarationAssign" (formula "28") (term "5"))
                     (rule "variableDeclaration" (formula "28") (term "5") (newnames "j_6"))
                     (rule "assignment_instance_field_of_this" (formula "28") (term "5"))
                     (builtin "Update Simplification" (formula "28"))
                     (rule "variableDeclarationAssign" (formula "28") (term "6"))
                     (rule "variableDeclaration" (formula "28") (term "6") (newnames "j_7"))
                     (rule "assignment_read_attribute" (formula "28") (term "6"))
                     (branch " Normal Execution (maze != null)"
                        (builtin "Update Simplification" (formula "29"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "less_than_comparison_new" (formula "28") (term "7"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "assignment_instance_field_of_this" (formula "28") (term "5,1"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "blockEmpty" (formula "28") (term "6,1"))
                        (rule "assignment_instance_field_of_this" (formula "28") (term "5,2"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "blockEmpty" (formula "28") (term "6,2"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,0"))
                        (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "6"))
                        (rule "ifthenelse_true_for" (formula "28"))
                        (rule "compound_assignment_1" (formula "28") (term "6"))
                        (rule "only_created_object_are_referenced_non_null" (formula "8") (term "0,0,0") (ifseqformula "23") (ifseqformula "3") (ifseqformula "25"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_equal" (formula "29") (term "0"))
                        (rule "ifthenelse_true_for" (formula "29"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_not_equal_2" (formula "29") (term "0"))
                        (rule "ifthenelse_false_for" (formula "29"))
                        (rule "elim_double_block_2" (formula "29") (term "5"))
                        (rule "compound_less_than_comparison_2" (formula "29") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                        (rule "variableDeclarationAssign" (formula "29") (term "5"))
                        (rule "variableDeclaration" (formula "29") (term "5") (newnames "j_8"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "variableDeclarationAssign" (formula "29") (term "6"))
                        (rule "variableDeclaration" (formula "29") (term "6") (newnames "j_9"))
                        (rule "castDelInt" (formula "29") (term "1"))
                        (rule "eval_order_access2" (formula "29") (term "6") (inst "#v0=var"))
                        (rule "variableDeclarationAssign" (formula "29") (term "6"))
                        (rule "variableDeclaration" (formula "29") (term "6") (newnames "var"))
                        (rule "assignment_array2" (formula "29") (term "6"))
                        (branch " Normal Execution (maze != null)"
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "inEqSimp_ltRight" (formula "30"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "assignment_read_attribute" (formula "29") (term "7"))
                           (branch " Normal Execution (var != null)"
                              (builtin "Update Simplification" (formula "30"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "less_than_comparison_new" (formula "29") (term "7"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,1"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,2"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "blockEmpty" (formula "29") (term "6,1"))
                              (rule "blockEmpty" (formula "29") (term "6,2"))
                              (rule "castDelInt" (formula "29") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "29") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0"))
                              (rule "qeq_literals" (formula "29") (term "0,0"))
                              (rule "concrete_or_1" (formula "29") (term "0"))
                              (rule "ifthenelse_true_for" (formula "29"))
                              (rule "array_length_non_negative_3" (formula "20") (term "1,1,0,0") (ifseqformula "3") (ifseqformula "8") (ifseqformula "26"))
                              (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "17") (term "0,1,1,0,0") (ifseqformula "8") (ifseqformula "3") (ifseqformula "26"))
                              (rule "ifElseSplit" (formula "31"))
                              (branch " if b_14 true"
                                 (builtin "Update Simplification" (formula "32"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "returnUnfold" (formula "31") (term "5") (inst "#v0=b_14"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "b_73"))
                                 (rule "compound_inequality_comparison_1" (formula "31") (term "5") (inst "#v0=j"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "j_19"))
                                 (rule "eval_order_array_access4" (formula "31") (term "5") (inst "#v0=var"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "var_7"))
                                 (rule "assignment_array2" (formula "31") (term "5"))
                                 (branch " Normal Execution (maze != null)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "inEqSimp_ltRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "assignment_array2" (formula "31") (term "5"))
                                    (branch " Normal Execution (var_7 != null)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "castDelInt" (formula "33") (term "1,1"))
                                       (rule "castDelInt" (formula "32") (term "0"))
                                       (rule "castDelInt" (formula "31") (term "1"))
                                       (rule "inEqSimp_ltRight" (formula "32"))
                                       (rule "times_zero_1" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "32"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_or_1" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inequality_comparison_new" (formula "31") (term "4"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "insert_constant_value" (formula "31") (term "1,0,0"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "3,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallReturn" (formula "31") (term "4,2"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "3,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallReturn" (formula "31") (term "4,1"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallEmpty" (formula "31") (term "4,1"))
                                       (rule "methodCallEmpty" (formula "31") (term "4,2"))
                                       (rule "blockEmpty" (formula "31") (term "4,1"))
                                       (rule "blockEmpty" (formula "31") (term "4,2"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "ifthenelse_negated_for" (formula "31"))
                                       (rule "allLeft" (formula "13") (inst "t=(jint)(-1 + self.playerCol@(maze.Maze))"))
                                       (rule "castDelInt" (formula "13") (term "0,1,0"))
                                       (rule "castDelInt" (formula "13") (term "1,0,1"))
                                       (rule "castDelInt" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "13") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "13") (term "0,0"))
                                       (rule "concrete_or_2" (formula "13") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                       (rule "leq_literals" (formula "13") (term "0,0"))
                                       (rule "concrete_and_2" (formula "13") (term "0"))
                                       (rule "concrete_or_2" (formula "13"))
                                       (rule "allLeft" (formula "19") (inst "t=(jint)(-1 + self.playerCol@(maze.Maze))"))
                                       (rule "castDelInt" (formula "19") (term "0,1,0"))
                                       (rule "castDelInt" (formula "19") (term "1,0,1"))
                                       (rule "castDelInt" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "19") (term "0,0"))
                                       (rule "times_zero_2" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "19") (term "0,0"))
                                       (rule "concrete_or_2" (formula "19") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                       (rule "leq_literals" (formula "19") (term "0,0"))
                                       (rule "concrete_and_2" (formula "19") (term "0"))
                                       (rule "concrete_or_2" (formula "19"))
                                       (rule "ifthenelse_split_for" (formula "33"))
                                       (branch " self.maze[self.playerRow][-1 + self.playerCol] = 1 TRUE"
                                          (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "ifElse" (formula "32") (term "4"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "boolean_not_equal_2" (formula "32") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "32"))
                                          (rule "blockReturn" (formula "32") (term "1"))
                                          (rule "methodCallReturn" (formula "32") (term "1"))
                                          (rule "assignment_instance_field_of_this" (formula "32") (term "1"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "methodCallEmpty" (formula "32") (term "1"))
                                          (rule "tryEmpty" (formula "32") (term "1"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "emptyModality" (formula "32"))
                                          (rule "allRight" (formula "32") (inst "sk=m_0_15"))
                                          (rule "orRight" (formula "32"))
                                          (rule "orRight" (formula "32"))
                                          (rule "notRight" (formula "32"))
                                          (rule "cut_direct" (formula "34") (term "0,1,1"))
                                          (branch " CUT: m_0_15.playerCol >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "35") (term "1,1"))
                                             (rule "cut_direct" (formula "35") (term "0"))
                                             (branch " CUT: m_0_15.playerRow >= 0 TRUE"
                                                (rule "concrete_and_1" (formula "36"))
                                                (rule "cut_direct" (formula "36") (term "0"))
                                                (branch " CUT: m_0_15.maze.length >= 1 + m_0_15.playerRow TRUE"
                                                   (rule "concrete_and_1" (formula "37"))
                                                   (rule "cut_direct" (formula "37") (term "0"))
                                                   (branch " CUT:    m_0_15.maze[m_0_15.playerRow].length
>= 1
 + m_0_15.playerCol TRUE"
                                                      (rule "concrete_and_1" (formula "38"))
                                                      (rule "notRight" (formula "38"))
                                                      (rule "allLeft" (formula "22") (inst "t=m_0_15"))
                                                      (rule "replace_known_right" (formula "22") (term "1,0,0,0,0,0,0") (ifseqformula "39"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0,0,0,0"))
                                                      (rule "replace_known_left" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "22") (term "1,0,0,0,0,0"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0,0,0"))
                                                      (rule "allLeft" (formula "22") (inst "t=m_0_15.playerRow@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,1,0,0,0"))
                                                      (rule "leq_literals" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "concrete_and_2" (formula "22") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "concrete_and_2" (formula "22") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0"))
                                                      (rule "allLeft" (formula "22") (inst "t=m_0_15.playerCol@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                                      (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "22") (term "1"))
                                                      (rule "concrete_or_3" (formula "22"))
                                                      (rule "true_left" (formula "22"))
                                                      (rule "allLeft" (formula "18") (inst "t=m_0_15"))
                                                      (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "18") (term "1"))
                                                      (rule "concrete_or_4" (formula "18"))
                                                      (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "18") (term "1"))
                                                      (rule "concrete_or_4" (formula "18"))
                                                      (rule "close" (formula "41") (ifseqformula "18"))
                                                   )
                                                   (branch " CUT:    m_0_15.maze[m_0_15.playerRow].length
>= 1
 + m_0_15.playerCol FALSE"
                                                      (rule "concrete_and_2" (formula "38"))
                                                      (rule "false_right" (formula "38"))
                                                      (rule "inEqSimp_geqRight" (formula "37"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "17") (inst "t=m_0_15"))
                                                      (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "17") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "17") (term "0"))
                                                      (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "38"))
                                                      (rule "concrete_or_2" (formula "17"))
                                                      (rule "notLeft" (formula "17"))
                                                      (rule "allLeft" (formula "29") (inst "t=m_0_15"))
                                                      (rule "replace_known_left" (formula "29") (term "0,1,0,0,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "29") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                                      (rule "replace_known_right" (formula "29") (term "1,0,0,0") (ifseqformula "39"))
                                                      (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                                      (rule "allLeft" (formula "29") (inst "t=m_0_15.playerRow@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "29") (term "0,1,0"))
                                                      (rule "concrete_and_2" (formula "29") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "29") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (rule "concrete_and_2" (formula "29") (term "0"))
                                                      (rule "concrete_or_2" (formula "29"))
                                                      (rule "notLeft" (formula "29"))
                                                      (rule "allLeft" (formula "16") (inst "t=m_0_15"))
                                                      (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "16") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "16") (term "0"))
                                                      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "41"))
                                                      (rule "concrete_or_2" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0"))
                                                      (rule "add_literals" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch " CUT: m_0_15.maze.length >= 1 + m_0_15.playerRow FALSE"
                                                   (rule "concrete_and_2" (formula "37"))
                                                   (rule "false_right" (formula "37"))
                                                   (rule "inEqSimp_geqRight" (formula "36"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "16") (inst "t=m_0_15"))
                                                   (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "37"))
                                                   (rule "concrete_or_2" (formula "16") (term "0"))
                                                   (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "16") (term "0"))
                                                   (rule "concrete_or_2" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_15"))
                                                   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "38"))
                                                   (rule "concrete_or_2" (formula "15") (term "0"))
                                                   (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "15") (term "0"))
                                                   (rule "concrete_or_2" (formula "15"))
                                                   (rule "allLeft" (formula "30") (inst "t=m_0_15"))
                                                   (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "30") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "30") (term "0"))
                                                   (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "39"))
                                                   (rule "concrete_or_2" (formula "30"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "allLeft" (formula "12") (inst "t=m_0_15"))
                                                   (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "12") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "12") (term "0"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "40"))
                                                   (rule "concrete_or_2" (formula "12"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch " CUT: m_0_15.playerRow >= 0 FALSE"
                                                (rule "concrete_and_2" (formula "36"))
                                                (rule "false_right" (formula "36"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "11") (inst "t=m_0_15"))
                                                (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "36"))
                                                (rule "concrete_or_2" (formula "11") (term "0"))
                                                (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "11") (term "0"))
                                                (rule "concrete_or_2" (formula "11"))
                                                (rule "allLeft" (formula "8") (inst "t=m_0_15"))
                                                (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "37"))
                                                (rule "concrete_or_2" (formula "8") (term "0"))
                                                (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "8") (term "0"))
                                                (rule "concrete_or_2" (formula "8"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (rule "concrete_and_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch " CUT: m_0_15.playerCol >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "35") (term "1,1"))
                                             (rule "concrete_and_4" (formula "35") (term "1"))
                                             (rule "concrete_and_4" (formula "35"))
                                             (rule "false_right" (formula "35"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "14") (inst "t=m_0_15"))
                                             (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "14") (term "1,0"))
                                             (rule "concrete_or_4" (formula "14") (term "0"))
                                             (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "14"))
                                             (rule "notLeft" (formula "14"))
                                             (rule "allLeft" (formula "10") (inst "t=m_0_15"))
                                             (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "10") (term "1,0"))
                                             (rule "concrete_or_4" (formula "10") (term "0"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "36"))
                                             (rule "concrete_or_2" (formula "10"))
                                             (rule "allLeft" (formula "7") (inst "t=m_0_15"))
                                             (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "37"))
                                             (rule "concrete_or_2" (formula "7") (term "0"))
                                             (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "7") (term "0"))
                                             (rule "concrete_or_2" (formula "7"))
                                             (rule "allLeft" (formula "28") (inst "t=m_0_15"))
                                             (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "28") (term "1,0,0,0"))
                                             (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "28") (term "1,0,0,0") (ifseqformula "38"))
                                             (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                             (rule "allLeft" (formula "9") (inst "t=m_0_15"))
                                             (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "39"))
                                             (rule "concrete_or_2" (formula "9") (term "0"))
                                             (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "9") (term "0"))
                                             (rule "concrete_or_2" (formula "9"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (rule "concrete_and_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch " self.maze[self.playerRow][-1 + self.playerCol] = 1 FALSE"
                                          (rule "ifElse" (formula "34") (term "4"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "boolean_equal" (formula "34") (term "0"))
                                          (rule "ifthenelse_true_for" (formula "34"))
                                          (rule "assignment_instance_field_of_this" (formula "34") (term "3"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "assignment_instance_field_of_this" (formula "34") (term "2"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "methodCallReturn" (formula "34") (term "3"))
                                          (rule "assignment_instance_field_of_this" (formula "34") (term "3"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "methodCallEmpty" (formula "34") (term "3"))
                                          (rule "tryEmpty" (formula "34") (term "3"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "castDelInt" (formula "34") (term "1"))
                                          (rule "emptyModality" (formula "34") (term "2"))
                                          (builtin "Update Simplification" (formula "34"))
                                          (rule "allRight" (formula "34") (inst "sk=m_0_14"))
                                          (rule "orRight" (formula "34"))
                                          (rule "orRight" (formula "34"))
                                          (rule "notRight" (formula "34"))
                                          (rule "eqSymm" (formula "36") (term "0,1,1,0,1,1,1"))
                                          (rule "eqSymm" (formula "36") (term "0,0,0,1,1"))
                                          (rule "eqSymm" (formula "36") (term "0,1,0,0,1,1,1,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "36") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,1,1,1"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1,1,1"))
                                          (rule "ifthenelse_split" (formula "36") (term "0,0,1,1"))
                                          (branch " self = m_0_14 TRUE"
                                             (rule "castDelInt" (formula "37") (term "0,0,1,1"))
                                             (rule "replace_known_left" (formula "37") (term "0,1,0,0,1,1,1,1") (ifseqformula "1"))
                                             (rule "ifthenelse_true" (formula "37") (term "1,0,0,1,1,1,1"))
                                             (rule "castDelInt" (formula "37") (term "1,0,0,1,1,1,1"))
                                             (rule "replace_known_left" (formula "37") (term "0,0,0,1,1,1") (ifseqformula "1"))
                                             (rule "ifthenelse_true" (formula "37") (term "0,0,1,1,1"))
                                             (rule "castDelInt" (formula "37") (term "0,0,1,1,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1,1,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1,1"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,1,1,1"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1,1"))
                                             (rule "polySimp_addComm1" (formula "37") (term "0,0,0,1,1,1"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,0,1,1,1"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,0,1,1,1"))
                                             (rule "applyEq" (formula "37") (term "0,0,1,0,0,1,1,1") (ifseqformula "1"))
                                             (rule "polySimp_addComm0" (formula "37") (term "0,0,1,1,1"))
                                             (rule "applyEq" (formula "22") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "37") (term "0,1,0,0,1,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "37") (term "0,1,1,0,0,1,1,1,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "15") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "16") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "22") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "17") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "26") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "17") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "22") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "23") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "33") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "35") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "21") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "26") (term "0,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "16") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "21") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "8"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "applyEq" (formula "17") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "11"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0"))
                                             (rule "applyEq" (formula "35") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                             (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "4"))
                                             (rule "concrete_and_1" (formula "37"))
                                             (rule "applyEq" (formula "16") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "34") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "36") (term "0,1,1,1") (ifseqformula "34"))
                                             (rule "concrete_not_2" (formula "36") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "36") (term "1,1"))
                                             (rule "applyEq" (formula "22") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "16") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "1"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0"))
                                             (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1"))
                                             (rule "mul_literals" (formula "35") (term "1,0,1"))
                                             (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "3"))
                                             (rule "concrete_and_1" (formula "35") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "8"))
                                             (rule "concrete_and_1" (formula "35"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "inEqSimp_homoInEq1" (formula "12"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                             (rule "add_literals" (formula "12") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0"))
                                             (rule "add_zero_right" (formula "12") (term "0"))
                                             (rule "leq_literals" (formula "12"))
                                             (rule "closeFalse" (formula "12"))
                                          )
                                          (branch " self = m_0_14 FALSE"
                                             (rule "replace_known_right" (formula "37") (term "0,0,0,1,1,1") (ifseqformula "36"))
                                             (rule "ifthenelse_false" (formula "37") (term "0,0,1,1,1"))
                                             (rule "replace_known_right" (formula "37") (term "0,1,0,0,1,1,1,1") (ifseqformula "36"))
                                             (rule "ifthenelse_false" (formula "37") (term "1,0,0,1,1,1,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1,1,1"))
                                             (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,1,1,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,1,1,1"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,1,1,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,0,1,1,1"))
                                             (rule "cut_direct" (formula "37") (term "0"))
                                             (branch " CUT: m_0_14.playerRow >= 0 TRUE"
                                                (rule "concrete_and_1" (formula "38"))
                                                (rule "allLeft" (formula "7") (inst "t=m_0_14"))
                                                (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "37"))
                                                (rule "concrete_or_2" (formula "7") (term "0"))
                                                (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "2"))
                                                (rule "concrete_not_1" (formula "7") (term "0"))
                                                (rule "concrete_or_2" (formula "7"))
                                                (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "7"))
                                                (rule "concrete_and_1" (formula "39") (term "1"))
                                                (rule "allLeft" (formula "10") (inst "t=m_0_14"))
                                                (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "38"))
                                                (rule "concrete_or_2" (formula "10") (term "0"))
                                                (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
                                                (rule "concrete_not_1" (formula "10") (term "0"))
                                                (rule "concrete_or_2" (formula "10"))
                                                (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "10"))
                                                (rule "concrete_and_1" (formula "40"))
                                                (rule "allLeft" (formula "14") (inst "t=m_0_14"))
                                                (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "2"))
                                                (rule "concrete_not_1" (formula "14") (term "1,0"))
                                                (rule "concrete_or_4" (formula "14") (term "0"))
                                                (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "39"))
                                                (rule "concrete_or_2" (formula "14"))
                                                (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "14"))
                                                (rule "concrete_and_1" (formula "41"))
                                                (rule "notRight" (formula "41"))
                                                (rule "allLeft" (formula "17") (inst "t=m_0_14"))
                                                (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "41"))
                                                (rule "concrete_or_2" (formula "17") (term "0"))
                                                (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "17") (term "0"))
                                                (rule "concrete_or_2" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "close" (formula "35") (ifseqformula "1"))
                                             )
                                             (branch " CUT: m_0_14.playerRow >= 0 FALSE"
                                                (rule "concrete_and_2" (formula "38"))
                                                (rule "false_right" (formula "38"))
                                                (rule "inEqSimp_geqRight" (formula "37"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "6") (inst "t=m_0_14"))
                                                (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                                (rule "concrete_not_1" (formula "6") (term "1,0"))
                                                (rule "concrete_or_4" (formula "6") (term "0"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "37"))
                                                (rule "concrete_or_2" (formula "6"))
                                                (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                (rule "concrete_and_2" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                          )
                                       )
                                    )
                                    (branch " Null Reference (var_7 = null)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "close" (formula "28") (ifseqformula "1"))
                                    )
                                    (branch " Index Out of Bounds (var_7 != null, but newCol_7 Out of Bounds!)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "castDelInt" (formula "1") (term "0,1"))
                                       (rule "castDelInt" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0"))
                                       (rule "concrete_or_2" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " Null Reference (maze = null)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "close" (formula "29") (ifseqformula "1"))
                                 )
                                 (branch " Index Out of Bounds (maze != null, but newRow_7 Out of Bounds!)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch " if b_14 false"
                                 (rule "false_to_not_true" (formula "1") (term "6"))
                                 (builtin "Update Simplification" (formula "32"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_equal" (formula "1") (term "0"))
                                 (rule "concrete_not_1" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch " Null Reference (var = null)"
                              (builtin "Update Simplification" (formula "30"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "close" (formula "26") (ifseqformula "1"))
                           )
                        )
                        (branch " Null Reference (maze = null)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "close" (formula "27") (ifseqformula "1"))
                        )
                        (branch " Index Out of Bounds (maze != null, but newRow_7 Out of Bounds!)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "blockThrow" (formula "30") (term "6"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                           (rule "concrete_and_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch " Null Reference (maze = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "close" (formula "26") (ifseqformula "1"))
                     )
                  )
                  (branch " self.playerCol >= 1 FALSE"
                     (rule "inEqSimp_geqRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "5"))
                     (rule "add_zero_right" (formula "10") (term "1"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "24") (term "1,3") (ifseqformula "5"))
                     (rule "add_zero_right" (formula "24") (term "3"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "23") (term "1,2") (ifseqformula "4"))
                     (rule "add_zero_right" (formula "23") (term "2"))
                     (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "4"))
                     (rule "compound_assignment_1" (formula "23") (term "6"))
                     (rule "allLeft" (formula "15") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "15") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "15") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "15") (term "1,0"))
                     (rule "concrete_or_4" (formula "15") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "15") (term "0,0"))
                     (rule "concrete_and_2" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "allLeft" (formula "13") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "13") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "13") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "13") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "13") (term "0,0,0"))
                     (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0,0,0,0"))
                     (rule "concrete_and_2" (formula "11") (term "1,0,0,0,0"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                     (rule "ifElse" (formula "26") (term "6"))
                     (builtin "Update Simplification" (formula "26"))
                     (rule "boolean_not_equal_2" (formula "26") (term "0"))
                     (rule "ifthenelse_false_for" (formula "26"))
                     (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
                     (builtin "Update Simplification" (formula "26"))
                     (rule "allLeft" (formula "14") (inst "t=(jint)(0)"))
                     (rule "castDelInt" (formula "14") (term "0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                     (rule "concrete_or_2" (formula "14") (term "0"))
                     (rule "castDelInt" (formula "14") (term "1,0,1"))
                     (rule "castDelInt" (formula "14") (term "0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "14") (term "0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0"))
                     (rule "concrete_or_2" (formula "14"))
                     (rule "allLeft" (formula "11") (inst "t=(jint)(0)"))
                     (rule "castDelInt" (formula "11") (term "0,1,0"))
                     (rule "castDelInt" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,0"))
                     (rule "concrete_or_2" (formula "11") (term "0"))
                     (rule "castDelInt" (formula "11") (term "1,0,1"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                     (rule "concrete_and_2" (formula "11") (term "0"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "ifElse" (formula "28") (term "6"))
                     (builtin "Update Simplification" (formula "28"))
                     (rule "boolean_equal" (formula "28") (term "0"))
                     (rule "ifthenelse_true_for" (formula "28"))
                     (rule "assignment_instance_field_of_this" (formula "28") (term "5"))
                     (builtin "Update Simplification" (formula "28"))
                     (rule "blockEmpty" (formula "28") (term "6"))
                     (rule "compound_assignment_1" (formula "28") (term "6"))
                     (rule "only_created_object_are_referenced_non_null" (formula "26") (term "0,0,0") (ifseqformula "23") (ifseqformula "2") (ifseqformula "25"))
                     (rule "ifElseSplit" (formula "29"))
                     (branch " if b_16 true"
                        (builtin "Update Simplification" (formula "30"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch " if b_16 false"
                        (rule "false_to_not_true" (formula "1") (term "6"))
                        (builtin "Update Simplification" (formula "30"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "0"))
                        (rule "concrete_not_2" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_equal" (formula "29") (term "0"))
                        (rule "ifthenelse_true_for" (formula "29"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "blockEmpty" (formula "29") (term "6"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_not_equal_2" (formula "29") (term "0"))
                        (rule "ifthenelse_false_for" (formula "29"))
                        (rule "blockReturn" (formula "29") (term "3"))
                        (rule "methodCallReturn" (formula "29") (term "3"))
                        (rule "assignment" (formula "29") (term "3"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "methodCallEmpty" (formula "29") (term "4"))
                        (rule "blockEmpty" (formula "29") (term "4"))
                        (rule "assignment" (formula "29") (term "4"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "ifElse" (formula "29") (term "4"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_not_equal_2" (formula "29") (term "0"))
                        (rule "ifthenelse_false_for" (formula "29"))
                        (rule "blockReturn" (formula "29") (term "1"))
                        (rule "methodCallReturn" (formula "29") (term "1"))
                        (rule "assignment" (formula "29") (term "1"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "methodCallEmpty" (formula "29") (term "1"))
                        (rule "tryEmpty" (formula "29") (term "1"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "emptyModality" (formula "29"))
                        (rule "allRight" (formula "29") (inst "sk=m_0_1"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "notRight" (formula "29"))
                        (rule "cut_direct" (formula "31") (term "0,1,1"))
                        (branch " CUT: m_0_1.playerCol >= 0 TRUE"
                           (rule "concrete_and_1" (formula "32") (term "1,1"))
                           (rule "cut_direct" (formula "32") (term "0"))
                           (branch " CUT: m_0_1.playerRow >= 0 TRUE"
                              (rule "concrete_and_1" (formula "33"))
                              (rule "cut_direct" (formula "33") (term "0"))
                              (branch " CUT: m_0_1.maze.length >= 1 + m_0_1.playerRow TRUE"
                                 (rule "concrete_and_1" (formula "34"))
                                 (rule "cut_direct" (formula "34") (term "0"))
                                 (branch " CUT:    m_0_1.maze[m_0_1.playerRow].length
>= 1
 + m_0_1.playerCol TRUE"
                                    (rule "concrete_and_1" (formula "35"))
                                    (rule "notRight" (formula "35"))
                                    (rule "allLeft" (formula "25") (inst "t=m_0_1"))
                                    (rule "replace_known_right" (formula "25") (term "1,0,0,0,0,0,0") (ifseqformula "36"))
                                    (rule "concrete_or_4" (formula "25") (term "0,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "25") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                    (rule "concrete_not_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "concrete_or_4" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,0,0"))
                                    (rule "allLeft" (formula "25") (inst "t=m_0_1.playerRow@(maze.Maze)"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,1,0,0,0"))
                                    (rule "leq_literals" (formula "25") (term "0,1,0,0,0"))
                                    (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "25") (term "0,1,0,0,0"))
                                    (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                                    (rule "allLeft" (formula "25") (inst "t=m_0_1.playerCol@(maze.Maze)"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                    (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "25") (term "1"))
                                    (rule "concrete_or_3" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "allLeft" (formula "17") (inst "t=m_0_1"))
                                    (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "6"))
                                    (rule "concrete_not_1" (formula "17") (term "1,0"))
                                    (rule "concrete_or_4" (formula "17") (term "0"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "38"))
                                    (rule "concrete_or_2" (formula "17"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "close" (formula "33") (ifseqformula "1"))
                                 )
                                 (branch " CUT:    m_0_1.maze[m_0_1.playerRow].length
>= 1
 + m_0_1.playerCol FALSE"
                                    (rule "concrete_and_2" (formula "35"))
                                    (rule "false_right" (formula "35"))
                                    (rule "inEqSimp_geqRight" (formula "34"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "allLeft" (formula "15") (inst "t=m_0_1"))
                                    (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "35"))
                                    (rule "concrete_or_2" (formula "15") (term "0"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "5"))
                                    (rule "concrete_not_1" (formula "15") (term "0"))
                                    (rule "concrete_or_2" (formula "15"))
                                    (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "inEqSimp_homoInEq1" (formula "15"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0"))
                                    (rule "add_zero_right" (formula "15") (term "0"))
                                    (rule "leq_literals" (formula "15"))
                                    (rule "closeFalse" (formula "15"))
                                 )
                              )
                              (branch " CUT: m_0_1.maze.length >= 1 + m_0_1.playerRow FALSE"
                                 (rule "concrete_and_2" (formula "34"))
                                 (rule "false_right" (formula "34"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "allLeft" (formula "14") (inst "t=m_0_1"))
                                 (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "34"))
                                 (rule "concrete_or_2" (formula "14") (term "0"))
                                 (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "4"))
                                 (rule "concrete_not_1" (formula "14") (term "0"))
                                 (rule "concrete_or_2" (formula "14"))
                                 (rule "allLeft" (formula "12") (inst "t=m_0_1"))
                                 (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                                 (rule "concrete_not_1" (formula "12") (term "1,0"))
                                 (rule "concrete_or_4" (formula "12") (term "0"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "35"))
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch " CUT: m_0_1.playerRow >= 0 FALSE"
                              (rule "concrete_and_2" (formula "33"))
                              (rule "false_right" (formula "33"))
                              (rule "inEqSimp_geqRight" (formula "32"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "allLeft" (formula "13") (inst "t=m_0_1"))
                              (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "33"))
                              (rule "concrete_or_2" (formula "13") (term "0"))
                              (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "3"))
                              (rule "concrete_not_1" (formula "13") (term "0"))
                              (rule "concrete_or_2" (formula "13"))
                              (rule "allLeft" (formula "11") (inst "t=m_0_1"))
                              (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "3"))
                              (rule "concrete_not_1" (formula "11") (term "1,0"))
                              (rule "concrete_or_4" (formula "11") (term "0"))
                              (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "34"))
                              (rule "concrete_or_2" (formula "11"))
                              (rule "allLeft" (formula "16") (inst "t=m_0_1"))
                              (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "35"))
                              (rule "concrete_or_2" (formula "16") (term "0"))
                              (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "3"))
                              (rule "concrete_not_1" (formula "16") (term "0"))
                              (rule "concrete_or_2" (formula "16"))
                              (rule "notLeft" (formula "16"))
                              (rule "allLeft" (formula "7") (inst "t=m_0_1"))
                              (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "36"))
                              (rule "concrete_or_2" (formula "7") (term "0"))
                              (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "3"))
                              (rule "concrete_not_1" (formula "7") (term "0"))
                              (rule "concrete_or_2" (formula "7"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (rule "concrete_and_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch " CUT: m_0_1.playerCol >= 0 FALSE"
                           (rule "concrete_and_2" (formula "32") (term "1,1"))
                           (rule "concrete_and_4" (formula "32") (term "1"))
                           (rule "concrete_and_4" (formula "32"))
                           (rule "false_right" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "31"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "allLeft" (formula "12") (inst "t=m_0_1"))
                           (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "2"))
                           (rule "concrete_not_1" (formula "12") (term "1,0"))
                           (rule "concrete_or_4" (formula "12") (term "0"))
                           (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "32"))
                           (rule "concrete_or_2" (formula "12"))
                           (rule "allLeft" (formula "8") (inst "t=m_0_1"))
                           (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "2"))
                           (rule "concrete_not_1" (formula "8") (term "1,0"))
                           (rule "concrete_or_4" (formula "8") (term "0"))
                           (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "33"))
                           (rule "concrete_or_2" (formula "8"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                           (rule "concrete_and_2" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                  )
               )
            )
            (branch " self.playerRow >= 0 FALSE"
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "compound_assignment_1" (formula "15") (term "6"))
               (rule "allLeft" (formula "3") (inst "t=self"))
               (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "15"))
               (rule "concrete_or_2" (formula "3") (term "0"))
               (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "14"))
               (rule "concrete_not_1" (formula "3") (term "0"))
               (rule "concrete_or_2" (formula "3"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_and_2" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
         (branch " if b_11 false"
            (rule "false_to_not_true" (formula "1") (term "5"))
            (builtin "Update Simplification" (formula "15"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch " direction = 2 FALSE"
   (rule "replace_known_right" (formula "10") (term "0,1,0,2,0,1,1,1") (ifseqformula "12"))
   (rule "ifthenelse_false" (formula "10") (term "1,0,2,0,1,1,1"))
   (rule "ifthenelse_split" (formula "10") (term "1,0,1,0,0,1,1,1,0"))
   (branch " direction = 0 TRUE"
      (rule "castDelInt" (formula "11") (term "1,0,1,0,0,1,1,1,0"))
      (rule "replace_known_left" (formula "11") (term "0,1,0,1,0,1,1,1") (ifseqformula "10"))
      (rule "ifthenelse_true" (formula "11") (term "1,0,1,0,1,1,1"))
      (rule "castDelInt" (formula "11") (term "1,0,1,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,1,1"))
      (rule "applyEq" (formula "11") (term "0,0,1,0,2,0,0,1,1,1,0") (ifseqformula "10"))
      (rule "equal_literals" (formula "11") (term "0,1,0,2,0,0,1,1,1,0"))
      (rule "ifthenelse_false" (formula "11") (term "1,0,2,0,0,1,1,1,0"))
      (rule "castDelInt" (formula "11") (term "1,0,2,0,0,1,1,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,2,0,0,1,1,1,0"))
      (rule "castDelInt" (formula "11") (term "2,0,0,1,1,1,0"))
      (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "10"))
      (rule "qeq_literals" (formula "11") (term "0,1"))
      (rule "concrete_and_1" (formula "11") (term "1"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "10"))
      (rule "equal_literals" (formula "13"))
      (rule "false_right" (formula "13"))
      (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "11") (term "0,1,0"))
      (rule "concrete_and_1" (formula "11") (term "1,0"))
      (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "11") (term "1,0,0"))
      (rule "concrete_or_4" (formula "11") (term "0,0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "11") (term "0,0,1,0,2,0,1,1") (ifseqformula "10"))
      (rule "equal_literals" (formula "11") (term "0,1,0,2,0,1,1"))
      (rule "ifthenelse_false" (formula "11") (term "1,0,2,0,1,1"))
      (rule "castDelInt" (formula "11") (term "1,0,2,0,1,1"))
      (rule "add_zero_right" (formula "11") (term "0,2,0,1,1"))
      (rule "castDelInt" (formula "11") (term "2,0,1,1"))
      (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "10"))
      (rule "leq_literals" (formula "11") (term "0,1"))
      (rule "concrete_and_1" (formula "11") (term "1"))
      (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
      (rule "leq_literals" (formula "11") (term "0,0"))
      (rule "concrete_or_2" (formula "11") (term "0"))
      (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
      (rule "leq_literals" (formula "11") (term "0,0"))
      (rule "concrete_and_1" (formula "11") (term "0"))
      (rule "neq_or_2" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "all_pull_out3" (formula "8") (term "0"))
      (rule "shift_paren_or" (formula "8") (term "0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
      (rule "all_pull_out3" (formula "7") (term "0,1,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
      (rule "commute_or_2" (formula "7") (term "0,1,0,0,1,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,1,0,0,1,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,1,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,1,0"))
      (rule "methodBodyExpand" (formula "13") (term "2"))
      (rule "variableDeclarationAssign" (formula "13") (term "2"))
      (rule "variableDeclaration" (formula "13") (term "2") (newnames "newRow_2"))
      (rule "assignment_instance_field_of_this" (formula "13") (term "2"))
      (builtin "Update Simplification" (formula "13"))
      (rule "variableDeclarationAssign" (formula "13") (term "3"))
      (rule "variableDeclaration" (formula "13") (term "3") (newnames "newCol_2"))
      (rule "assignment_instance_field_of_this" (formula "13") (term "3"))
      (builtin "Update Simplification" (formula "13"))
      (rule "switch" (formula "13") (term "4"))
      (rule "variableDeclaration" (formula "13") (term "4") (newnames "_var_1"))
      (rule "assignment_instance_field_of_this" (formula "13") (term "4"))
      (builtin "Update Simplification" (formula "13"))
      (rule "castDelInt" (formula "13") (term "0"))
      (rule "all_pull_out3" (formula "7") (term "0"))
      (rule "all_pull_out3" (formula "7") (term "0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
      (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
      (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_1"))
      (rule "equality_comparison_new" (formula "14") (term "4"))
      (builtin "Update Simplification" (formula "14"))
      (rule "insert_constant_value" (formula "14") (term "1,0,0"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
      (builtin "Update Simplification" (formula "14"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
      (builtin "Update Simplification" (formula "14"))
      (rule "castDelInt" (formula "14") (term "0,0,0"))
      (rule "eqClose" (formula "14") (term "0,0"))
      (rule "concrete_not_1" (formula "14") (term "0"))
      (rule "ifthenelse_false_for" (formula "14"))
      (rule "if" (formula "14") (term "5"))
      (builtin "Update Simplification" (formula "14"))
      (rule "boolean_equal" (formula "14") (term "0"))
      (rule "ifthenelse_true_for" (formula "14"))
      (rule "assignmentSubtractionInt" (formula "14") (term "4"))
      (builtin "Update Simplification" (formula "14"))
      (rule "blockBreakNoLabel" (formula "14") (term "4"))
      (rule "translateJavaSubInt" (formula "14") (term "3"))
      (rule "polySimp_elimSub" (formula "14") (term "3"))
      (rule "mul_literals" (formula "14") (term "1,3"))
      (rule "polySimp_addComm0" (formula "14") (term "3"))
      (rule "blockBreakLabel" (formula "14") (term "4"))
      (builtin "Update Simplification" (formula "14"))
      (rule "blockEmpty" (formula "14") (term "3"))
      (rule "ifElseUnfold" (formula "14") (term "3") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_18"))
      (rule "methodCallWithAssignmentWithinClass" (formula "14") (term "3") (inst "#v0=b_19"))
      (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_19"))
      (rule "variableDeclarationAssign" (formula "14") (term "3"))
      (rule "variableDeclaration" (formula "14") (term "3") (newnames "newRow_8"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
      (builtin "Update Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "4"))
      (rule "variableDeclaration" (formula "14") (term "4") (newnames "newCol_8"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
      (builtin "Update Simplification" (formula "14"))
      (rule "castDelInt" (formula "14") (term "4"))
      (rule "methodBodyExpand" (formula "14") (term "5"))
      (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_20"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_20"))
      (rule "evaluate_lazy_and" (formula "14") (term "5"))
      (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_21"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_21"))
      (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_22"))
      (rule "variableDeclarationAssign" (formula "14") (term "5"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_22"))
      (rule "remove_parentheses_right" (formula "14") (term "5"))
      (rule "evaluate_lazy_and" (formula "14") (term "5"))
      (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_23"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_23"))
      (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_24"))
      (rule "variableDeclarationAssign" (formula "14") (term "5"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_24"))
      (rule "remove_parentheses_right" (formula "14") (term "5"))
      (rule "evaluate_lazy_and" (formula "14") (term "5"))
      (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_25"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_25"))
      (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_26"))
      (rule "variableDeclarationAssign" (formula "14") (term "5"))
      (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_26"))
      (rule "remove_parentheses_right" (formula "14") (term "5"))
      (rule "greater_equal_than_comparison_new" (formula "14") (term "5"))
      (builtin "Update Simplification" (formula "14"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "5,1"))
      (builtin "Update Simplification" (formula "14"))
      (rule "assignment_instance_field_of_this" (formula "14") (term "5,2"))
      (builtin "Update Simplification" (formula "14"))
      (rule "castDelInt" (formula "14") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0"))
      (rule "mul_literals" (formula "14") (term "1,0"))
      (rule "ifthenelse_split_for" (formula "14"))
      (branch " self.playerRow >= 1 TRUE"
         (rule "compound_assignment_1" (formula "15") (term "6"))
         (rule "allLeft" (formula "5") (inst "t=self"))
         (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "14"))
         (rule "concrete_not_1" (formula "5") (term "1,0"))
         (rule "concrete_or_4" (formula "5") (term "0"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
         (rule "concrete_or_2" (formula "5"))
         (rule "allLeft" (formula "7") (inst "t=self"))
         (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "15"))
         (rule "concrete_not_1" (formula "7") (term "1,0"))
         (rule "concrete_or_4" (formula "7") (term "0"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
         (rule "concrete_or_2" (formula "7"))
         (rule "allLeft" (formula "4") (inst "t=self"))
         (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "16"))
         (rule "concrete_not_1" (formula "4") (term "1,0"))
         (rule "concrete_or_4" (formula "4") (term "0"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "17"))
         (rule "concrete_or_2" (formula "4"))
         (rule "allLeft" (formula "10") (inst "t=self"))
         (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "10") (term "1,0"))
         (rule "concrete_or_4" (formula "10") (term "0"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "18"))
         (rule "concrete_or_2" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "ifElseSplit" (formula "19"))
         (branch " if b_26 true"
            (builtin "Update Simplification" (formula "20"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "19") (term "5"))
            (builtin "Update Simplification" (formula "19"))
            (rule "allLeft" (formula "14") (inst "t=self"))
            (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "19"))
            (rule "concrete_or_2" (formula "14") (term "0"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "17"))
            (rule "concrete_not_1" (formula "14") (term "0"))
            (rule "concrete_or_2" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "allLeft" (formula "13") (inst "t=self"))
            (rule "replace_known_left" (formula "13") (term "0,1,0,0,0") (ifseqformula "17"))
            (rule "concrete_not_1" (formula "13") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "13") (term "0,0,0"))
            (rule "replace_known_right" (formula "13") (term "1,0,0,0") (ifseqformula "20"))
            (rule "concrete_or_4" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
            (rule "allLeft" (formula "12") (inst "t=self"))
            (rule "replace_known_left" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
            (rule "concrete_not_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "concrete_or_4" (formula "12") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "21"))
            (rule "concrete_or_4" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0"))
            (rule "allLeft" (formula "11") (inst "t=self"))
            (rule "replace_known_left" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
            (rule "concrete_not_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "22"))
            (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
            (rule "ifElse" (formula "23") (term "6"))
            (builtin "Update Simplification" (formula "23"))
            (rule "boolean_not_equal_2" (formula "23") (term "0"))
            (rule "ifthenelse_false_for" (formula "23"))
            (rule "elim_double_block_2" (formula "23") (term "5"))
            (rule "greater_equal_than_comparison_new" (formula "23") (term "5"))
            (builtin "Update Simplification" (formula "23"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "5,1"))
            (builtin "Update Simplification" (formula "23"))
            (rule "blockEmpty" (formula "23") (term "6,1"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "5,2"))
            (builtin "Update Simplification" (formula "23"))
            (rule "blockEmpty" (formula "23") (term "6,2"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "4"))
            (rule "ifthenelse_true_for" (formula "23"))
            (rule "compound_assignment_1" (formula "23") (term "6"))
            (rule "allLeft" (formula "15") (inst "t=self.playerRow@(maze.Maze)"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "15") (term "0,0,0"))
            (rule "concrete_and_2" (formula "15") (term "0,0"))
            (rule "concrete_or_2" (formula "15") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,0"))
            (rule "leq_literals" (formula "15") (term "0,0"))
            (rule "concrete_and_2" (formula "15") (term "0"))
            (rule "concrete_or_2" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "allLeft" (formula "13") (inst "t=self.playerRow@(maze.Maze)"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "13") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "13") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "13") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "13") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "13") (term "0,0,0"))
            (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
            (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "11") (term "0,0,0"))
            (rule "ifElseSplit" (formula "26"))
            (branch " if b_24 true"
               (builtin "Update Simplification" (formula "27"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
               (builtin "Update Simplification" (formula "26"))
               (rule "allLeft" (formula "14") (inst "t=self.playerCol@(maze.Maze)"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "14") (term "0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0"))
               (rule "concrete_or_2" (formula "14") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0"))
               (rule "leq_literals" (formula "14") (term "0,0"))
               (rule "concrete_and_2" (formula "14") (term "0"))
               (rule "concrete_or_2" (formula "14"))
               (rule "allLeft" (formula "11") (inst "t=self.playerCol@(maze.Maze)"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,1,0"))
               (rule "concrete_and_2" (formula "11") (term "1,0"))
               (rule "concrete_or_4" (formula "11") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "11") (term "0,0"))
               (rule "concrete_and_2" (formula "11") (term "0"))
               (rule "concrete_or_2" (formula "11"))
               (rule "ifElse" (formula "28") (term "6"))
               (builtin "Update Simplification" (formula "28"))
               (rule "boolean_not_equal_2" (formula "28") (term "0"))
               (rule "ifthenelse_false_for" (formula "28"))
               (rule "elim_double_block_2" (formula "28") (term "5"))
               (rule "compound_less_than_comparison_2" (formula "28") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
               (rule "variableDeclarationAssign" (formula "28") (term "5"))
               (rule "variableDeclaration" (formula "28") (term "5") (newnames "j"))
               (rule "assignment" (formula "28") (term "5"))
               (builtin "Update Simplification" (formula "28"))
               (rule "variableDeclarationAssign" (formula "28") (term "6"))
               (rule "variableDeclaration" (formula "28") (term "6") (newnames "j_1"))
               (rule "castDelInt" (formula "28") (term "1"))
               (rule "assignment_read_attribute" (formula "28") (term "6"))
               (branch " Normal Execution (maze != null)"
                  (builtin "Update Simplification" (formula "29"))
                  (builtin "Update Simplification" (formula "28"))
                  (rule "less_than_comparison_new" (formula "28") (term "7"))
                  (builtin "Update Simplification" (formula "28"))
                  (rule "assignment_instance_field_of_this" (formula "28") (term "5,2"))
                  (builtin "Update Simplification" (formula "28"))
                  (rule "assignment_instance_field_of_this" (formula "28") (term "5,1"))
                  (builtin "Update Simplification" (formula "28"))
                  (rule "blockEmpty" (formula "28") (term "6,2"))
                  (rule "blockEmpty" (formula "28") (term "6,1"))
                  (rule "castDelInt" (formula "28") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "28") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0"))
                  (rule "inEqSimp_subsumption1" (formula "28") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0"))
                  (rule "qeq_literals" (formula "28") (term "0,0"))
                  (rule "concrete_or_1" (formula "28") (term "0"))
                  (rule "ifthenelse_true_for" (formula "28"))
                  (rule "compound_assignment_1" (formula "28") (term "6"))
                  (rule "only_created_object_are_referenced_non_null" (formula "6") (term "0,0") (ifseqformula "23") (ifseqformula "2") (ifseqformula "25"))
                  (rule "ifElseSplit" (formula "29"))
                  (branch " if b_22 true"
                     (builtin "Update Simplification" (formula "30"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_equal" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                     (builtin "Update Simplification" (formula "29"))
                     (rule "ifElse" (formula "29") (term "6"))
                     (builtin "Update Simplification" (formula "29"))
                     (rule "boolean_not_equal_2" (formula "29") (term "0"))
                     (rule "ifthenelse_false_for" (formula "29"))
                     (rule "elim_double_block_2" (formula "29") (term "5"))
                     (rule "compound_less_than_comparison_2" (formula "29") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                     (rule "variableDeclarationAssign" (formula "29") (term "5"))
                     (rule "variableDeclaration" (formula "29") (term "5") (newnames "j_10"))
                     (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                     (builtin "Update Simplification" (formula "29"))
                     (rule "variableDeclarationAssign" (formula "29") (term "6"))
                     (rule "variableDeclaration" (formula "29") (term "6") (newnames "j_11"))
                     (rule "eval_order_array_access6" (formula "29") (term "6") (inst "#v0=var"))
                     (rule "variableDeclarationAssign" (formula "29") (term "6"))
                     (rule "variableDeclaration" (formula "29") (term "6") (newnames "var_1"))
                     (rule "assignment_array2" (formula "29") (term "6"))
                     (branch " Normal Execution (maze != null)"
                        (builtin "Update Simplification" (formula "30"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "castDelInt" (formula "31") (term "1,6"))
                        (rule "castDelInt" (formula "30") (term "0"))
                        (rule "castDelInt" (formula "29") (term "1"))
                        (rule "inEqSimp_ltRight" (formula "30"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "30"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (rule "concrete_or_1" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment_read_attribute" (formula "29") (term "7"))
                        (branch " Normal Execution (var_1 != null)"
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "29"))
                           (rule "less_than_comparison_new" (formula "30") (term "7"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "assignment_instance_field_of_this" (formula "30") (term "5,1"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "blockEmpty" (formula "30") (term "6,1"))
                           (rule "assignment_instance_field_of_this" (formula "30") (term "5,2"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "blockEmpty" (formula "30") (term "6,2"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,0"))
                           (rule "ifthenelse_split_for" (formula "30"))
                           (branch "    self.maze[-1 + self.playerRow].length
>= 1
 + self.playerCol TRUE"
                              (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "14") (term "0,1,1,0,0") (ifseqformula "7") (ifseqformula "3") (ifseqformula "26"))
                              (rule "array_length_non_negative_3" (formula "20") (term "1,1,0,0,0,0") (ifseqformula "3") (ifseqformula "7") (ifseqformula "28"))
                              (rule "ifElse" (formula "33") (term "6"))
                              (builtin "Update Simplification" (formula "33"))
                              (rule "boolean_equal" (formula "33") (term "0"))
                              (rule "ifthenelse_true_for" (formula "33"))
                              (rule "returnUnfold" (formula "33") (term "5") (inst "#v0=b_20"))
                              (rule "variableDeclarationAssign" (formula "33") (term "5"))
                              (rule "variableDeclaration" (formula "33") (term "5") (newnames "b_69"))
                              (rule "compound_inequality_comparison_1" (formula "33") (term "5") (inst "#v0=j"))
                              (rule "variableDeclarationAssign" (formula "33") (term "5"))
                              (rule "variableDeclaration" (formula "33") (term "5") (newnames "j_12"))
                              (rule "eval_order_array_access4" (formula "33") (term "5") (inst "#v0=var"))
                              (rule "variableDeclarationAssign" (formula "33") (term "5"))
                              (rule "variableDeclaration" (formula "33") (term "5") (newnames "var_2"))
                              (rule "assignment_array2" (formula "33") (term "5"))
                              (branch " Normal Execution (maze != null)"
                                 (builtin "Update Simplification" (formula "34"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "orRight" (formula "33"))
                                 (rule "orRight" (formula "33"))
                                 (rule "castDelInt" (formula "35") (term "1,4"))
                                 (rule "castDelInt" (formula "34") (term "0"))
                                 (rule "castDelInt" (formula "33") (term "1"))
                                 (rule "inEqSimp_ltRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "34"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (rule "concrete_or_1" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment_array2" (formula "33") (term "5"))
                                 (branch " Normal Execution (var_2 != null)"
                                    (builtin "Update Simplification" (formula "34"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "orRight" (formula "33"))
                                    (rule "orRight" (formula "33"))
                                    (rule "inEqSimp_ltRight" (formula "34"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inequality_comparison_new" (formula "33") (term "4"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "insert_constant_value" (formula "33") (term "1,0,0"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "3,1"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "3,2"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "methodCallReturn" (formula "33") (term "4,1"))
                                    (rule "methodCallReturn" (formula "33") (term "4,2"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "4,1"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "methodCallEmpty" (formula "33") (term "4,1"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "4,2"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "methodCallEmpty" (formula "33") (term "4,2"))
                                    (rule "blockEmpty" (formula "33") (term "4,1"))
                                    (rule "blockEmpty" (formula "33") (term "4,2"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "4,1"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "assignment_instance_field_of_this" (formula "33") (term "4,2"))
                                    (builtin "Update Simplification" (formula "33"))
                                    (rule "ifthenelse_negated_for" (formula "33"))
                                    (rule "allLeft" (formula "16") (inst "t=(jint)(-1 + self.playerRow@(maze.Maze))"))
                                    (rule "castDelInt" (formula "16") (term "0,1,0,0,0"))
                                    (rule "castDelInt" (formula "16") (term "0,1,0,0,0,0"))
                                    (rule "castDelInt" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "castDelInt" (formula "16") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "16") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0,0,0"))
                                    (rule "concrete_and_2" (formula "16") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0,0,0"))
                                    (rule "concrete_and_2" (formula "16") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "16") (term "0,0,0"))
                                    (rule "allLeft" (formula "22") (inst "t=(jint)(-1 + self.playerRow@(maze.Maze))"))
                                    (rule "castDelInt" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "castDelInt" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "castDelInt" (formula "22") (term "0,1,0,0,0"))
                                    (rule "castDelInt" (formula "22") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "22") (term "1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "22") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "concrete_and_2" (formula "22") (term "1,0,0,0,0"))
                                    (rule "concrete_or_4" (formula "22") (term "0,0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "leq_literals" (formula "22") (term "0,1,0,0,0"))
                                    (rule "concrete_and_2" (formula "22") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "22") (term "0,0,0"))
                                    (rule "ifthenelse_split_for" (formula "35"))
                                    (branch " self.maze[-1 + self.playerRow][self.playerCol] = 1 TRUE"
                                       (rule "allLeft" (formula "17") (inst "t=self.playerCol@(maze.Maze)"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                       (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "17") (term "1"))
                                       (rule "concrete_or_3" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "35") (term "0") (ifseqformula "8") (ifseqformula "4") (ifseqformula "35"))
                                       (rule "allLeft" (formula "24") (inst "t=self.playerCol@(maze.Maze)"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                       (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "24") (term "1"))
                                       (rule "concrete_or_3" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "ifElseSplit" (formula "37"))
                                       (branch " if b_18 true"
                                          (builtin "Update Simplification" (formula "38"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch " if b_18 false"
                                          (rule "false_to_not_true" (formula "1") (term "4"))
                                          (builtin "Update Simplification" (formula "38"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                          (rule "concrete_not_2" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "blockReturn" (formula "37") (term "1"))
                                          (rule "methodCallReturn" (formula "37") (term "1"))
                                          (rule "assignment_instance_field_of_this" (formula "37") (term "1"))
                                          (builtin "Update Simplification" (formula "37"))
                                          (rule "methodCallEmpty" (formula "37") (term "1"))
                                          (rule "tryEmpty" (formula "37") (term "1"))
                                          (builtin "Update Simplification" (formula "37"))
                                          (rule "emptyModality" (formula "37"))
                                          (rule "allRight" (formula "37") (inst "sk=m_0_10"))
                                          (rule "orRight" (formula "37"))
                                          (rule "orRight" (formula "37"))
                                          (rule "notRight" (formula "37"))
                                          (rule "cut_direct" (formula "39") (term "0,1,1"))
                                          (branch " CUT: m_0_10.playerCol >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "40") (term "1,1"))
                                             (rule "cut_direct" (formula "40") (term "0"))
                                             (branch " CUT: m_0_10.playerRow >= 0 TRUE"
                                                (rule "concrete_and_1" (formula "41"))
                                                (rule "cut_direct" (formula "41") (term "0"))
                                                (branch " CUT: m_0_10.maze.length >= 1 + m_0_10.playerRow TRUE"
                                                   (rule "concrete_and_1" (formula "42"))
                                                   (rule "cut_direct" (formula "42") (term "0"))
                                                   (branch " CUT:    m_0_10.maze[m_0_10.playerRow].length
>= 1
 + m_0_10.playerCol TRUE"
                                                      (rule "concrete_and_1" (formula "43"))
                                                      (rule "notRight" (formula "43"))
                                                      (rule "allLeft" (formula "34") (inst "t=m_0_10"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0,0,0") (ifseqformula "44"))
                                                      (rule "concrete_or_4" (formula "34") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "34") (term "0,1,0,0,0") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "34") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                                      (rule "allLeft" (formula "34") (inst "t=m_0_10.playerRow@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "34") (term "0,0,0"))
                                                      (rule "concrete_and_2" (formula "34") (term "0,0"))
                                                      (rule "concrete_or_2" (formula "34") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0"))
                                                      (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                                                      (rule "add_zero_right" (formula "34") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "34") (term "0,0"))
                                                      (rule "concrete_and_2" (formula "34") (term "0"))
                                                      (rule "concrete_or_2" (formula "34"))
                                                      (rule "notLeft" (formula "34"))
                                                      (rule "allLeft" (formula "20") (inst "t=m_0_10"))
                                                      (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "20") (term "1"))
                                                      (rule "concrete_or_4" (formula "20"))
                                                      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "46"))
                                                      (rule "concrete_or_2" (formula "20"))
                                                      (rule "notLeft" (formula "20"))
                                                      (rule "close" (formula "39") (ifseqformula "6"))
                                                   )
                                                   (branch " CUT:    m_0_10.maze[m_0_10.playerRow].length
>= 1
 + m_0_10.playerCol FALSE"
                                                      (rule "concrete_and_2" (formula "43"))
                                                      (rule "false_right" (formula "43"))
                                                      (rule "inEqSimp_geqRight" (formula "42"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "18") (inst "t=m_0_10"))
                                                      (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "43"))
                                                      (rule "concrete_or_2" (formula "18") (term "0"))
                                                      (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "18") (term "0"))
                                                      (rule "concrete_or_2" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0"))
                                                      (rule "add_literals" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch " CUT: m_0_10.maze.length >= 1 + m_0_10.playerRow FALSE"
                                                   (rule "concrete_and_2" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "17") (inst "t=m_0_10"))
                                                   (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "17") (term "0"))
                                                   (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "17") (term "0"))
                                                   (rule "concrete_or_2" (formula "17"))
                                                   (rule "allLeft" (formula "34") (inst "t=m_0_10"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "43"))
                                                   (rule "concrete_or_2" (formula "34") (term "0"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "34") (term "0"))
                                                   (rule "concrete_or_2" (formula "34"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_10"))
                                                   (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "15") (term "0"))
                                                   (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "44"))
                                                   (rule "concrete_or_2" (formula "15"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch " CUT: m_0_10.playerRow >= 0 FALSE"
                                                (rule "concrete_and_2" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "inEqSimp_geqRight" (formula "40"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "9") (inst "t=m_0_10"))
                                                (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "41"))
                                                (rule "concrete_or_2" (formula "9") (term "0"))
                                                (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "9") (term "0"))
                                                (rule "concrete_or_2" (formula "9"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (rule "concrete_and_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch " CUT: m_0_10.playerCol >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "40") (term "1,1"))
                                             (rule "concrete_and_4" (formula "40") (term "1"))
                                             (rule "concrete_and_4" (formula "40"))
                                             (rule "false_right" (formula "40"))
                                             (rule "inEqSimp_geqRight" (formula "39"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "15") (inst "t=m_0_10"))
                                             (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "15") (term "1,0"))
                                             (rule "concrete_or_4" (formula "15") (term "0"))
                                             (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "40"))
                                             (rule "concrete_or_2" (formula "15"))
                                             (rule "allLeft" (formula "8") (inst "t=m_0_10"))
                                             (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "41"))
                                             (rule "concrete_or_2" (formula "8") (term "0"))
                                             (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "8") (term "0"))
                                             (rule "concrete_or_2" (formula "8"))
                                             (rule "allLeft" (formula "33") (inst "t=m_0_10"))
                                             (rule "replace_known_left" (formula "33") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "33") (term "1,0"))
                                             (rule "concrete_or_4" (formula "33") (term "0"))
                                             (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "42"))
                                             (rule "concrete_or_2" (formula "33"))
                                             (rule "notLeft" (formula "33"))
                                             (rule "allLeft" (formula "14") (inst "t=m_0_10"))
                                             (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "43"))
                                             (rule "concrete_or_2" (formula "14") (term "0"))
                                             (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "14") (term "0"))
                                             (rule "concrete_or_2" (formula "14"))
                                             (rule "allLeft" (formula "11") (inst "t=m_0_10"))
                                             (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "11") (term "1,0"))
                                             (rule "concrete_or_4" (formula "11") (term "0"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (rule "concrete_and_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                    (branch " self.maze[-1 + self.playerRow][self.playerCol] = 1 FALSE"
                                       (rule "allLeft" (formula "16") (inst "t=self.playerCol@(maze.Maze)"))
                                       (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "16") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "16") (term "1,0"))
                                       (rule "concrete_or_4" (formula "16") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                       (rule "concrete_and_2" (formula "16") (term "0"))
                                       (rule "concrete_or_2" (formula "16"))
                                       (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "35") (term "0") (ifseqformula "7") (ifseqformula "3") (ifseqformula "35"))
                                       (rule "allLeft" (formula "24") (inst "t=self.playerCol@(maze.Maze)"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "24") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "24") (term "1,0"))
                                       (rule "concrete_or_4" (formula "24") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                       (rule "concrete_and_2" (formula "24") (term "0"))
                                       (rule "concrete_or_2" (formula "24"))
                                       (rule "ifElse" (formula "39") (term "4"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "boolean_equal" (formula "39") (term "0"))
                                       (rule "ifthenelse_true_for" (formula "39"))
                                       (rule "assignment_instance_field_of_this" (formula "39") (term "3"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "assignment_instance_field_of_this" (formula "39") (term "4"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "methodCallReturn" (formula "39") (term "3"))
                                       (rule "assignment_instance_field_of_this" (formula "39") (term "3"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "methodCallEmpty" (formula "39") (term "3"))
                                       (rule "tryEmpty" (formula "39") (term "3"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "castDelInt" (formula "39") (term "1"))
                                       (rule "emptyModality" (formula "39") (term "2"))
                                       (builtin "Update Simplification" (formula "39"))
                                       (rule "allRight" (formula "39") (inst "sk=m_0_6"))
                                       (rule "orRight" (formula "39"))
                                       (rule "orRight" (formula "39"))
                                       (rule "notRight" (formula "39"))
                                       (rule "eqSymm" (formula "41") (term "0,1,1,0,1"))
                                       (rule "eqSymm" (formula "41") (term "0,0,0"))
                                       (rule "eqSymm" (formula "41") (term "0,1,0,0,0,1,1,1,1"))
                                       (rule "eqSymm" (formula "41") (term "0,1,0,0,0,1,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "41") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                       (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                       (rule "ifthenelse_split" (formula "41") (term "0,0"))
                                       (branch " self = m_0_6 TRUE"
                                          (rule "castDelInt" (formula "42") (term "0,0"))
                                          (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "1"))
                                          (rule "ifthenelse_true" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                          (rule "castDelInt" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                          (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,1,1,1") (ifseqformula "1"))
                                          (rule "ifthenelse_true" (formula "42") (term "1,0,0,0,1,1,1"))
                                          (rule "castDelInt" (formula "42") (term "1,0,0,0,1,1,1"))
                                          (rule "replace_known_left" (formula "42") (term "0,0,0,1") (ifseqformula "1"))
                                          (rule "ifthenelse_true" (formula "42") (term "0,0,1"))
                                          (rule "castDelInt" (formula "42") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "42") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "42") (term "0,0,0,0,1"))
                                          (rule "add_zero_left" (formula "42") (term "0,0,0,1"))
                                          (rule "applyEq" (formula "42") (term "0,1,1,0,0,0,1,1,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "40") (term "0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "20") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "39") (term "0,1,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "30") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "42") (term "0,0,1,0,0,1") (ifseqformula "1"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0,0,1"))
                                          (rule "applyEq" (formula "42") (term "0,1,1,0,0,0,1,1,1,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "24") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
                                          (rule "replace_known_left" (formula "42") (term "0,1,1") (ifseqformula "8"))
                                          (rule "concrete_and_1" (formula "42") (term "1,1"))
                                          (rule "applyEq" (formula "42") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "24") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "20") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "37") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "24") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "13"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0"))
                                          (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "27") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "21") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "11") (term "0,1,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "26") (term "0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "21") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "39") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "21") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "28") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "39") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "replace_known_right" (formula "41") (term "0,1,1,1") (ifseqformula "39"))
                                          (rule "concrete_not_2" (formula "41") (term "1,1,1"))
                                          (rule "concrete_and_3" (formula "41") (term "1,1"))
                                          (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "30") (term "0,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "24") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "20") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "36") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "18") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "20") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "4") (term "0,1,1,0,0") (ifseqformula "1"))
                                          (rule "replace_known_left" (formula "41") (term "1,1") (ifseqformula "4"))
                                          (rule "concrete_and_3" (formula "41") (term "1"))
                                          (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "19") (term "0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0"))
                                          (rule "mul_literals" (formula "40") (term "1,0"))
                                          (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "5"))
                                          (rule "concrete_and_1" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                          (rule "andLeft" (formula "12"))
                                          (rule "inEqSimp_homoInEq1" (formula "12"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                          (rule "add_literals" (formula "12") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "12") (term "1,0"))
                                          (rule "add_literals" (formula "12") (term "0"))
                                          (rule "leq_literals" (formula "12"))
                                          (rule "closeFalse" (formula "12"))
                                       )
                                       (branch " self = m_0_6 FALSE"
                                          (rule "replace_known_right" (formula "42") (term "0,1,0,0,0,1,1,1") (ifseqformula "41"))
                                          (rule "ifthenelse_false" (formula "42") (term "1,0,0,0,1,1,1"))
                                          (rule "replace_known_right" (formula "42") (term "0,0,0,1") (ifseqformula "41"))
                                          (rule "ifthenelse_false" (formula "42") (term "0,0,1"))
                                          (rule "replace_known_right" (formula "42") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "41"))
                                          (rule "ifthenelse_false" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,1"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1"))
                                          (rule "cut_direct" (formula "42") (term "0,1,1"))
                                          (branch " CUT: m_0_6.playerCol >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "43") (term "1,1"))
                                             (rule "allLeft" (formula "32") (inst "t=m_0_6"))
                                             (rule "replace_known_left" (formula "32") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "32") (term "1,0"))
                                             (rule "concrete_or_4" (formula "32") (term "0"))
                                             (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "42"))
                                             (rule "concrete_or_2" (formula "32"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "allLeft" (formula "15") (inst "t=m_0_6"))
                                             (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "15") (term "1,0"))
                                             (rule "concrete_or_4" (formula "15") (term "0"))
                                             (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "43"))
                                             (rule "concrete_or_2" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "replace_known_right" (formula "45") (term "0,1,1,1") (ifseqformula "35"))
                                             (rule "concrete_not_2" (formula "45") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "45") (term "1,1"))
                                             (rule "allLeft" (formula "12") (inst "t=m_0_6"))
                                             (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "44"))
                                             (rule "concrete_or_2" (formula "12") (term "0"))
                                             (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "12") (term "0"))
                                             (rule "concrete_or_2" (formula "12"))
                                             (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "12"))
                                             (rule "concrete_and_1" (formula "46") (term "1"))
                                             (rule "allLeft" (formula "7") (inst "t=m_0_6"))
                                             (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "7") (term "1,0"))
                                             (rule "concrete_or_4" (formula "7") (term "0"))
                                             (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "45"))
                                             (rule "concrete_or_2" (formula "7"))
                                             (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "7"))
                                             (rule "concrete_and_1" (formula "47"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "17") (inst "t=m_0_6"))
                                             (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "47"))
                                             (rule "concrete_or_2" (formula "17") (term "0"))
                                             (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "17") (term "0"))
                                             (rule "concrete_or_2" (formula "17"))
                                             (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "inEqSimp_homoInEq1" (formula "17"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0"))
                                             (rule "add_zero_right" (formula "17") (term "0"))
                                             (rule "leq_literals" (formula "17"))
                                             (rule "closeFalse" (formula "17"))
                                          )
                                          (branch " CUT: m_0_6.playerCol >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "43") (term "1,1"))
                                             (rule "concrete_and_4" (formula "43") (term "1"))
                                             (rule "concrete_and_4" (formula "43"))
                                             (rule "false_right" (formula "43"))
                                             (rule "inEqSimp_geqRight" (formula "42"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "15") (inst "t=m_0_6"))
                                             (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "15") (term "1,0"))
                                             (rule "concrete_or_4" (formula "15") (term "0"))
                                             (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "42"))
                                             (rule "concrete_or_2" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "allLeft" (formula "12") (inst "t=m_0_6"))
                                             (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "43"))
                                             (rule "concrete_or_2" (formula "12") (term "0"))
                                             (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "12") (term "0"))
                                             (rule "concrete_or_2" (formula "12"))
                                             (rule "allLeft" (formula "9") (inst "t=m_0_6"))
                                             (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "44"))
                                             (rule "concrete_or_2" (formula "9") (term "0"))
                                             (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "9") (term "0"))
                                             (rule "concrete_or_2" (formula "9"))
                                             (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "9") (term "0"))
                                             (rule "concrete_and_2" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                    )
                                 )
                                 (branch " Null Reference (var_2 = null)"
                                    (builtin "Update Simplification" (formula "34"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "close" (formula "33") (ifseqformula "1"))
                                 )
                                 (branch " Index Out of Bounds (var_2 != null, but newCol_8 Out of Bounds!)"
                                    (builtin "Update Simplification" (formula "34"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (rule "concrete_and_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch " Null Reference (maze = null)"
                                 (builtin "Update Simplification" (formula "34"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "close" (formula "30") (ifseqformula "1"))
                              )
                              (branch " Index Out of Bounds (maze != null, but newRow_8 Out of Bounds!)"
                                 (builtin "Update Simplification" (formula "34"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "castDelInt" (formula "1") (term "1,0"))
                                 (rule "castDelInt" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "add_zero_left" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (rule "concrete_and_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "    self.maze[-1 + self.playerRow].length
>= 1
 + self.playerCol FALSE"
                              (rule "inEqSimp_geqRight" (formula "30"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "array_length_non_negative_3" (formula "21") (term "1,1,0,0") (ifseqformula "3") (ifseqformula "7") (ifseqformula "27"))
                              (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "10") (term "0,0") (ifseqformula "7") (ifseqformula "3") (ifseqformula "27"))
                              (rule "ifElseSplit" (formula "33"))
                              (branch " if b_20 true"
                                 (builtin "Update Simplification" (formula "34"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " if b_20 false"
                                 (rule "false_to_not_true" (formula "1") (term "6"))
                                 (builtin "Update Simplification" (formula "34"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                 (rule "concrete_not_2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockReturn" (formula "33") (term "3"))
                                 (rule "methodCallReturn" (formula "33") (term "3"))
                                 (rule "assignment_instance_field_of_this" (formula "33") (term "3"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "methodCallEmpty" (formula "33") (term "4"))
                                 (rule "blockEmpty" (formula "33") (term "4"))
                                 (rule "assignment_instance_field_of_this" (formula "33") (term "4"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "ifElse" (formula "33") (term "4"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "boolean_not_equal_2" (formula "33") (term "0"))
                                 (rule "ifthenelse_false_for" (formula "33"))
                                 (rule "blockReturn" (formula "33") (term "1"))
                                 (rule "methodCallReturn" (formula "33") (term "1"))
                                 (rule "assignment_instance_field_of_this" (formula "33") (term "1"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "methodCallEmpty" (formula "33") (term "1"))
                                 (rule "tryEmpty" (formula "33") (term "1"))
                                 (builtin "Update Simplification" (formula "33"))
                                 (rule "emptyModality" (formula "33"))
                                 (rule "allRight" (formula "33") (inst "sk=m_0_2"))
                                 (rule "orRight" (formula "33"))
                                 (rule "orRight" (formula "33"))
                                 (rule "notRight" (formula "33"))
                                 (rule "cut_direct" (formula "35") (term "0,1,1"))
                                 (branch " CUT: m_0_2.playerCol >= 0 TRUE"
                                    (rule "concrete_and_1" (formula "36") (term "1,1"))
                                    (rule "cut_direct" (formula "36") (term "0"))
                                    (branch " CUT: m_0_2.playerRow >= 0 TRUE"
                                       (rule "concrete_and_1" (formula "37"))
                                       (rule "cut_direct" (formula "37") (term "0"))
                                       (branch " CUT: m_0_2.maze.length >= 1 + m_0_2.playerRow TRUE"
                                          (rule "concrete_and_1" (formula "38"))
                                          (rule "cut_direct" (formula "38") (term "0"))
                                          (branch " CUT:    m_0_2.maze[m_0_2.playerRow].length
>= 1
 + m_0_2.playerCol TRUE"
                                             (rule "concrete_and_1" (formula "39"))
                                             (rule "notRight" (formula "39"))
                                             (rule "allLeft" (formula "30") (inst "t=m_0_2"))
                                             (rule "replace_known_left" (formula "30") (term "0,1,0,0,0") (ifseqformula "6"))
                                             (rule "concrete_not_1" (formula "30") (term "1,0,0,0"))
                                             (rule "concrete_or_4" (formula "30") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0,0") (ifseqformula "40"))
                                             (rule "concrete_or_4" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0"))
                                             (rule "allLeft" (formula "30") (inst "t=m_0_2.playerRow@(maze.Maze)"))
                                             (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "30") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "30") (term "0,0"))
                                             (rule "concrete_or_2" (formula "30") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
                                             (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0"))
                                             (rule "leq_literals" (formula "30") (term "0,0"))
                                             (rule "concrete_and_2" (formula "30") (term "0"))
                                             (rule "concrete_or_2" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "allLeft" (formula "23") (inst "t=m_0_2"))
                                             (rule "replace_known_right" (formula "23") (term "1,0,0,0,0,0,0") (ifseqformula "42"))
                                             (rule "concrete_or_4" (formula "23") (term "0,0,0,0,0,0"))
                                             (rule "replace_known_left" (formula "23") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                             (rule "concrete_not_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "concrete_or_4" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,0,0"))
                                             (rule "allLeft" (formula "19") (inst "t=m_0_2"))
                                             (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "19") (term "1"))
                                             (rule "concrete_or_4" (formula "19"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "43"))
                                             (rule "concrete_or_2" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "close" (formula "36") (ifseqformula "6"))
                                          )
                                          (branch " CUT:    m_0_2.maze[m_0_2.playerRow].length
>= 1
 + m_0_2.playerCol FALSE"
                                             (rule "concrete_and_2" (formula "39"))
                                             (rule "false_right" (formula "39"))
                                             (rule "inEqSimp_geqRight" (formula "38"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "29") (inst "t=m_0_2"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0,0,0") (ifseqformula "39"))
                                             (rule "concrete_or_4" (formula "29") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "0,1,0,0,0") (ifseqformula "5"))
                                             (rule "concrete_not_1" (formula "29") (term "1,0,0,0"))
                                             (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                             (rule "allLeft" (formula "29") (inst "t=m_0_2.playerRow@(maze.Maze)"))
                                             (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "29") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "29") (term "1,0"))
                                             (rule "concrete_or_4" (formula "29") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "29") (term "0,0"))
                                             (rule "concrete_and_2" (formula "29") (term "0"))
                                             (rule "concrete_or_2" (formula "29"))
                                             (rule "notLeft" (formula "29"))
                                             (rule "allLeft" (formula "17") (inst "t=m_0_2"))
                                             (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "41"))
                                             (rule "concrete_or_2" (formula "17") (term "0"))
                                             (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "5"))
                                             (rule "concrete_not_1" (formula "17") (term "0"))
                                             (rule "concrete_or_2" (formula "17"))
                                             (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "inEqSimp_homoInEq1" (formula "17"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0"))
                                             (rule "add_literals" (formula "17") (term "0"))
                                             (rule "leq_literals" (formula "17"))
                                             (rule "closeFalse" (formula "17"))
                                          )
                                       )
                                       (branch " CUT: m_0_2.maze.length >= 1 + m_0_2.playerRow FALSE"
                                          (rule "concrete_and_2" (formula "38"))
                                          (rule "false_right" (formula "38"))
                                          (rule "inEqSimp_geqRight" (formula "37"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "16") (inst "t=m_0_2"))
                                          (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
                                          (rule "concrete_or_2" (formula "16") (term "0"))
                                          (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                                          (rule "concrete_not_1" (formula "16") (term "0"))
                                          (rule "concrete_or_2" (formula "16"))
                                          (rule "allLeft" (formula "30") (inst "t=m_0_2"))
                                          (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "39"))
                                          (rule "concrete_or_2" (formula "30") (term "0"))
                                          (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "4"))
                                          (rule "concrete_not_1" (formula "30") (term "0"))
                                          (rule "concrete_or_2" (formula "30"))
                                          (rule "notLeft" (formula "30"))
                                          (rule "allLeft" (formula "13") (inst "t=m_0_2"))
                                          (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "4"))
                                          (rule "concrete_not_1" (formula "13") (term "1,0"))
                                          (rule "concrete_or_4" (formula "13") (term "0"))
                                          (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "40"))
                                          (rule "concrete_or_2" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "13"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch " CUT: m_0_2.playerRow >= 0 FALSE"
                                       (rule "concrete_and_2" (formula "37"))
                                       (rule "false_right" (formula "37"))
                                       (rule "inEqSimp_geqRight" (formula "36"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "allLeft" (formula "15") (inst "t=m_0_2"))
                                       (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "3"))
                                       (rule "concrete_not_1" (formula "15") (term "1,0"))
                                       (rule "concrete_or_4" (formula "15") (term "0"))
                                       (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "37"))
                                       (rule "concrete_or_2" (formula "15"))
                                       (rule "allLeft" (formula "29") (inst "t=m_0_2"))
                                       (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "38"))
                                       (rule "concrete_or_2" (formula "29") (term "0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "3"))
                                       (rule "concrete_not_1" (formula "29") (term "0"))
                                       (rule "concrete_or_2" (formula "29"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "allLeft" (formula "12") (inst "t=m_0_2"))
                                       (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "39"))
                                       (rule "concrete_or_2" (formula "12") (term "0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
                                       (rule "concrete_not_1" (formula "12") (term "0"))
                                       (rule "concrete_or_2" (formula "12"))
                                       (rule "allLeft" (formula "18") (inst "t=m_0_2"))
                                       (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "40"))
                                       (rule "concrete_or_2" (formula "18") (term "0"))
                                       (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "3"))
                                       (rule "concrete_not_1" (formula "18") (term "0"))
                                       (rule "concrete_or_2" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "allLeft" (formula "7") (inst "t=m_0_2"))
                                       (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "3"))
                                       (rule "concrete_not_1" (formula "7") (term "1,0"))
                                       (rule "concrete_or_4" (formula "7") (term "0"))
                                       (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "41"))
                                       (rule "concrete_or_2" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " CUT: m_0_2.playerCol >= 0 FALSE"
                                    (rule "concrete_and_2" (formula "36") (term "1,1"))
                                    (rule "concrete_and_4" (formula "36") (term "1"))
                                    (rule "concrete_and_4" (formula "36"))
                                    (rule "false_right" (formula "36"))
                                    (rule "inEqSimp_geqRight" (formula "35"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "allLeft" (formula "14") (inst "t=m_0_2"))
                                    (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "36"))
                                    (rule "concrete_or_2" (formula "14") (term "0"))
                                    (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "14") (term "0"))
                                    (rule "concrete_or_2" (formula "14"))
                                    (rule "allLeft" (formula "28") (inst "t=m_0_2"))
                                    (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "37"))
                                    (rule "concrete_or_2" (formula "28") (term "0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "28") (term "0"))
                                    (rule "concrete_or_2" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "allLeft" (formula "8") (inst "t=m_0_2"))
                                    (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "38"))
                                    (rule "concrete_or_2" (formula "8") (term "0"))
                                    (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "8") (term "0"))
                                    (rule "concrete_or_2" (formula "8"))
                                    (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "8") (term "0"))
                                    (rule "concrete_and_2" (formula "8"))
                                    (rule "closeFalse" (formula "8"))
                                 )
                              )
                           )
                        )
                        (branch " Null Reference (var_1 = null)"
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "blockThrow" (formula "30") (term "6"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "allLeft" (formula "21") (inst "t=(jint)(-1 + self.playerRow@(maze.Maze))"))
                           (rule "castDelInt" (formula "21") (term "0,0,0"))
                           (rule "castDelInt" (formula "21") (term "0,1,0"))
                           (rule "castDelInt" (formula "21") (term "1,0,0,1"))
                           (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "1"))
                           (rule "concrete_not_1" (formula "21") (term "1"))
                           (rule "concrete_or_4" (formula "21"))
                           (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0"))
                           (rule "inEqSimp_invertInEq1" (formula "21") (term "0"))
                           (rule "times_zero_2" (formula "21") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "21") (term "0,0"))
                           (rule "concrete_and_2" (formula "21") (term "0"))
                           (rule "concrete_or_2" (formula "21"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "8"))
                           (rule "andLeft" (formula "21"))
                           (rule "inEqSimp_homoInEq1" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                           (rule "add_literals" (formula "21") (term "1,1,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0"))
                           (rule "add_zero_right" (formula "21") (term "0"))
                           (rule "leq_literals" (formula "21"))
                           (rule "closeFalse" (formula "21"))
                        )
                     )
                     (branch " Null Reference (maze = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "close" (formula "27") (ifseqformula "1"))
                     )
                     (branch " Index Out of Bounds (maze != null, but newRow_8 Out of Bounds!)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "blockThrow" (formula "30") (term "6"))
                        (builtin "Update Simplification" (formula "30"))
                        (rule "castDelInt" (formula "1") (term "1,0"))
                        (rule "castDelInt" (formula "1") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch " if b_22 false"
                     (rule "false_to_not_true" (formula "1") (term "6"))
                     (builtin "Update Simplification" (formula "30"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_equal" (formula "1") (term "0"))
                     (rule "concrete_not_1" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch " Null Reference (maze = null)"
                  (builtin "Update Simplification" (formula "1"))
                  (rule "close" (formula "26") (ifseqformula "1"))
               )
            )
            (branch " if b_24 false"
               (rule "false_to_not_true" (formula "1") (term "6"))
               (builtin "Update Simplification" (formula "27"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1") (term "0"))
               (rule "concrete_not_1" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch " if b_26 false"
            (rule "false_to_not_true" (formula "1") (term "6"))
            (builtin "Update Simplification" (formula "20"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch " self.playerRow >= 1 FALSE"
         (rule "inEqSimp_geqRight" (formula "14"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "compound_assignment_1" (formula "15") (term "6"))
         (rule "allLeft" (formula "5") (inst "t=self"))
         (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "14"))
         (rule "concrete_not_1" (formula "5") (term "1,0"))
         (rule "concrete_or_4" (formula "5") (term "0"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
         (rule "concrete_or_2" (formula "5"))
         (rule "allLeft" (formula "7") (inst "t=self"))
         (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "15"))
         (rule "concrete_not_1" (formula "7") (term "1,0"))
         (rule "concrete_or_4" (formula "7") (term "0"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
         (rule "concrete_or_2" (formula "7"))
         (rule "allLeft" (formula "9") (inst "t=self"))
         (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "16"))
         (rule "concrete_not_1" (formula "9") (term "1,0"))
         (rule "concrete_or_4" (formula "9") (term "0"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
         (rule "concrete_or_2" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "allLeft" (formula "4") (inst "t=self"))
         (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "18"))
         (rule "concrete_or_2" (formula "4") (term "0"))
         (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "16"))
         (rule "concrete_not_1" (formula "4") (term "0"))
         (rule "concrete_or_2" (formula "4"))
         (rule "allLeft" (formula "3") (inst "t=self"))
         (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "3") (term "0"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "3") (term "0"))
         (rule "concrete_or_2" (formula "3"))
         (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
         (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "applyEq" (formula "20") (term "1,5") (ifseqformula "3"))
         (rule "add_zero_right" (formula "20") (term "5"))
         (rule "applyEq" (formula "20") (term "1,4") (ifseqformula "3"))
         (rule "add_zero_right" (formula "20") (term "4"))
         (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "3"))
         (rule "add_literals" (formula "7") (term "1"))
         (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "allLeft" (formula "14") (inst "t=self"))
         (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "14") (term "1,0"))
         (rule "concrete_or_4" (formula "14") (term "0"))
         (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "14"))
         (rule "notLeft" (formula "14"))
         (rule "ifElse" (formula "20") (term "6"))
         (builtin "Update Simplification" (formula "20"))
         (rule "boolean_not_equal_2" (formula "20") (term "0"))
         (rule "ifthenelse_false_for" (formula "20"))
         (rule "assignment_instance_field_of_this" (formula "20") (term "5"))
         (builtin "Update Simplification" (formula "20"))
         (rule "allLeft" (formula "11") (inst "t=self"))
         (rule "replace_known_left" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
         (rule "replace_known_right" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "20"))
         (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
         (rule "allLeft" (formula "13") (inst "t=self"))
         (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
         (rule "concrete_not_1" (formula "13") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
         (rule "replace_known_right" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "21"))
         (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
         (rule "allLeft" (formula "15") (inst "t=self"))
         (rule "replace_known_right" (formula "15") (term "1,0,0,0,0") (ifseqformula "22"))
         (rule "concrete_or_4" (formula "15") (term "0,0,0,0"))
         (rule "replace_known_left" (formula "15") (term "0,1,0,0,0") (ifseqformula "19"))
         (rule "concrete_not_1" (formula "15") (term "1,0,0,0"))
         (rule "concrete_or_4" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
         (rule "ifElse" (formula "23") (term "6"))
         (builtin "Update Simplification" (formula "23"))
         (rule "boolean_equal" (formula "23") (term "0"))
         (rule "ifthenelse_true_for" (formula "23"))
         (rule "assignment_instance_field_of_this" (formula "23") (term "5"))
         (builtin "Update Simplification" (formula "23"))
         (rule "blockEmpty" (formula "23") (term "6"))
         (rule "compound_assignment_1" (formula "23") (term "6"))
         (rule "allLeft" (formula "11") (inst "t=(jint)(0)"))
         (rule "castDelInt" (formula "11") (term "0,1,0,0,0,0"))
         (rule "leq_literals" (formula "11") (term "1,0,0,0,0"))
         (rule "concrete_or_4" (formula "11") (term "0,0,0,0"))
         (rule "castDelInt" (formula "11") (term "0,1,0,0,0"))
         (rule "castDelInt" (formula "11") (term "1,0,0,1,0,0"))
         (rule "castDelInt" (formula "11") (term "1,0,0,1,0"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "11") (term "0,1,0,0,0"))
         (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
         (rule "concrete_or_4" (formula "11") (term "0,0,0"))
         (rule "allLeft" (formula "14") (inst "t=(jint)(0)"))
         (rule "castDelInt" (formula "14") (term "1,0,0,1,0,0"))
         (rule "castDelInt" (formula "14") (term "1,0,0,1,0"))
         (rule "castDelInt" (formula "14") (term "0,1,0,0,0"))
         (rule "castDelInt" (formula "14") (term "0,1,0,0,0,0"))
         (rule "leq_literals" (formula "14") (term "1,0,0,0,0"))
         (rule "concrete_or_4" (formula "14") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "14") (term "0,1,0,0,0"))
         (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
         (rule "concrete_or_4" (formula "14") (term "0,0,0"))
         (rule "allLeft" (formula "17") (inst "t=(jint)(0)"))
         (rule "castDelInt" (formula "17") (term "0,0,0"))
         (rule "leq_literals" (formula "17") (term "0,0"))
         (rule "concrete_or_2" (formula "17") (term "0"))
         (rule "castDelInt" (formula "17") (term "1,0,0,1"))
         (rule "castDelInt" (formula "17") (term "0,0"))
         (rule "inEqSimp_commuteGeq" (formula "17") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "17") (term "0,0"))
         (rule "concrete_and_2" (formula "17") (term "0"))
         (rule "concrete_or_2" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "ifElse" (formula "26") (term "6"))
         (builtin "Update Simplification" (formula "26"))
         (rule "boolean_not_equal_2" (formula "26") (term "0"))
         (rule "ifthenelse_false_for" (formula "26"))
         (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
         (builtin "Update Simplification" (formula "26"))
         (rule "allLeft" (formula "11") (inst "t=self.playerCol@(maze.Maze)"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "11") (term "0,0,0"))
         (rule "concrete_and_2" (formula "11") (term "0,0"))
         (rule "concrete_or_2" (formula "11") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0"))
         (rule "leq_literals" (formula "11") (term "0,0"))
         (rule "concrete_and_2" (formula "11") (term "0"))
         (rule "concrete_or_2" (formula "11"))
         (rule "allLeft" (formula "15") (inst "t=self.playerCol@(maze.Maze)"))
         (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "15") (term "0,0,0"))
         (rule "concrete_and_2" (formula "15") (term "0,0"))
         (rule "concrete_or_2" (formula "15") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0"))
         (rule "concrete_and_2" (formula "15") (term "0"))
         (rule "concrete_or_2" (formula "15"))
         (rule "only_created_object_are_referenced_non_null" (formula "6") (term "0,0") (ifseqformula "23") (ifseqformula "1") (ifseqformula "25"))
         (rule "ifElseSplit" (formula "29"))
         (branch " if b_23 true"
            (builtin "Update Simplification" (formula "30"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
            (builtin "Update Simplification" (formula "29"))
            (rule "blockEmpty" (formula "29") (term "6"))
            (rule "compound_assignment_1" (formula "29") (term "6"))
            (rule "ifElse" (formula "29") (term "6"))
            (builtin "Update Simplification" (formula "29"))
            (rule "boolean_not_equal_2" (formula "29") (term "0"))
            (rule "ifthenelse_false_for" (formula "29"))
            (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
            (builtin "Update Simplification" (formula "29"))
            (rule "ifElse" (formula "29") (term "6"))
            (builtin "Update Simplification" (formula "29"))
            (rule "boolean_equal" (formula "29") (term "0"))
            (rule "ifthenelse_true_for" (formula "29"))
            (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
            (builtin "Update Simplification" (formula "29"))
            (rule "blockEmpty" (formula "29") (term "6"))
            (rule "ifElseSplit" (formula "29"))
            (branch " if b_20 true"
               (builtin "Update Simplification" (formula "30"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b_20 false"
               (rule "false_to_not_true" (formula "1") (term "6"))
               (builtin "Update Simplification" (formula "30"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockReturn" (formula "29") (term "3"))
               (rule "methodCallReturn" (formula "29") (term "3"))
               (rule "assignment" (formula "29") (term "3"))
               (builtin "Update Simplification" (formula "29"))
               (rule "methodCallEmpty" (formula "29") (term "4"))
               (rule "blockEmpty" (formula "29") (term "4"))
               (rule "assignment" (formula "29") (term "4"))
               (builtin "Update Simplification" (formula "29"))
               (rule "ifElse" (formula "29") (term "4"))
               (builtin "Update Simplification" (formula "29"))
               (rule "boolean_not_equal_2" (formula "29") (term "0"))
               (rule "ifthenelse_false_for" (formula "29"))
               (rule "blockReturn" (formula "29") (term "1"))
               (rule "methodCallReturn" (formula "29") (term "1"))
               (rule "assignment" (formula "29") (term "1"))
               (builtin "Update Simplification" (formula "29"))
               (rule "methodCallEmpty" (formula "29") (term "1"))
               (rule "tryEmpty" (formula "29") (term "1"))
               (builtin "Update Simplification" (formula "29"))
               (rule "emptyModality" (formula "29"))
               (rule "allRight" (formula "29") (inst "sk=m_0_0"))
               (rule "orRight" (formula "29"))
               (rule "orRight" (formula "29"))
               (rule "notRight" (formula "29"))
               (rule "cut_direct" (formula "31") (term "0,1,1"))
               (branch " CUT: m_0_0.playerCol >= 0 TRUE"
                  (rule "concrete_and_1" (formula "32") (term "1,1"))
                  (rule "cut_direct" (formula "32") (term "0"))
                  (branch " CUT: m_0_0.playerRow >= 0 TRUE"
                     (rule "concrete_and_1" (formula "33"))
                     (rule "cut_direct" (formula "33") (term "0"))
                     (branch " CUT: m_0_0.maze.length >= 1 + m_0_0.playerRow TRUE"
                        (rule "concrete_and_1" (formula "34"))
                        (rule "cut_direct" (formula "34") (term "0"))
                        (branch " CUT:    m_0_0.maze[m_0_0.playerRow].length
>= 1
 + m_0_0.playerCol TRUE"
                           (rule "concrete_and_1" (formula "35"))
                           (rule "notRight" (formula "35"))
                           (rule "allLeft" (formula "27") (inst "t=m_0_0"))
                           (rule "replace_known_right" (formula "27") (term "1,0,0,0,0") (ifseqformula "36"))
                           (rule "concrete_or_4" (formula "27") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "27") (term "0,1,0,0,0") (ifseqformula "6"))
                           (rule "concrete_not_1" (formula "27") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "27") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0"))
                           (rule "allLeft" (formula "27") (inst "t=m_0_0.playerRow@(maze.Maze)"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "27") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "27") (term "1,0"))
                           (rule "concrete_or_4" (formula "27") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "27") (term "0,0"))
                           (rule "concrete_and_2" (formula "27") (term "0"))
                           (rule "concrete_or_2" (formula "27"))
                           (rule "notLeft" (formula "27"))
                           (rule "allLeft" (formula "17") (inst "t=m_0_0"))
                           (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "38"))
                           (rule "concrete_or_2" (formula "17") (term "0"))
                           (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "6"))
                           (rule "concrete_not_1" (formula "17") (term "0"))
                           (rule "concrete_or_2" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "close" (formula "32") (ifseqformula "1"))
                        )
                        (branch " CUT:    m_0_0.maze[m_0_0.playerRow].length
>= 1
 + m_0_0.playerCol FALSE"
                           (rule "concrete_and_2" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "allLeft" (formula "26") (inst "t=m_0_0"))
                           (rule "replace_known_left" (formula "26") (term "0,1,0,0,0") (ifseqformula "5"))
                           (rule "concrete_not_1" (formula "26") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "26") (term "0,0,0"))
                           (rule "replace_known_right" (formula "26") (term "1,0,0,0") (ifseqformula "35"))
                           (rule "concrete_or_4" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0"))
                           (rule "allLeft" (formula "26") (inst "t=m_0_0.playerRow@(maze.Maze)"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "26") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "26") (term "0,0"))
                           (rule "concrete_or_2" (formula "26") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,0"))
                           (rule "leq_literals" (formula "26") (term "0,0"))
                           (rule "concrete_and_2" (formula "26") (term "0"))
                           (rule "concrete_or_2" (formula "26"))
                           (rule "notLeft" (formula "26"))
                           (rule "allLeft" (formula "15") (inst "t=m_0_0"))
                           (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "5"))
                           (rule "concrete_not_1" (formula "15") (term "1,0"))
                           (rule "concrete_or_4" (formula "15") (term "0"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "37"))
                           (rule "concrete_or_2" (formula "15"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch " CUT: m_0_0.maze.length >= 1 + m_0_0.playerRow FALSE"
                        (rule "concrete_and_2" (formula "34"))
                        (rule "false_right" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "allLeft" (formula "14") (inst "t=m_0_0"))
                        (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "34"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "allLeft" (formula "16") (inst "t=m_0_0"))
                        (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "35"))
                        (rule "concrete_or_2" (formula "16") (term "0"))
                        (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "16") (term "0"))
                        (rule "concrete_or_2" (formula "16"))
                        (rule "notLeft" (formula "16"))
                        (rule "allLeft" (formula "27") (inst "t=m_0_0"))
                        (rule "replace_known_left" (formula "27") (term "0,1,0") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "27") (term "1,0"))
                        (rule "concrete_or_4" (formula "27") (term "0"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "36"))
                        (rule "concrete_or_2" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "allLeft" (formula "12") (inst "t=m_0_0"))
                        (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "12") (term "1,0"))
                        (rule "concrete_or_4" (formula "12") (term "0"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "37"))
                        (rule "concrete_or_2" (formula "12"))
                        (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_literals" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                  )
                  (branch " CUT: m_0_0.playerRow >= 0 FALSE"
                     (rule "concrete_and_2" (formula "33"))
                     (rule "false_right" (formula "33"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "allLeft" (formula "6") (inst "t=m_0_0"))
                     (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "6") (term "1,0"))
                     (rule "concrete_or_4" (formula "6") (term "0"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "33"))
                     (rule "concrete_or_2" (formula "6"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (rule "concrete_and_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch " CUT: m_0_0.playerCol >= 0 FALSE"
                  (rule "concrete_and_2" (formula "32") (term "1,1"))
                  (rule "concrete_and_4" (formula "32") (term "1"))
                  (rule "concrete_and_4" (formula "32"))
                  (rule "false_right" (formula "32"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "allLeft" (formula "12") (inst "t=m_0_0"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "12") (term "1,0"))
                  (rule "concrete_or_4" (formula "12") (term "0"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "32"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "allLeft" (formula "5") (inst "t=m_0_0"))
                  (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "33"))
                  (rule "concrete_or_2" (formula "5") (term "0"))
                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "5") (term "0"))
                  (rule "concrete_or_2" (formula "5"))
                  (rule "allLeft" (formula "15") (inst "t=m_0_0"))
                  (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "15") (term "1,0"))
                  (rule "concrete_or_4" (formula "15") (term "0"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "34"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "allLeft" (formula "26") (inst "t=m_0_0"))
                  (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "35"))
                  (rule "concrete_or_2" (formula "26") (term "0"))
                  (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "26") (term "0"))
                  (rule "concrete_or_2" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "allLeft" (formula "8") (inst "t=m_0_0"))
                  (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "36"))
                  (rule "concrete_or_2" (formula "8") (term "0"))
                  (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "8") (term "0"))
                  (rule "concrete_or_2" (formula "8"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch " if b_23 false"
            (rule "false_to_not_true" (formula "1") (term "6"))
            (builtin "Update Simplification" (formula "30"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_equal" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch " direction = 0 FALSE"
      (rule "replace_known_right" (formula "10") (term "0,1,0,1,0,1,1,1") (ifseqformula "12"))
      (rule "ifthenelse_false" (formula "10") (term "1,0,1,0,1,1,1"))
      (rule "cut_direct" (formula "10") (term "1,0,0"))
      (branch " CUT: direction >= 4 TRUE"
         (rule "concrete_or_3" (formula "11") (term "0,0"))
         (rule "concrete_or_1" (formula "11") (term "0"))
         (rule "concrete_or_1" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "10"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "leq_literals" (formula "12") (term "0"))
         (rule "concrete_and_2" (formula "12"))
         (rule "false_right" (formula "12"))
         (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "10"))
         (rule "mul_literals" (formula "12") (term "1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "leq_literals" (formula "12") (term "0"))
         (rule "concrete_and_2" (formula "12"))
         (rule "false_right" (formula "12"))
         (rule "all_pull_out3" (formula "8") (term "0"))
         (rule "shift_paren_or" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
         (rule "all_pull_out3" (formula "7") (term "0,1,0"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0,1,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,1,0,0,1,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0,1,0"))
         (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,1,0"))
         (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,1,0"))
         (rule "all_pull_out3" (formula "7") (term "0"))
         (rule "all_pull_out3" (formula "7") (term "0,0"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "7") (term "0,0"))
         (rule "distr_forallAnd" (formula "7") (term "0"))
         (rule "distr_forallAnd" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "commute_or_2" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
         (rule "methodBodyExpand" (formula "14") (term "2"))
         (rule "variableDeclarationAssign" (formula "14") (term "2"))
         (rule "variableDeclaration" (formula "14") (term "2") (newnames "newRow_3"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "2"))
         (builtin "Update Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "3"))
         (rule "variableDeclaration" (formula "14") (term "3") (newnames "newCol_3"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
         (builtin "Update Simplification" (formula "14"))
         (rule "switch" (formula "14") (term "4"))
         (rule "variableDeclaration" (formula "14") (term "4") (newnames "_var_2"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
         (builtin "Update Simplification" (formula "14"))
         (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_2"))
         (rule "equality_comparison_new" (formula "14") (term "4"))
         (builtin "Update Simplification" (formula "14"))
         (rule "insert_constant_value" (formula "14") (term "1,0,0"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
         (builtin "Update Simplification" (formula "14"))
         (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
         (builtin "Update Simplification" (formula "14"))
         (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
         (rule "concrete_and_2" (formula "14") (term "0,0"))
         (rule "concrete_not_2" (formula "14") (term "0"))
         (rule "ifthenelse_true_for" (formula "14"))
         (rule "ifSplit" (formula "14"))
         (branch " if b_2 true"
            (builtin "Update Simplification" (formula "15"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " if b_2 false"
            (rule "false_to_not_true" (formula "1") (term "5"))
            (builtin "Update Simplification" (formula "15"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "0"))
            (rule "concrete_not_2" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_3"))
            (rule "equality_comparison_new" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "insert_constant_value" (formula "14") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0"))
            (rule "leq_literals" (formula "14") (term "0,0,0"))
            (rule "concrete_and_2" (formula "14") (term "0,0"))
            (rule "concrete_not_2" (formula "14") (term "0"))
            (rule "ifthenelse_true_for" (formula "14"))
            (rule "ifSplit" (formula "14"))
            (branch " if b_3 true"
               (builtin "Update Simplification" (formula "15"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b_3 false"
               (rule "false_to_not_true" (formula "1") (term "5"))
               (builtin "Update Simplification" (formula "15"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_27"))
               (rule "equality_comparison_new" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "insert_constant_value" (formula "14") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "leq_literals" (formula "14") (term "0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0"))
               (rule "concrete_not_2" (formula "14") (term "0"))
               (rule "ifthenelse_true_for" (formula "14"))
               (rule "ifSplit" (formula "14"))
               (branch " if b_27 true"
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_27 false"
                  (rule "false_to_not_true" (formula "1") (term "5"))
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                  (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_28"))
                  (rule "equality_comparison_new" (formula "14") (term "4"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "14") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "14") (term "0,0"))
                  (rule "concrete_not_2" (formula "14") (term "0"))
                  (rule "ifthenelse_true_for" (formula "14"))
                  (rule "ifSplit" (formula "14"))
                  (branch " if b_28 true"
                     (builtin "Update Simplification" (formula "15"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " if b_28 false"
                     (rule "false_to_not_true" (formula "1") (term "5"))
                     (builtin "Update Simplification" (formula "15"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "0"))
                     (rule "concrete_not_2" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "unusedLabel" (formula "14") (term "4"))
                     (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_29"))
                     (rule "compound_assignment_3" (formula "14") (term "4"))
                     (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_30"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_30"))
                     (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_31"))
                     (rule "variableDeclarationAssign" (formula "14") (term "4"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_31"))
                     (rule "evaluate_lazy_and" (formula "14") (term "4"))
                     (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_32"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_32"))
                     (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_33"))
                     (rule "variableDeclarationAssign" (formula "14") (term "4"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_33"))
                     (rule "remove_parentheses_right" (formula "14") (term "4"))
                     (rule "compound_assignment_3" (formula "14") (term "4"))
                     (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_34"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_34"))
                     (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_35"))
                     (rule "variableDeclarationAssign" (formula "14") (term "4"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_35"))
                     (rule "inequality_comparison_new" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0,0"))
                     (rule "concrete_not_2" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "compound_assignment_1" (formula "14") (term "5"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_equal" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_not_equal_2" (formula "14") (term "0"))
                     (rule "ifthenelse_false_for" (formula "14"))
                     (rule "inequality_comparison_new" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "blockEmpty" (formula "14") (term "5,1"))
                     (rule "blockEmpty" (formula "14") (term "5,2"))
                     (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0,0"))
                     (rule "concrete_not_2" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "compound_assignment_1" (formula "14") (term "5"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_equal" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_not_equal_2" (formula "14") (term "0"))
                     (rule "ifthenelse_false_for" (formula "14"))
                     (rule "elim_double_block_2" (formula "14") (term "4"))
                     (rule "inequality_comparison_new" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "blockEmpty" (formula "14") (term "5,1"))
                     (rule "blockEmpty" (formula "14") (term "5,2"))
                     (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0,0"))
                     (rule "concrete_not_2" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "compound_assignment_1" (formula "14") (term "5"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_equal" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "ifElse" (formula "14") (term "5"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_not_equal_2" (formula "14") (term "0"))
                     (rule "ifthenelse_false_for" (formula "14"))
                     (rule "inequality_comparison_new" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "3,1"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "blockEmpty" (formula "14") (term "4,1"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "3,2"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "blockEmpty" (formula "14") (term "4,2"))
                     (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0,0"))
                     (rule "concrete_not_2" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "if" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "boolean_equal" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "blockThrow" (formula "14") (term "3"))
                     (rule "throwUnfold" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException"))
                     (rule "variableDeclarationAssign" (formula "14") (term "3"))
                     (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException"))
                     (rule "instanceCreationAssignment" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_1"))
                     (rule "variableDeclarationAssign" (formula "14") (term "3"))
                     (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_1"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_2"))
                     (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_2"))
                     (rule "methodBodyExpand" (formula "14") (term "3"))
                     (rule "variableDeclaration" (formula "14") (term "3") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_3"))
                     (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_3"))
                     (rule "allocateInstance" (formula "14") (term "3") (inst "#v0=var"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "blockEmpty" (formula "14") (term "7"))
                     (rule "assignment" (formula "14") (term "7"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "polySimp_addComm0" (formula "14") (term "4"))
                     (rule "methodBodyExpand" (formula "14") (term "7"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "7"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "9"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "methodCallWithinClass" (formula "14") (term "11"))
                     (rule "methodBodyExpand" (formula "14") (term "11"))
                     (rule "methodCallSuper" (formula "14") (term "11"))
                     (rule "nextToCreate_non_negative" (formula "14") (term "0,5") (ifseqformula "1"))
                     (rule "methodBodyExpand" (formula "15") (term "11"))
                     (rule "methodCallSuper" (formula "15") (term "11"))
                     (rule "methodBodyExpand" (formula "15") (term "11"))
                     (rule "methodCallSuper" (formula "15") (term "11"))
                     (rule "methodBodyExpand" (formula "15") (term "11"))
                     (rule "methodCallSuper" (formula "15") (term "11"))
                     (rule "methodBodyExpand" (formula "15") (term "11"))
                     (rule "methodCallEmpty" (formula "15") (term "11"))
                     (rule "blockEmpty" (formula "15") (term "11"))
                     (rule "assignment_instance_field_of_this" (formula "15") (term "11"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "assignment_instance_field_of_this" (formula "15") (term "13"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "blockEmpty" (formula "15") (term "15"))
                     (rule "methodCallReturnIgnoreResult" (formula "15") (term "15"))
                     (rule "methodCallReturn" (formula "15") (term "15"))
                     (rule "assignment" (formula "15") (term "15"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "blockEmpty" (formula "15") (term "15"))
                     (rule "assignment" (formula "15") (term "15"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "methodBodyExpand" (formula "15") (term "15"))
                     (rule "methodCallSuper" (formula "15") (term "15"))
                     (rule "methodBodyExpand" (formula "15") (term "15"))
                     (rule "methodCallSuper" (formula "15") (term "15"))
                     (rule "methodBodyExpand" (formula "15") (term "15"))
                     (rule "methodCallSuper" (formula "15") (term "15"))
                     (rule "methodBodyExpand" (formula "15") (term "15"))
                     (rule "methodCallSuper" (formula "15") (term "15"))
                     (rule "methodBodyExpand" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "blockEmpty" (formula "15") (term "15"))
                     (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                     (builtin "Update Simplification" (formula "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "methodCallEmpty" (formula "15") (term "15"))
                     (rule "blockEmpty" (formula "15") (term "15"))
                     (rule "assignment_write_attribute_primitive" (formula "15") (term "15"))
                     (branch " Normal Execution (v_IllegalArgumentException_1 != null)"
                        (builtin "Update Simplification" (formula "16"))
                        (builtin "Update Simplification" (formula "15"))
                        (rule "repository_object_non_null" (formula "15"))
                        (rule "false_right" (formula "15"))
                        (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                        (builtin "Update Simplification" (formula "15"))
                        (rule "methodCallParamThrow" (formula "15") (term "15"))
                        (builtin "Update Simplification" (formula "15"))
                        (rule "tryCatchThrow" (formula "15") (term "13"))
                        (rule "ifElseUnfold" (formula "15") (term "13") (inst "#boolv=b"))
                        (rule "variableDeclaration" (formula "15") (term "13") (newnames "b_70"))
                        (rule "equality_comparison_new" (formula "15") (term "13"))
                        (builtin "Update Simplification" (formula "15"))
                        (rule "repository_object_non_null" (formula "15") (term "0,0"))
                        (rule "concrete_not_2" (formula "15") (term "0"))
                        (rule "ifthenelse_true_for" (formula "15"))
                        (rule "assignment_instance_field_of_this" (formula "15") (term "13"))
                        (builtin "Update Simplification" (formula "15"))
                        (rule "ifElseSplit" (formula "15"))
                        (branch " if b_70 true"
                           (builtin "Update Simplification" (formula "16"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch " if b_70 false"
                           (rule "false_to_not_true" (formula "1") (term "14"))
                           (builtin "Update Simplification" (formula "16"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "0"))
                           (rule "concrete_not_2" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "elim_double_block" (formula "15") (term "13"))
                           (rule "ifElseSplit" (formula "15"))
                           (branch " if v_IllegalArgumentException instanceof  java.lang.Throwable true"
                              (builtin "Update Simplification" (formula "1"))
                              (rule "repository_object_non_null" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "elim_double_block" (formula "16") (term "13"))
                              (rule "variableDeclaration" (formula "16") (term "13") (newnames "e"))
                              (rule "assignment" (formula "16") (term "13"))
                              (builtin "Update Simplification" (formula "16"))
                              (rule "assignment_instance_field_of_this" (formula "16") (term "13"))
                              (builtin "Update Simplification" (formula "16"))
                              (rule "instanceof_static_type" (formula "1") (term "0"))
                              (rule "boolean_equal" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "emptyModality" (formula "15") (term "11"))
                              (builtin "Update Simplification" (formula "15"))
                              (rule "allRight" (formula "15") (inst "sk=m_0_3"))
                              (rule "orRight" (formula "15"))
                              (rule "orRight" (formula "15"))
                              (rule "notRight" (formula "15"))
                              (rule "cut_direct" (formula "17") (term "0,1,1"))
                              (branch " CUT: m_0_3.playerCol >= 0 TRUE"
                                 (rule "concrete_and_1" (formula "18") (term "1,1"))
                                 (rule "cut_direct" (formula "18") (term "0"))
                                 (branch " CUT: m_0_3.playerRow >= 0 TRUE"
                                    (rule "concrete_and_1" (formula "19"))
                                    (rule "cut_direct" (formula "19") (term "0"))
                                    (branch " CUT: m_0_3.maze.length >= 1 + m_0_3.playerRow TRUE"
                                       (rule "concrete_and_1" (formula "20"))
                                       (rule "cut_direct" (formula "20") (term "0"))
                                       (branch " CUT:    m_0_3.maze[m_0_3.playerRow].length
>= 1
 + m_0_3.playerCol TRUE"
                                          (rule "concrete_and_1" (formula "21"))
                                          (rule "notRight" (formula "21"))
                                          (rule "allLeft" (formula "17") (inst "t=m_0_3"))
                                          (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "6"))
                                          (rule "concrete_not_1" (formula "17") (term "1,0"))
                                          (rule "concrete_or_4" (formula "17") (term "0"))
                                          (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "22"))
                                          (rule "concrete_or_2" (formula "17"))
                                          (rule "notLeft" (formula "17"))
                                          (rule "allLeft" (formula "14") (inst "t=m_0_3"))
                                          (rule "replace_known_right" (formula "14") (term "1,0,0,0,0,0,0") (ifseqformula "23"))
                                          (rule "concrete_or_4" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                          (rule "concrete_not_1" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "concrete_or_4" (formula "14") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0"))
                                          (rule "allLeft" (formula "14") (inst "t=m_0_3.playerRow@(maze.Maze)"))
                                          (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0,0") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                          (rule "concrete_and_2" (formula "14") (term "1,0,0,0,0"))
                                          (rule "concrete_or_4" (formula "14") (term "0,0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                          (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                                          (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
                                          (rule "concrete_or_4" (formula "14") (term "0,0,0"))
                                          (rule "allLeft" (formula "13") (inst "t=m_0_3"))
                                          (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "13") (term "1"))
                                          (rule "concrete_or_4" (formula "13"))
                                          (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "6"))
                                          (rule "concrete_not_1" (formula "13") (term "1"))
                                          (rule "concrete_or_4" (formula "13"))
                                          (rule "close" (formula "25") (ifseqformula "13"))
                                       )
                                       (branch " CUT:    m_0_3.maze[m_0_3.playerRow].length
>= 1
 + m_0_3.playerCol FALSE"
                                          (rule "concrete_and_2" (formula "21"))
                                          (rule "false_right" (formula "21"))
                                          (rule "inEqSimp_geqRight" (formula "20"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "11") (inst "t=m_0_3"))
                                          (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "21"))
                                          (rule "concrete_or_2" (formula "11") (term "0"))
                                          (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "5"))
                                          (rule "concrete_not_1" (formula "11") (term "0"))
                                          (rule "concrete_or_2" (formula "11"))
                                          (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "inEqSimp_homoInEq1" (formula "11"))
                                          (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                          (rule "add_literals" (formula "11") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0"))
                                          (rule "add_literals" (formula "11") (term "0"))
                                          (rule "leq_literals" (formula "11"))
                                          (rule "closeFalse" (formula "11"))
                                       )
                                    )
                                    (branch " CUT: m_0_3.maze.length >= 1 + m_0_3.playerRow FALSE"
                                       (rule "concrete_and_2" (formula "20"))
                                       (rule "false_right" (formula "20"))
                                       (rule "inEqSimp_geqRight" (formula "19"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "allLeft" (formula "10") (inst "t=m_0_3"))
                                       (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "20"))
                                       (rule "concrete_or_2" (formula "10") (term "0"))
                                       (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "4"))
                                       (rule "concrete_not_1" (formula "10") (term "0"))
                                       (rule "concrete_or_2" (formula "10"))
                                       (rule "allLeft" (formula "16") (inst "t=m_0_3"))
                                       (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "4"))
                                       (rule "concrete_not_1" (formula "16") (term "1,0"))
                                       (rule "concrete_or_4" (formula "16") (term "0"))
                                       (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "21"))
                                       (rule "concrete_or_2" (formula "16"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "allLeft" (formula "12") (inst "t=m_0_3"))
                                       (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "22"))
                                       (rule "concrete_or_2" (formula "12") (term "0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "4"))
                                       (rule "concrete_not_1" (formula "12") (term "0"))
                                       (rule "concrete_or_2" (formula "12"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "allLeft" (formula "9") (inst "t=m_0_3"))
                                       (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "23"))
                                       (rule "concrete_or_2" (formula "9") (term "0"))
                                       (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "4"))
                                       (rule "concrete_not_1" (formula "9") (term "0"))
                                       (rule "concrete_or_2" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " CUT: m_0_3.playerRow >= 0 FALSE"
                                    (rule "concrete_and_2" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "inEqSimp_geqRight" (formula "18"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "allLeft" (formula "9") (inst "t=m_0_3"))
                                    (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "9") (term "1,0"))
                                    (rule "concrete_or_4" (formula "9") (term "0"))
                                    (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
                                    (rule "concrete_or_2" (formula "9"))
                                    (rule "allLeft" (formula "15") (inst "t=m_0_3"))
                                    (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "20"))
                                    (rule "concrete_or_2" (formula "15") (term "0"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "15") (term "0"))
                                    (rule "concrete_or_2" (formula "15"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "allLeft" (formula "11") (inst "t=m_0_3"))
                                    (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "21"))
                                    (rule "concrete_or_2" (formula "11") (term "0"))
                                    (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "11") (term "0"))
                                    (rule "concrete_or_2" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "allLeft" (formula "8") (inst "t=m_0_3"))
                                    (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "22"))
                                    (rule "concrete_or_2" (formula "8") (term "0"))
                                    (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "8") (term "0"))
                                    (rule "concrete_or_2" (formula "8"))
                                    (rule "allLeft" (formula "6") (inst "t=m_0_3"))
                                    (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "6") (term "1,0"))
                                    (rule "concrete_or_4" (formula "6") (term "0"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "23"))
                                    (rule "concrete_or_2" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (rule "concrete_and_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch " CUT: m_0_3.playerCol >= 0 FALSE"
                                 (rule "concrete_and_2" (formula "18") (term "1,1"))
                                 (rule "concrete_and_4" (formula "18") (term "1"))
                                 (rule "concrete_and_4" (formula "18"))
                                 (rule "false_right" (formula "18"))
                                 (rule "inEqSimp_geqRight" (formula "17"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "allLeft" (formula "8") (inst "t=m_0_3"))
                                 (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "18"))
                                 (rule "concrete_or_2" (formula "8") (term "0"))
                                 (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
                                 (rule "concrete_not_1" (formula "8") (term "0"))
                                 (rule "concrete_or_2" (formula "8"))
                                 (rule "allLeft" (formula "14") (inst "t=m_0_3"))
                                 (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "2"))
                                 (rule "concrete_not_1" (formula "14") (term "1,0"))
                                 (rule "concrete_or_4" (formula "14") (term "0"))
                                 (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "19"))
                                 (rule "concrete_or_2" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "allLeft" (formula "6") (inst "t=m_0_3"))
                                 (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                 (rule "concrete_not_1" (formula "6") (term "1,0"))
                                 (rule "concrete_or_4" (formula "6") (term "0"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "20"))
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                 (rule "concrete_and_2" (formula "6"))
                                 (rule "closeFalse" (formula "6"))
                              )
                           )
                           (branch " if v_IllegalArgumentException instanceof  java.lang.Throwable false"
                              (rule "false_to_not_true" (formula "1") (term "13"))
                              (builtin "Update Simplification" (formula "16"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "repository_object_non_null" (formula "14") (term "0,0"))
                              (rule "ifthenelse_false" (formula "14") (term "0"))
                              (rule "blockThrow" (formula "16") (term "12"))
                              (rule "throwBox" (formula "16") (term "12"))
                              (builtin "Update Simplification" (formula "16"))
                              (rule "closeTrue" (formula "16"))
                           )
                        )
                     )
                     (branch " Null Reference (v_IllegalArgumentException_1 = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "repository_object_non_null" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
         )
      )
      (branch " CUT: direction >= 4 FALSE"
         (rule "concrete_or_4" (formula "10") (term "0,0"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "replace_known_left" (formula "11") (term "0,1,1") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "11") (term "1,1"))
         (rule "replace_known_left" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "11") (term "1,1,0"))
         (rule "all_pull_out3" (formula "9") (term "0"))
         (rule "shift_paren_or" (formula "9") (term "0,0"))
         (rule "shift_paren_or" (formula "9") (term "0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
         (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
         (rule "all_pull_out3" (formula "8") (term "0,1,0"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,1,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0,1,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0,1,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,1,0,0,1,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0,0,1,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,1,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,1,0"))
         (rule "all_pull_out3" (formula "8") (term "0"))
         (rule "all_pull_out3" (formula "8") (term "0,0"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "8") (term "0,0"))
         (rule "distr_forallAnd" (formula "8") (term "0"))
         (rule "distr_forallAnd" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "commute_or_2" (formula "9") (term "0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0"))
         (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
         (rule "ifthenelse_split" (formula "12") (term "1,0,2,0,1,1"))
         (branch " direction = 3 TRUE"
            (rule "castDelInt" (formula "13") (term "1,0,2,0,1,1"))
            (rule "replace_known_left" (formula "13") (term "0,1,0,2,0,0,1,1,0") (ifseqformula "12"))
            (rule "ifthenelse_true" (formula "13") (term "1,0,2,0,0,1,1,0"))
            (rule "castDelInt" (formula "13") (term "1,0,2,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0,0,1,1,0"))
            (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "13") (term "0,1"))
            (rule "concrete_and_1" (formula "13") (term "1"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "12"))
            (rule "equal_literals" (formula "16"))
            (rule "false_right" (formula "16"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
            (rule "equal_literals" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "12"))
            (rule "qeq_literals" (formula "13") (term "0,1,0"))
            (rule "concrete_and_1" (formula "13") (term "1,0"))
            (rule "neq_or_4" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "methodBodyExpand" (formula "14") (term "2"))
            (rule "variableDeclarationAssign" (formula "14") (term "2"))
            (rule "variableDeclaration" (formula "14") (term "2") (newnames "newRow_4"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "3"))
            (rule "variableDeclaration" (formula "14") (term "3") (newnames "newCol_4"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "switch" (formula "14") (term "4"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "_var_3"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "castDelInt" (formula "14") (term "0"))
            (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_4"))
            (rule "equality_comparison_new" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "insert_constant_value" (formula "14") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "castDelInt" (formula "14") (term "0,0,0"))
            (rule "equal_literals" (formula "14") (term "0,0"))
            (rule "concrete_not_2" (formula "14") (term "0"))
            (rule "ifthenelse_true_for" (formula "14"))
            (rule "if" (formula "14") (term "5"))
            (builtin "Update Simplification" (formula "14"))
            (rule "boolean_not_equal_2" (formula "14") (term "0"))
            (rule "ifthenelse_false_for" (formula "14"))
            (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_5"))
            (rule "equality_comparison_new" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "insert_constant_value" (formula "14") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "castDelInt" (formula "14") (term "0,0,0"))
            (rule "equal_literals" (formula "14") (term "0,0"))
            (rule "concrete_not_2" (formula "14") (term "0"))
            (rule "ifthenelse_true_for" (formula "14"))
            (rule "if" (formula "14") (term "5"))
            (builtin "Update Simplification" (formula "14"))
            (rule "boolean_not_equal_2" (formula "14") (term "0"))
            (rule "ifthenelse_false_for" (formula "14"))
            (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_36"))
            (rule "equality_comparison_new" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "insert_constant_value" (formula "14") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
            (builtin "Update Simplification" (formula "14"))
            (rule "castDelInt" (formula "14") (term "0,0,0"))
            (rule "equal_literals" (formula "14") (term "0,0"))
            (rule "concrete_not_2" (formula "14") (term "0"))
            (rule "ifthenelse_true_for" (formula "14"))
            (rule "ifSplit" (formula "14"))
            (branch " if b_36 true"
               (builtin "Update Simplification" (formula "15"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b_36 false"
               (rule "false_to_not_true" (formula "1") (term "5"))
               (builtin "Update Simplification" (formula "15"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_37"))
               (rule "equality_comparison_new" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "insert_constant_value" (formula "14") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "castDelInt" (formula "14") (term "0,0,0"))
               (rule "eqClose" (formula "14") (term "0,0"))
               (rule "concrete_not_1" (formula "14") (term "0"))
               (rule "ifthenelse_false_for" (formula "14"))
               (rule "if" (formula "14") (term "5"))
               (builtin "Update Simplification" (formula "14"))
               (rule "boolean_equal" (formula "14") (term "0"))
               (rule "ifthenelse_true_for" (formula "14"))
               (rule "assignmentAdditionInt" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "blockBreakNoLabel" (formula "14") (term "4"))
               (rule "translateJavaAddInt" (formula "14") (term "2"))
               (rule "polySimp_addComm0" (formula "14") (term "2"))
               (rule "blockBreakLabel" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "blockEmpty" (formula "14") (term "3"))
               (rule "ifElseUnfold" (formula "14") (term "3") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_38"))
               (rule "methodCallWithAssignmentWithinClass" (formula "14") (term "3") (inst "#v0=b_39"))
               (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_39"))
               (rule "variableDeclarationAssign" (formula "14") (term "3"))
               (rule "variableDeclaration" (formula "14") (term "3") (newnames "newRow_9"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
               (builtin "Update Simplification" (formula "14"))
               (rule "variableDeclarationAssign" (formula "14") (term "4"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "newCol_9"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "castDelInt" (formula "14") (term "2"))
               (rule "methodBodyExpand" (formula "14") (term "5"))
               (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_40"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_40"))
               (rule "compound_assignment_3" (formula "14") (term "5"))
               (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_41"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_41"))
               (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_42"))
               (rule "variableDeclarationAssign" (formula "14") (term "5"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_42"))
               (rule "evaluate_lazy_and" (formula "14") (term "5"))
               (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_43"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_43"))
               (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_44"))
               (rule "variableDeclarationAssign" (formula "14") (term "5"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_44"))
               (rule "remove_parentheses_right" (formula "14") (term "5"))
               (rule "evaluate_lazy_and" (formula "14") (term "5"))
               (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_45"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_45"))
               (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_46"))
               (rule "variableDeclarationAssign" (formula "14") (term "5"))
               (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_46"))
               (rule "remove_parentheses_right" (formula "14") (term "5"))
               (rule "greater_equal_than_comparison_new" (formula "14") (term "5"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "5,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "5,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ifthenelse_split_for" (formula "14"))
               (branch " self.playerRow >= 0 TRUE"
                  (rule "compound_assignment_1" (formula "15") (term "6"))
                  (rule "allLeft" (formula "5") (inst "t=self"))
                  (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "15"))
                  (rule "concrete_or_2" (formula "5") (term "0"))
                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "14"))
                  (rule "concrete_not_1" (formula "5") (term "0"))
                  (rule "concrete_or_2" (formula "5"))
                  (rule "allLeft" (formula "8") (inst "t=self"))
                  (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "16"))
                  (rule "concrete_or_2" (formula "8") (term "0"))
                  (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "15"))
                  (rule "concrete_not_1" (formula "8") (term "0"))
                  (rule "concrete_or_2" (formula "8"))
                  (rule "notLeft" (formula "8"))
                  (rule "allLeft" (formula "12") (inst "t=self"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "15"))
                  (rule "concrete_not_1" (formula "12") (term "1,0"))
                  (rule "concrete_or_4" (formula "12") (term "0"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "allLeft" (formula "7") (inst "t=self"))
                  (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "15"))
                  (rule "concrete_not_1" (formula "7") (term "1,0"))
                  (rule "concrete_or_4" (formula "7") (term "0"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "18"))
                  (rule "concrete_or_2" (formula "7"))
                  (rule "allLeft" (formula "12") (inst "t=self"))
                  (rule "replace_known_right" (formula "12") (term "1,0,0,0,0") (ifseqformula "19"))
                  (rule "concrete_or_4" (formula "12") (term "0,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "16"))
                  (rule "concrete_not_1" (formula "12") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                  (rule "ifElse" (formula "20") (term "6"))
                  (builtin "Update Simplification" (formula "20"))
                  (rule "boolean_equal" (formula "20") (term "0"))
                  (rule "ifthenelse_true_for" (formula "20"))
                  (rule "assignment_instance_field_of_this" (formula "20") (term "5"))
                  (builtin "Update Simplification" (formula "20"))
                  (rule "allLeft" (formula "4") (inst "t=self"))
                  (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "17"))
                  (rule "concrete_not_1" (formula "4") (term "1,0"))
                  (rule "concrete_or_4" (formula "4") (term "0"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "20"))
                  (rule "concrete_or_2" (formula "4"))
                  (rule "allLeft" (formula "11") (inst "t=self"))
                  (rule "replace_known_right" (formula "11") (term "1,0,0,0,0,0,0") (ifseqformula "21"))
                  (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "replace_known_left" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
                  (rule "concrete_not_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
                  (rule "allLeft" (formula "13") (inst "t=self"))
                  (rule "replace_known_right" (formula "13") (term "1,0,0,0,0,0,0") (ifseqformula "22"))
                  (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
                  (rule "concrete_not_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
                  (rule "allLeft" (formula "15") (inst "t=self.playerRow@(maze.Maze)"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0,0"))
                  (rule "concrete_or_2" (formula "15") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "ifElse" (formula "24") (term "6"))
                  (builtin "Update Simplification" (formula "24"))
                  (rule "boolean_not_equal_2" (formula "24") (term "0"))
                  (rule "ifthenelse_false_for" (formula "24"))
                  (rule "elim_double_block_2" (formula "24") (term "5"))
                  (rule "greater_equal_than_comparison_new" (formula "24") (term "5"))
                  (builtin "Update Simplification" (formula "24"))
                  (rule "assignment_instance_field_of_this" (formula "24") (term "5,1"))
                  (builtin "Update Simplification" (formula "24"))
                  (rule "assignment_instance_field_of_this" (formula "24") (term "5,2"))
                  (builtin "Update Simplification" (formula "24"))
                  (rule "blockEmpty" (formula "24") (term "6,1"))
                  (rule "blockEmpty" (formula "24") (term "6,2"))
                  (rule "castDelInt" (formula "24") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0"))
                  (rule "mul_literals" (formula "24") (term "1,0"))
                  (rule "inEqSimp_subsumption1" (formula "24") (term "0") (ifseqformula "4"))
                  (rule "leq_literals" (formula "24") (term "0,0"))
                  (rule "concrete_or_1" (formula "24") (term "0"))
                  (rule "ifthenelse_true_for" (formula "24"))
                  (rule "compound_assignment_1" (formula "24") (term "6"))
                  (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                  (rule "allLeft" (formula "14") (inst "t=self.playerRow@(maze.Maze)"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "14") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "14") (term "0,0,0"))
                  (rule "ifElse" (formula "26") (term "6"))
                  (builtin "Update Simplification" (formula "26"))
                  (rule "boolean_equal" (formula "26") (term "0"))
                  (rule "ifthenelse_true_for" (formula "26"))
                  (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
                  (builtin "Update Simplification" (formula "26"))
                  (rule "allLeft" (formula "11") (inst "t=self.playerCol@(maze.Maze)"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "11") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "11") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "11") (term "1,0"))
                  (rule "concrete_or_4" (formula "11") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "allLeft" (formula "15") (inst "t=self.playerCol@(maze.Maze)"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0,0"))
                  (rule "concrete_or_2" (formula "15") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "ifElseSplit" (formula "28"))
                  (branch " if b_43 true"
                     (builtin "Update Simplification" (formula "29"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " if b_43 false"
                     (rule "false_to_not_true" (formula "1") (term "6"))
                     (builtin "Update Simplification" (formula "29"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "0"))
                     (rule "concrete_not_2" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elim_double_block_2" (formula "28") (term "5"))
                     (rule "compound_less_than_comparison_2" (formula "28") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                     (rule "variableDeclarationAssign" (formula "28") (term "5"))
                     (rule "variableDeclaration" (formula "28") (term "5") (newnames "j_2"))
                     (rule "assignment_instance_field_of_this" (formula "28") (term "5"))
                     (builtin "Update Simplification" (formula "28"))
                     (rule "variableDeclarationAssign" (formula "28") (term "6"))
                     (rule "variableDeclaration" (formula "28") (term "6") (newnames "j_3"))
                     (rule "assignment_read_attribute" (formula "28") (term "6"))
                     (branch " Normal Execution (maze != null)"
                        (builtin "Update Simplification" (formula "29"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "less_than_comparison_new" (formula "28") (term "7"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "assignment_instance_field_of_this" (formula "28") (term "5,2"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "blockEmpty" (formula "28") (term "6,2"))
                        (rule "assignment_instance_field_of_this" (formula "28") (term "5,1"))
                        (builtin "Update Simplification" (formula "28"))
                        (rule "blockEmpty" (formula "28") (term "6,1"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,0"))
                        (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "6"))
                        (rule "ifthenelse_true_for" (formula "28"))
                        (rule "compound_assignment_1" (formula "28") (term "6"))
                        (rule "only_created_object_are_referenced_non_null" (formula "6") (term "0,0") (ifseqformula "23") (ifseqformula "2") (ifseqformula "25"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_equal" (formula "29") (term "0"))
                        (rule "ifthenelse_true_for" (formula "29"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "ifElse" (formula "29") (term "6"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "boolean_not_equal_2" (formula "29") (term "0"))
                        (rule "ifthenelse_false_for" (formula "29"))
                        (rule "compound_less_than_comparison_2" (formula "29") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                        (rule "variableDeclarationAssign" (formula "29") (term "5"))
                        (rule "variableDeclaration" (formula "29") (term "5") (newnames "j_13"))
                        (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                        (builtin "Update Simplification" (formula "29"))
                        (rule "variableDeclarationAssign" (formula "29") (term "6"))
                        (rule "variableDeclaration" (formula "29") (term "6") (newnames "j_14"))
                        (rule "castDelInt" (formula "29") (term "1"))
                        (rule "eval_order_access2" (formula "29") (term "6") (inst "#v0=var"))
                        (rule "variableDeclarationAssign" (formula "29") (term "6"))
                        (rule "variableDeclaration" (formula "29") (term "6") (newnames "var_3"))
                        (rule "assignment_array2" (formula "29") (term "6"))
                        (branch " Normal Execution (maze != null)"
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "inEqSimp_ltRight" (formula "30"))
                           (rule "mul_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "assignment_read_attribute" (formula "29") (term "7"))
                           (branch " Normal Execution (var_3 != null)"
                              (builtin "Update Simplification" (formula "30"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "less_than_comparison_new" (formula "29") (term "7"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,1"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,2"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "blockEmpty" (formula "29") (term "6,1"))
                              (rule "blockEmpty" (formula "29") (term "6,2"))
                              (rule "castDelInt" (formula "29") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,0"))
                              (rule "ifthenelse_split_for" (formula "29"))
                              (branch " self.maze[self.playerRow].length >= 2 + self.playerCol TRUE"
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0"))
                                 (rule "qeq_literals" (formula "10") (term "0"))
                                 (rule "concrete_or_1" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "25") (term "0") (ifseqformula "7") (ifseqformula "3") (ifseqformula "25"))
                                 (rule "array_length_non_negative_3" (formula "15") (term "1,1,0,0,0,0") (ifseqformula "4") (ifseqformula "8") (ifseqformula "27"))
                                 (rule "ifElse" (formula "31") (term "6"))
                                 (builtin "Update Simplification" (formula "31"))
                                 (rule "boolean_equal" (formula "31") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "31"))
                                 (rule "returnUnfold" (formula "31") (term "5") (inst "#v0=b_40"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "b_71"))
                                 (rule "compound_inequality_comparison_1" (formula "31") (term "5") (inst "#v0=j"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "j_17"))
                                 (rule "eval_order_array_access4" (formula "31") (term "5") (inst "#v0=var"))
                                 (rule "variableDeclarationAssign" (formula "31") (term "5"))
                                 (rule "variableDeclaration" (formula "31") (term "5") (newnames "var_5"))
                                 (rule "assignment_array2" (formula "31") (term "5"))
                                 (branch " Normal Execution (maze != null)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "inEqSimp_ltRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "assignment_array2" (formula "31") (term "5"))
                                    (branch " Normal Execution (var_5 != null)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "castDelInt" (formula "33") (term "1,1"))
                                       (rule "castDelInt" (formula "32") (term "0"))
                                       (rule "castDelInt" (formula "31") (term "1"))
                                       (rule "inEqSimp_ltRight" (formula "32"))
                                       (rule "times_zero_1" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "32"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                       (rule "concrete_or_1" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inequality_comparison_new" (formula "31") (term "4"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "insert_constant_value" (formula "31") (term "1,0,0"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "3,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "3,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallReturn" (formula "31") (term "4,1"))
                                       (rule "methodCallReturn" (formula "31") (term "4,2"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallEmpty" (formula "31") (term "4,1"))
                                       (rule "methodCallEmpty" (formula "31") (term "4,2"))
                                       (rule "blockEmpty" (formula "31") (term "4,1"))
                                       (rule "blockEmpty" (formula "31") (term "4,2"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "assignment_instance_field_of_this" (formula "31") (term "4,2"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "ifthenelse_negated_for" (formula "31"))
                                       (rule "allLeft" (formula "19") (inst "t=(jint)(1 + self.playerCol@(maze.Maze))"))
                                       (rule "castDelInt" (formula "19") (term "0,0,0"))
                                       (rule "castDelInt" (formula "19") (term "0,1,0"))
                                       (rule "castDelInt" (formula "19") (term "1,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "19") (term "0,0"))
                                       (rule "concrete_or_2" (formula "19") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                       (rule "leq_literals" (formula "19") (term "0,0"))
                                       (rule "concrete_and_2" (formula "19") (term "0"))
                                       (rule "concrete_or_2" (formula "19"))
                                       (rule "allLeft" (formula "14") (inst "t=(jint)(1 + self.playerCol@(maze.Maze))"))
                                       (rule "castDelInt" (formula "14") (term "0,1,0"))
                                       (rule "castDelInt" (formula "14") (term "0,0,0"))
                                       (rule "castDelInt" (formula "14") (term "1,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "14") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "14") (term "1,0"))
                                       (rule "concrete_or_4" (formula "14") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "14") (term "0,0"))
                                       (rule "concrete_and_2" (formula "14") (term "0"))
                                       (rule "concrete_or_2" (formula "14"))
                                       (rule "ifthenelse_split_for" (formula "33"))
                                       (branch " self.maze[self.playerRow][1 + self.playerCol] = 1 TRUE"
                                          (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "ifElse" (formula "32") (term "4"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "boolean_not_equal_2" (formula "32") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "32"))
                                          (rule "blockReturn" (formula "32") (term "1"))
                                          (rule "methodCallReturn" (formula "32") (term "1"))
                                          (rule "assignment_instance_field_of_this" (formula "32") (term "1"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "methodCallEmpty" (formula "32") (term "1"))
                                          (rule "tryEmpty" (formula "32") (term "1"))
                                          (builtin "Update Simplification" (formula "32"))
                                          (rule "emptyModality" (formula "32"))
                                          (rule "allRight" (formula "32") (inst "sk=m_0_13"))
                                          (rule "orRight" (formula "32"))
                                          (rule "orRight" (formula "32"))
                                          (rule "notRight" (formula "32"))
                                          (rule "cut_direct" (formula "34") (term "0,1,1"))
                                          (branch " CUT: m_0_13.playerCol >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "35") (term "1,1"))
                                             (rule "cut_direct" (formula "35") (term "0"))
                                             (branch " CUT: m_0_13.playerRow >= 0 TRUE"
                                                (rule "concrete_and_1" (formula "36"))
                                                (rule "cut_direct" (formula "36") (term "0"))
                                                (branch " CUT: m_0_13.maze.length >= 1 + m_0_13.playerRow TRUE"
                                                   (rule "concrete_and_1" (formula "37"))
                                                   (rule "cut_direct" (formula "37") (term "0"))
                                                   (branch " CUT:    m_0_13.maze[m_0_13.playerRow].length
>= 1
 + m_0_13.playerCol TRUE"
                                                      (rule "concrete_and_1" (formula "38"))
                                                      (rule "notRight" (formula "38"))
                                                      (rule "allLeft" (formula "30") (inst "t=m_0_13"))
                                                      (rule "replace_known_right" (formula "30") (term "1,0,0,0,0") (ifseqformula "39"))
                                                      (rule "concrete_or_4" (formula "30") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "30") (term "0,1,0,0,0") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "30") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "30") (term "0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0"))
                                                      (rule "allLeft" (formula "30") (inst "t=m_0_13.playerRow@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "30") (term "0,0,0"))
                                                      (rule "concrete_and_2" (formula "30") (term "0,0"))
                                                      (rule "concrete_or_2" (formula "30") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "30") (term "0,0"))
                                                      (rule "concrete_and_2" (formula "30") (term "0"))
                                                      (rule "concrete_or_2" (formula "30"))
                                                      (rule "notLeft" (formula "30"))
                                                      (rule "allLeft" (formula "32") (inst "t=m_0_13"))
                                                      (rule "replace_known_left" (formula "32") (term "0,1,0") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "32") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "32") (term "0"))
                                                      (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "41"))
                                                      (rule "concrete_or_2" (formula "32"))
                                                      (rule "notLeft" (formula "32"))
                                                      (rule "allLeft" (formula "19") (inst "t=m_0_13"))
                                                      (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "42"))
                                                      (rule "concrete_or_2" (formula "19") (term "0"))
                                                      (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "6"))
                                                      (rule "concrete_not_1" (formula "19") (term "0"))
                                                      (rule "concrete_or_2" (formula "19"))
                                                      (rule "notLeft" (formula "19"))
                                                      (rule "close" (formula "35") (ifseqformula "1"))
                                                   )
                                                   (branch " CUT:    m_0_13.maze[m_0_13.playerRow].length
>= 1
 + m_0_13.playerCol FALSE"
                                                      (rule "concrete_and_2" (formula "38"))
                                                      (rule "false_right" (formula "38"))
                                                      (rule "inEqSimp_geqRight" (formula "37"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "18") (inst "t=m_0_13"))
                                                      (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "18") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "18") (term "0"))
                                                      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "38"))
                                                      (rule "concrete_or_2" (formula "18"))
                                                      (rule "notLeft" (formula "18"))
                                                      (rule "allLeft" (formula "29") (inst "t=m_0_13"))
                                                      (rule "replace_known_right" (formula "29") (term "1,0,0,0,0") (ifseqformula "39"))
                                                      (rule "concrete_or_4" (formula "29") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "29") (term "0,1,0,0,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "29") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                                      (rule "allLeft" (formula "29") (inst "t=m_0_13.playerRow@(maze.Maze)"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "29") (term "0,1,0"))
                                                      (rule "concrete_and_2" (formula "29") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "29") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (rule "concrete_and_2" (formula "29") (term "0"))
                                                      (rule "concrete_or_2" (formula "29"))
                                                      (rule "notLeft" (formula "29"))
                                                      (rule "allLeft" (formula "17") (inst "t=m_0_13"))
                                                      (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "concrete_not_1" (formula "17") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "17") (term "0"))
                                                      (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "41"))
                                                      (rule "concrete_or_2" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0"))
                                                      (rule "add_literals" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch " CUT: m_0_13.maze.length >= 1 + m_0_13.playerRow FALSE"
                                                   (rule "concrete_and_2" (formula "37"))
                                                   (rule "false_right" (formula "37"))
                                                   (rule "inEqSimp_geqRight" (formula "36"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "29") (inst "t=m_0_13"))
                                                   (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "29") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "29") (term "0"))
                                                   (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "37"))
                                                   (rule "concrete_or_2" (formula "29"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "allLeft" (formula "17") (inst "t=m_0_13"))
                                                   (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "17") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "17") (term "0"))
                                                   (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "38"))
                                                   (rule "concrete_or_2" (formula "17"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_13"))
                                                   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "39"))
                                                   (rule "concrete_or_2" (formula "15") (term "0"))
                                                   (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "15") (term "0"))
                                                   (rule "concrete_or_2" (formula "15"))
                                                   (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "15"))
                                                   (rule "inEqSimp_homoInEq1" (formula "15"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                                   (rule "add_literals" (formula "15") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0"))
                                                   (rule "add_literals" (formula "15") (term "0"))
                                                   (rule "leq_literals" (formula "15"))
                                                   (rule "closeFalse" (formula "15"))
                                                )
                                             )
                                             (branch " CUT: m_0_13.playerRow >= 0 FALSE"
                                                (rule "concrete_and_2" (formula "36"))
                                                (rule "false_right" (formula "36"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "16") (inst "t=m_0_13"))
                                                (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "16") (term "1,0"))
                                                (rule "concrete_or_4" (formula "16") (term "0"))
                                                (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "36"))
                                                (rule "concrete_or_2" (formula "16"))
                                                (rule "notLeft" (formula "16"))
                                                (rule "allLeft" (formula "14") (inst "t=m_0_13"))
                                                (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "37"))
                                                (rule "concrete_or_2" (formula "14") (term "0"))
                                                (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "14") (term "0"))
                                                (rule "concrete_or_2" (formula "14"))
                                                (rule "allLeft" (formula "9") (inst "t=m_0_13"))
                                                (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "9") (term "1,0"))
                                                (rule "concrete_or_4" (formula "9") (term "0"))
                                                (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "38"))
                                                (rule "concrete_or_2" (formula "9"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "9") (term "0"))
                                                (rule "concrete_and_2" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch " CUT: m_0_13.playerCol >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "35") (term "1,1"))
                                             (rule "concrete_and_4" (formula "35") (term "1"))
                                             (rule "concrete_and_4" (formula "35"))
                                             (rule "false_right" (formula "35"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "10") (inst "t=m_0_13"))
                                             (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "10") (term "1,0"))
                                             (rule "concrete_or_4" (formula "10") (term "0"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "10"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (rule "concrete_and_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch " self.maze[self.playerRow][1 + self.playerCol] = 1 FALSE"
                                          (rule "ifElseSplit" (formula "34"))
                                          (branch " if b_38 true"
                                             (builtin "Update Simplification" (formula "35"))
                                             (builtin "Update Simplification" (formula "1"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "assignment_instance_field_of_this" (formula "34") (term "3"))
                                             (builtin "Update Simplification" (formula "34"))
                                             (rule "assignment_instance_field_of_this" (formula "34") (term "2"))
                                             (builtin "Update Simplification" (formula "34"))
                                             (rule "methodCallReturn" (formula "34") (term "3"))
                                             (rule "assignment_instance_field_of_this" (formula "34") (term "3"))
                                             (builtin "Update Simplification" (formula "34"))
                                             (rule "methodCallEmpty" (formula "34") (term "3"))
                                             (rule "tryEmpty" (formula "34") (term "3"))
                                             (builtin "Update Simplification" (formula "34"))
                                             (rule "castDelInt" (formula "34") (term "1"))
                                             (rule "emptyModality" (formula "34") (term "2"))
                                             (builtin "Update Simplification" (formula "34"))
                                             (rule "allRight" (formula "34") (inst "sk=m_0_7"))
                                             (rule "orRight" (formula "34"))
                                             (rule "orRight" (formula "34"))
                                             (rule "notRight" (formula "34"))
                                             (rule "eqSymm" (formula "36") (term "0,1,1,0,1,1,1"))
                                             (rule "eqSymm" (formula "36") (term "0,1,0,0,1,1,1,1"))
                                             (rule "eqSymm" (formula "36") (term "0,0,0,1,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,1,1"))
                                             (rule "polySimp_addComm1" (formula "36") (term "0,0,1,1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,1,1,1"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,1,1"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,1,1,1"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,1,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,1,1"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1,1,1"))
                                             (rule "ifthenelse_split" (formula "36") (term "1,0,0,1,1,1,1"))
                                             (branch " self = m_0_7 TRUE"
                                                (rule "castDelInt" (formula "37") (term "1,0,0,1,1,1,1"))
                                                (rule "replace_known_left" (formula "37") (term "0,0,0,1,1,1") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "37") (term "0,0,1,1,1"))
                                                (rule "castDelInt" (formula "37") (term "0,0,1,1,1"))
                                                (rule "replace_known_left" (formula "37") (term "0,0,0,1,1") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "37") (term "0,0,1,1"))
                                                (rule "castDelInt" (formula "37") (term "0,0,1,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1,1,1"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,1,1,1"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1,1"))
                                                (rule "polySimp_addComm1" (formula "37") (term "0,0,0,1,1,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0,1,1,1"))
                                                (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "37") (term "0,0,1,0,0,1,1,1") (ifseqformula "1"))
                                                (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1,1"))
                                                (rule "applyEq" (formula "33") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "11") (term "0,1,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "19") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "21") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "37") (term "0,1,0,0,1,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "19") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                                                (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "5"))
                                                (rule "concrete_and_1" (formula "37"))
                                                (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "19") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "26") (term "0,0,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "22") (term "0,1,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "26") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "22") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "17") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "23") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "23") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
                                                (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "11"))
                                                (rule "concrete_and_1" (formula "37"))
                                                (rule "applyEq" (formula "23") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "36") (term "0,1,1") (ifseqformula "34"))
                                                (rule "concrete_not_2" (formula "36") (term "1,1"))
                                                (rule "concrete_and_3" (formula "36") (term "1"))
                                                (rule "applyEq" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "17") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "17") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "24") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "23") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "24") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "34") (term "0,1,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "24") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0"))
                                                (rule "mul_literals" (formula "35") (term "1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1"))
                                                (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "4"))
                                                (rule "concrete_and_3" (formula "35"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (rule "concrete_and_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch " self = m_0_7 FALSE"
                                                (rule "replace_known_right" (formula "37") (term "0,0,0,1,1,1") (ifseqformula "36"))
                                                (rule "ifthenelse_false" (formula "37") (term "0,0,1,1,1"))
                                                (rule "replace_known_right" (formula "37") (term "0,0,0,1,1") (ifseqformula "36"))
                                                (rule "ifthenelse_false" (formula "37") (term "0,0,1,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1,1,1"))
                                                (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,1,1,1"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,1,1,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,1,1,1"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,1,1,1"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch " CUT: m_0_7.playerRow >= 0 TRUE"
                                                   (rule "concrete_and_1" (formula "38"))
                                                   (rule "allLeft" (formula "9") (inst "t=m_0_7"))
                                                   (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "9") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "9") (term "0"))
                                                   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "37"))
                                                   (rule "concrete_or_2" (formula "9"))
                                                   (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "9"))
                                                   (rule "concrete_and_1" (formula "39") (term "1"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_7"))
                                                   (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "15") (term "0"))
                                                   (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "38"))
                                                   (rule "concrete_or_2" (formula "15"))
                                                   (rule "notLeft" (formula "15"))
                                                   (rule "replace_known_right" (formula "40") (term "0,1,1") (ifseqformula "32"))
                                                   (rule "concrete_not_2" (formula "40") (term "1,1"))
                                                   (rule "concrete_and_3" (formula "40") (term "1"))
                                                   (rule "allLeft" (formula "14") (inst "t=m_0_7"))
                                                   (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "14") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "14") (term "0"))
                                                   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "39"))
                                                   (rule "concrete_or_2" (formula "14"))
                                                   (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "14"))
                                                   (rule "concrete_and_3" (formula "41"))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "31") (inst "t=m_0_7"))
                                                   (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "41"))
                                                   (rule "concrete_or_2" (formula "31") (term "0"))
                                                   (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "3"))
                                                   (rule "concrete_not_1" (formula "31") (term "0"))
                                                   (rule "concrete_or_2" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "allLeft" (formula "14") (inst "t=m_0_7"))
                                                   (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "14") (term "0"))
                                                   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "3"))
                                                   (rule "concrete_not_1" (formula "14") (term "0"))
                                                   (rule "concrete_or_2" (formula "14"))
                                                   (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "14"))
                                                   (rule "inEqSimp_homoInEq1" (formula "14"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                                   (rule "add_literals" (formula "14") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "14") (term "1,0"))
                                                   (rule "add_zero_right" (formula "14") (term "0"))
                                                   (rule "leq_literals" (formula "14"))
                                                   (rule "closeFalse" (formula "14"))
                                                )
                                                (branch " CUT: m_0_7.playerRow >= 0 FALSE"
                                                   (rule "concrete_and_2" (formula "38"))
                                                   (rule "false_right" (formula "38"))
                                                   (rule "inEqSimp_geqRight" (formula "37"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "7") (inst "t=m_0_7"))
                                                   (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "7") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "7") (term "0"))
                                                   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "37"))
                                                   (rule "concrete_or_2" (formula "7"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (rule "concrete_and_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                          )
                                          (branch " if b_38 false"
                                             (rule "false_to_not_true" (formula "1") (term "4"))
                                             (builtin "Update Simplification" (formula "35"))
                                             (builtin "Update Simplification" (formula "1"))
                                             (rule "boolean_equal" (formula "1") (term "0"))
                                             (rule "concrete_not_1" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                    (branch " Null Reference (var_5 = null)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "close" (formula "28") (ifseqformula "1"))
                                    )
                                    (branch " Index Out of Bounds (var_5 != null, but newCol_9 Out of Bounds!)"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "castDelInt" (formula "1") (term "0,1"))
                                       (rule "castDelInt" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0"))
                                       (rule "concrete_or_2" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " Null Reference (maze = null)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "close" (formula "29") (ifseqformula "1"))
                                 )
                                 (branch " Index Out of Bounds (maze != null, but newRow_9 Out of Bounds!)"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (rule "concrete_and_2" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                              (branch " self.maze[self.playerRow].length >= 2 + self.playerCol FALSE"
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                 (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,0"))
                                 (rule "times_zero_1" (formula "11") (term "0"))
                                 (rule "leq_literals" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "9"))
                                 (rule "array_length_non_negative_3" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "2") (ifseqformula "6") (ifseqformula "26"))
                                 (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "26") (term "0") (ifseqformula "6") (ifseqformula "2") (ifseqformula "26"))
                                 (rule "ifElseSplit" (formula "31"))
                                 (branch " if b_40 true"
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch " if b_40 false"
                                    (rule "false_to_not_true" (formula "1") (term "6"))
                                    (builtin "Update Simplification" (formula "32"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                    (rule "concrete_not_2" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockReturn" (formula "31") (term "3"))
                                    (rule "methodCallReturn" (formula "31") (term "3"))
                                    (rule "assignment" (formula "31") (term "3"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (rule "methodCallEmpty" (formula "31") (term "4"))
                                    (rule "blockEmpty" (formula "31") (term "4"))
                                    (rule "assignment" (formula "31") (term "4"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (rule "ifElseSplit" (formula "31"))
                                    (branch " if b_38 true"
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch " if b_38 false"
                                       (rule "false_to_not_true" (formula "1") (term "4"))
                                       (builtin "Update Simplification" (formula "32"))
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                       (rule "concrete_not_2" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockReturn" (formula "31") (term "1"))
                                       (rule "methodCallReturn" (formula "31") (term "1"))
                                       (rule "assignment" (formula "31") (term "1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "methodCallEmpty" (formula "31") (term "1"))
                                       (rule "tryEmpty" (formula "31") (term "1"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "emptyModality" (formula "31"))
                                       (rule "allRight" (formula "31") (inst "sk=m_0_11"))
                                       (rule "orRight" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "notRight" (formula "31"))
                                       (rule "cut_direct" (formula "33") (term "0,1,1"))
                                       (branch " CUT: m_0_11.playerCol >= 0 TRUE"
                                          (rule "concrete_and_1" (formula "34") (term "1,1"))
                                          (rule "cut_direct" (formula "34") (term "0"))
                                          (branch " CUT: m_0_11.playerRow >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "35"))
                                             (rule "cut_direct" (formula "35") (term "0"))
                                             (branch " CUT: m_0_11.maze.length >= 1 + m_0_11.playerRow TRUE"
                                                (rule "concrete_and_1" (formula "36"))
                                                (rule "cut_direct" (formula "36") (term "0"))
                                                (branch " CUT:    m_0_11.maze[m_0_11.playerRow].length
>= 1
 + m_0_11.playerCol TRUE"
                                                   (rule "concrete_and_1" (formula "37"))
                                                   (rule "notRight" (formula "37"))
                                                   (rule "allLeft" (formula "29") (inst "t=m_0_11"))
                                                   (rule "replace_known_left" (formula "29") (term "0,1,0,0,0") (ifseqformula "6"))
                                                   (rule "concrete_not_1" (formula "29") (term "1,0,0,0"))
                                                   (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "29") (term "1,0,0,0") (ifseqformula "38"))
                                                   (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                                   (rule "allLeft" (formula "29") (inst "t=m_0_11.playerRow@(maze.Maze)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "29") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "29") (term "0,0"))
                                                   (rule "concrete_or_2" (formula "29") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "29") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "29") (term "0"))
                                                   (rule "concrete_or_2" (formula "29"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "allLeft" (formula "18") (inst "t=m_0_11"))
                                                   (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "1"))
                                                   (rule "concrete_not_1" (formula "18") (term "1"))
                                                   (rule "concrete_or_4" (formula "18"))
                                                   (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "6"))
                                                   (rule "concrete_not_1" (formula "18") (term "1"))
                                                   (rule "concrete_or_4" (formula "18"))
                                                   (rule "close" (formula "40") (ifseqformula "18"))
                                                )
                                                (branch " CUT:    m_0_11.maze[m_0_11.playerRow].length
>= 1
 + m_0_11.playerCol FALSE"
                                                   (rule "concrete_and_2" (formula "37"))
                                                   (rule "false_right" (formula "37"))
                                                   (rule "inEqSimp_geqRight" (formula "36"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "28") (inst "t=m_0_11"))
                                                   (rule "replace_known_right" (formula "28") (term "1,0,0,0,0") (ifseqformula "37"))
                                                   (rule "concrete_or_4" (formula "28") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "5"))
                                                   (rule "concrete_not_1" (formula "28") (term "1,0,0,0"))
                                                   (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                                   (rule "allLeft" (formula "28") (inst "t=m_0_11.playerRow@(maze.Maze)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "3"))
                                                   (rule "qeq_literals" (formula "28") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "28") (term "0,0"))
                                                   (rule "concrete_or_2" (formula "28") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                                                   (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "28") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "28") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "28") (term "0"))
                                                   (rule "concrete_or_2" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "allLeft" (formula "16") (inst "t=m_0_11"))
                                                   (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "concrete_not_1" (formula "16") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "16") (term "0"))
                                                   (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "39"))
                                                   (rule "concrete_or_2" (formula "16"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch " CUT: m_0_11.maze.length >= 1 + m_0_11.playerRow FALSE"
                                                (rule "concrete_and_2" (formula "36"))
                                                (rule "false_right" (formula "36"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "15") (inst "t=m_0_11"))
                                                (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                (rule "concrete_or_4" (formula "15") (term "0"))
                                                (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "36"))
                                                (rule "concrete_or_2" (formula "15"))
                                                (rule "allLeft" (formula "17") (inst "t=m_0_11"))
                                                (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "37"))
                                                (rule "concrete_or_2" (formula "17") (term "0"))
                                                (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "17") (term "0"))
                                                (rule "concrete_or_2" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "allLeft" (formula "29") (inst "t=m_0_11"))
                                                (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "38"))
                                                (rule "concrete_or_2" (formula "29") (term "0"))
                                                (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "29") (term "0"))
                                                (rule "concrete_or_2" (formula "29"))
                                                (rule "notLeft" (formula "29"))
                                                (rule "allLeft" (formula "13") (inst "t=m_0_11"))
                                                (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "39"))
                                                (rule "concrete_or_2" (formula "13") (term "0"))
                                                (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "13") (term "0"))
                                                (rule "concrete_or_2" (formula "13"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "13"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_literals" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch " CUT: m_0_11.playerRow >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "35"))
                                             (rule "false_right" (formula "35"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "14") (inst "t=m_0_11"))
                                             (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "14") (term "0"))
                                             (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "14") (term "0"))
                                             (rule "concrete_or_2" (formula "14"))
                                             (rule "allLeft" (formula "16") (inst "t=m_0_11"))
                                             (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "36"))
                                             (rule "concrete_or_2" (formula "16") (term "0"))
                                             (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "16") (term "0"))
                                             (rule "concrete_or_2" (formula "16"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "allLeft" (formula "7") (inst "t=m_0_11"))
                                             (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "37"))
                                             (rule "concrete_or_2" (formula "7") (term "0"))
                                             (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "7") (term "0"))
                                             (rule "concrete_or_2" (formula "7"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "7") (term "0"))
                                             (rule "concrete_and_2" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                       (branch " CUT: m_0_11.playerCol >= 0 FALSE"
                                          (rule "concrete_and_2" (formula "34") (term "1,1"))
                                          (rule "concrete_and_4" (formula "34") (term "1"))
                                          (rule "concrete_and_4" (formula "34"))
                                          (rule "false_right" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "13") (inst "t=m_0_11"))
                                          (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "34"))
                                          (rule "concrete_or_2" (formula "13") (term "0"))
                                          (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "13") (term "0"))
                                          (rule "concrete_or_2" (formula "13"))
                                          (rule "allLeft" (formula "15") (inst "t=m_0_11"))
                                          (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "35"))
                                          (rule "concrete_or_2" (formula "15") (term "0"))
                                          (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "15") (term "0"))
                                          (rule "concrete_or_2" (formula "15"))
                                          (rule "notLeft" (formula "15"))
                                          (rule "allLeft" (formula "6") (inst "t=m_0_11"))
                                          (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "6") (term "1,0"))
                                          (rule "concrete_or_4" (formula "6") (term "0"))
                                          (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "36"))
                                          (rule "concrete_or_2" (formula "6"))
                                          (rule "allLeft" (formula "9") (inst "t=m_0_11"))
                                          (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "37"))
                                          (rule "concrete_or_2" (formula "9") (term "0"))
                                          (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "9") (term "0"))
                                          (rule "concrete_or_2" (formula "9"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (rule "concrete_and_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch " Null Reference (var_3 = null)"
                              (builtin "Update Simplification" (formula "30"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "close" (formula "26") (ifseqformula "1"))
                           )
                        )
                        (branch " Null Reference (maze = null)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "close" (formula "27") (ifseqformula "1"))
                        )
                        (branch " Index Out of Bounds (maze != null, but newRow_9 Out of Bounds!)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "blockThrow" (formula "30") (term "6"))
                           (builtin "Update Simplification" (formula "30"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_literals" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (rule "concrete_and_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch " Null Reference (maze = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "close" (formula "26") (ifseqformula "1"))
                     )
                  )
               )
               (branch " self.playerRow >= 0 FALSE"
                  (rule "inEqSimp_geqRight" (formula "14"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "compound_assignment_1" (formula "15") (term "6"))
                  (rule "allLeft" (formula "5") (inst "t=self"))
                  (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "15"))
                  (rule "concrete_or_2" (formula "5") (term "0"))
                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "14"))
                  (rule "concrete_not_1" (formula "5") (term "0"))
                  (rule "concrete_or_2" (formula "5"))
                  (rule "allLeft" (formula "7") (inst "t=self"))
                  (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "16"))
                  (rule "concrete_or_2" (formula "7") (term "0"))
                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "15"))
                  (rule "concrete_not_1" (formula "7") (term "0"))
                  (rule "concrete_or_2" (formula "7"))
                  (rule "allLeft" (formula "9") (inst "t=self"))
                  (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "16"))
                  (rule "concrete_not_1" (formula "9") (term "1,0"))
                  (rule "concrete_or_4" (formula "9") (term "0"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
                  (rule "concrete_or_2" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "allLeft" (formula "3") (inst "t=self"))
                  (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "18"))
                  (rule "concrete_or_2" (formula "3") (term "0"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "16"))
                  (rule "concrete_not_1" (formula "3") (term "0"))
                  (rule "concrete_or_2" (formula "3"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                  (rule "concrete_and_2" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
         )
         (branch " direction = 3 FALSE"
            (rule "castDelInt" (formula "12") (term "1,0,2,0,1,1"))
            (rule "add_zero_right" (formula "12") (term "0,2,0,1,1"))
            (rule "castDelInt" (formula "12") (term "2,0,1,1"))
            (rule "replace_known_right" (formula "12") (term "0,1,0,2,0,0,1,1,0") (ifseqformula "14"))
            (rule "ifthenelse_false" (formula "12") (term "1,0,2,0,0,1,1,0"))
            (rule "castDelInt" (formula "12") (term "1,0,2,0,0,1,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,2,0,0,1,1,0"))
            (rule "castDelInt" (formula "12") (term "2,0,0,1,1,0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "14"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "1"))
            (rule "mul_literals" (formula "14") (term "1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0"))
            (rule "qeq_literals" (formula "14") (term "0"))
            (rule "concrete_and_2" (formula "14"))
            (rule "false_right" (formula "14"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "15"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "1"))
            (rule "mul_literals" (formula "15") (term "1,0,0"))
            (rule "add_literals" (formula "15") (term "0,0"))
            (rule "qeq_literals" (formula "15") (term "0"))
            (rule "concrete_and_2" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "ifthenelse_split" (formula "12") (term "1,0,1,0,1,1"))
            (branch " direction = 1 TRUE"
               (rule "castDelInt" (formula "13") (term "1,0,1,0,1,1"))
               (rule "replace_known_left" (formula "13") (term "0,1,0,1,0,0,1,1,0") (ifseqformula "12"))
               (rule "ifthenelse_true" (formula "13") (term "1,0,1,0,0,1,1,0"))
               (rule "castDelInt" (formula "13") (term "1,0,1,0,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,0,1,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,1,1,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "11"))
               (rule "qeq_literals" (formula "12") (term "0,1"))
               (rule "concrete_and_1" (formula "12") (term "1"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "11"))
               (rule "equal_literals" (formula "14"))
               (rule "false_right" (formula "14"))
               (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "11"))
               (rule "qeq_literals" (formula "12") (term "0,1,0"))
               (rule "concrete_and_1" (formula "12") (term "1,0"))
               (rule "neq_or_4" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "methodBodyExpand" (formula "14") (term "2"))
               (rule "variableDeclarationAssign" (formula "14") (term "2"))
               (rule "variableDeclaration" (formula "14") (term "2") (newnames "newRow_5"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "variableDeclarationAssign" (formula "14") (term "3"))
               (rule "variableDeclaration" (formula "14") (term "3") (newnames "newCol_5"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
               (builtin "Update Simplification" (formula "14"))
               (rule "switch" (formula "14") (term "4"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "_var_4"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "castDelInt" (formula "14") (term "0"))
               (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_6"))
               (rule "equality_comparison_new" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "insert_constant_value" (formula "14") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "castDelInt" (formula "14") (term "0,0,0"))
               (rule "equal_literals" (formula "14") (term "0,0"))
               (rule "concrete_not_2" (formula "14") (term "0"))
               (rule "ifthenelse_true_for" (formula "14"))
               (rule "if" (formula "14") (term "5"))
               (builtin "Update Simplification" (formula "14"))
               (rule "boolean_not_equal_2" (formula "14") (term "0"))
               (rule "ifthenelse_false_for" (formula "14"))
               (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_7"))
               (rule "equality_comparison_new" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "insert_constant_value" (formula "14") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "castDelInt" (formula "14") (term "0,0,0"))
               (rule "eqClose" (formula "14") (term "0,0"))
               (rule "concrete_not_1" (formula "14") (term "0"))
               (rule "ifthenelse_false_for" (formula "14"))
               (rule "ifSplit" (formula "14"))
               (branch " if b_7 true"
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignmentAdditionInt" (formula "14") (term "4"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "blockBreakNoLabel" (formula "14") (term "4"))
                  (rule "translateJavaAddInt" (formula "14") (term "3"))
                  (rule "polySimp_addComm0" (formula "14") (term "3"))
                  (rule "blockBreakLabel" (formula "14") (term "4"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "blockEmpty" (formula "14") (term "3"))
                  (rule "ifElseUnfold" (formula "14") (term "3") (inst "#boolv=b"))
                  (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_47"))
                  (rule "methodCallWithAssignmentWithinClass" (formula "14") (term "3") (inst "#v0=b_48"))
                  (rule "variableDeclaration" (formula "14") (term "3") (newnames "b_48"))
                  (rule "variableDeclarationAssign" (formula "14") (term "3"))
                  (rule "variableDeclaration" (formula "14") (term "3") (newnames "newRow_10"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "variableDeclarationAssign" (formula "14") (term "4"))
                  (rule "variableDeclaration" (formula "14") (term "4") (newnames "newCol_10"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "castDelInt" (formula "14") (term "3"))
                  (rule "methodBodyExpand" (formula "14") (term "5"))
                  (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_49"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_49"))
                  (rule "compound_assignment_3" (formula "14") (term "5"))
                  (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_50"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_50"))
                  (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_51"))
                  (rule "variableDeclarationAssign" (formula "14") (term "5"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_51"))
                  (rule "evaluate_lazy_and" (formula "14") (term "5"))
                  (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_52"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_52"))
                  (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_53"))
                  (rule "variableDeclarationAssign" (formula "14") (term "5"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_53"))
                  (rule "remove_parentheses_right" (formula "14") (term "5"))
                  (rule "evaluate_lazy_and" (formula "14") (term "5"))
                  (rule "ifElseUnfold" (formula "14") (term "5") (inst "#boolv=b_54"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_54"))
                  (rule "compound_assignment_2" (formula "14") (term "5") (inst "#v=b_55"))
                  (rule "variableDeclarationAssign" (formula "14") (term "5"))
                  (rule "variableDeclaration" (formula "14") (term "5") (newnames "b_55"))
                  (rule "remove_parentheses_right" (formula "14") (term "5"))
                  (rule "greater_equal_than_comparison_new" (formula "14") (term "5"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "5,1"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "5,2"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "castDelInt" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0"))
                  (rule "mul_literals" (formula "14") (term "1,0"))
                  (rule "ifthenelse_split_for" (formula "14"))
                  (branch " self.playerRow >= -1 TRUE"
                     (rule "compound_assignment_1" (formula "15") (term "6"))
                     (rule "allLeft" (formula "6") (inst "t=self"))
                     (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "14"))
                     (rule "concrete_not_1" (formula "6") (term "1,0"))
                     (rule "concrete_or_4" (formula "6") (term "0"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "15"))
                     (rule "concrete_or_2" (formula "6"))
                     (rule "allLeft" (formula "3") (inst "t=self"))
                     (rule "replace_known_left" (formula "3") (term "0,1,0") (ifseqformula "15"))
                     (rule "concrete_not_1" (formula "3") (term "1,0"))
                     (rule "concrete_or_4" (formula "3") (term "0"))
                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "16"))
                     (rule "concrete_or_2" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "3"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (rule "concrete_or_1" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "allLeft" (formula "12") (inst "t=self"))
                     (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "16"))
                     (rule "concrete_or_2" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "15"))
                     (rule "concrete_not_1" (formula "12") (term "0"))
                     (rule "concrete_or_2" (formula "12"))
                     (rule "notLeft" (formula "12"))
                     (rule "allLeft" (formula "4") (inst "t=self"))
                     (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "17"))
                     (rule "concrete_or_2" (formula "4") (term "0"))
                     (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "15"))
                     (rule "concrete_not_1" (formula "4") (term "0"))
                     (rule "concrete_or_2" (formula "4"))
                     (rule "allLeft" (formula "9") (inst "t=self"))
                     (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "16"))
                     (rule "concrete_not_1" (formula "9") (term "1,0"))
                     (rule "concrete_or_4" (formula "9") (term "0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "allLeft" (formula "6") (inst "t=self"))
                     (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "16"))
                     (rule "concrete_not_1" (formula "6") (term "1,0"))
                     (rule "concrete_or_4" (formula "6") (term "0"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "19"))
                     (rule "concrete_or_2" (formula "6"))
                     (rule "ifElse" (formula "20") (term "6"))
                     (builtin "Update Simplification" (formula "20"))
                     (rule "boolean_equal" (formula "20") (term "0"))
                     (rule "ifthenelse_true_for" (formula "20"))
                     (rule "assignment_instance_field_of_this" (formula "20") (term "5"))
                     (builtin "Update Simplification" (formula "20"))
                     (rule "allLeft" (formula "11") (inst "t=self"))
                     (rule "replace_known_right" (formula "11") (term "1,0,0,0,0,0,0") (ifseqformula "20"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "17"))
                     (rule "concrete_not_1" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "concrete_or_4" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
                     (rule "allLeft" (formula "13") (inst "t=self"))
                     (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
                     (rule "concrete_not_1" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
                     (rule "replace_known_right" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "21"))
                     (rule "concrete_or_4" (formula "13") (term "0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
                     (rule "allLeft" (formula "15") (inst "t=self"))
                     (rule "replace_known_left" (formula "15") (term "0,1,0,0,0") (ifseqformula "19"))
                     (rule "concrete_not_1" (formula "15") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "15") (term "0,0,0"))
                     (rule "replace_known_right" (formula "15") (term "1,0,0,0") (ifseqformula "22"))
                     (rule "concrete_or_4" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
                     (rule "ifElseSplit" (formula "23"))
                     (branch " if b_54 true"
                        (builtin "Update Simplification" (formula "24"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch " if b_54 false"
                        (rule "false_to_not_true" (formula "1") (term "6"))
                        (builtin "Update Simplification" (formula "24"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "0"))
                        (rule "concrete_not_2" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "elim_double_block_2" (formula "23") (term "5"))
                        (rule "greater_equal_than_comparison_new" (formula "23") (term "5"))
                        (builtin "Update Simplification" (formula "23"))
                        (rule "assignment_instance_field_of_this" (formula "23") (term "5,1"))
                        (builtin "Update Simplification" (formula "23"))
                        (rule "blockEmpty" (formula "23") (term "6,1"))
                        (rule "assignment_instance_field_of_this" (formula "23") (term "5,2"))
                        (builtin "Update Simplification" (formula "23"))
                        (rule "blockEmpty" (formula "23") (term "6,2"))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "4"))
                        (rule "ifthenelse_true_for" (formula "23"))
                        (rule "compound_assignment_1" (formula "23") (term "6"))
                        (rule "allLeft" (formula "11") (inst "t=self.playerRow@(maze.Maze)"))
                        (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "11") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "11") (term "0,0,0"))
                        (rule "allLeft" (formula "14") (inst "t=self.playerRow@(maze.Maze)"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "14") (term "0,1,0,0,0,0"))
                        (rule "concrete_and_2" (formula "14") (term "1,0,0,0,0"))
                        (rule "concrete_or_4" (formula "14") (term "0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "14") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "14") (term "0,0,0"))
                        (rule "allLeft" (formula "17") (inst "t=self.playerRow@(maze.Maze)"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "17") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "17") (term "1,0"))
                        (rule "concrete_or_4" (formula "17") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "17") (term "0,0"))
                        (rule "concrete_and_2" (formula "17") (term "0"))
                        (rule "concrete_or_2" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "ifElse" (formula "26") (term "6"))
                        (builtin "Update Simplification" (formula "26"))
                        (rule "boolean_equal" (formula "26") (term "0"))
                        (rule "ifthenelse_true_for" (formula "26"))
                        (rule "assignment_instance_field_of_this" (formula "26") (term "5"))
                        (builtin "Update Simplification" (formula "26"))
                        (rule "allLeft" (formula "11") (inst "t=self.playerCol@(maze.Maze)"))
                        (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "11") (term "1,0"))
                        (rule "concrete_or_4" (formula "11") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_2" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "allLeft" (formula "15") (inst "t=self.playerCol@(maze.Maze)"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                        (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "15") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "15") (term "1,0"))
                        (rule "concrete_or_4" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "15") (term "0,0"))
                        (rule "concrete_and_2" (formula "15") (term "0"))
                        (rule "concrete_or_2" (formula "15"))
                        (rule "only_created_object_are_referenced_non_null" (formula "8") (term "0,0,0") (ifseqformula "23") (ifseqformula "1") (ifseqformula "26"))
                        (rule "ifElseSplit" (formula "29"))
                        (branch " if b_52 true"
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch " if b_52 false"
                           (rule "false_to_not_true" (formula "1") (term "6"))
                           (builtin "Update Simplification" (formula "30"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "0"))
                           (rule "concrete_not_2" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "elim_double_block_2" (formula "29") (term "5"))
                           (rule "compound_less_than_comparison_2" (formula "29") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                           (rule "variableDeclarationAssign" (formula "29") (term "5"))
                           (rule "variableDeclaration" (formula "29") (term "5") (newnames "j_4"))
                           (rule "assignment_instance_field_of_this" (formula "29") (term "5"))
                           (builtin "Update Simplification" (formula "29"))
                           (rule "variableDeclarationAssign" (formula "29") (term "6"))
                           (rule "variableDeclaration" (formula "29") (term "6") (newnames "j_5"))
                           (rule "castDelInt" (formula "29") (term "1"))
                           (rule "assignment_read_attribute" (formula "29") (term "6"))
                           (branch " Normal Execution (maze != null)"
                              (builtin "Update Simplification" (formula "30"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "less_than_comparison_new" (formula "29") (term "7"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,1"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "blockEmpty" (formula "29") (term "6,1"))
                              (rule "assignment_instance_field_of_this" (formula "29") (term "5,2"))
                              (builtin "Update Simplification" (formula "29"))
                              (rule "blockEmpty" (formula "29") (term "6,2"))
                              (rule "castDelInt" (formula "29") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,0"))
                              (rule "ifthenelse_split_for" (formula "29"))
                              (branch " self.maze.length >= 2 + self.playerRow TRUE"
                                 (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                 (rule "concrete_or_1" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "compound_assignment_1" (formula "29") (term "6"))
                                 (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "13") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "2") (ifseqformula "25"))
                                 (rule "ifElseSplit" (formula "30"))
                                 (branch " if b_51 true"
                                    (builtin "Update Simplification" (formula "31"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_equal" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment_instance_field_of_this" (formula "30") (term "5"))
                                    (builtin "Update Simplification" (formula "30"))
                                    (rule "ifElse" (formula "30") (term "6"))
                                    (builtin "Update Simplification" (formula "30"))
                                    (rule "boolean_not_equal_2" (formula "30") (term "0"))
                                    (rule "ifthenelse_false_for" (formula "30"))
                                    (rule "compound_less_than_comparison_2" (formula "30") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
                                    (rule "variableDeclarationAssign" (formula "30") (term "5"))
                                    (rule "variableDeclaration" (formula "30") (term "5") (newnames "j_15"))
                                    (rule "assignment_instance_field_of_this" (formula "30") (term "5"))
                                    (builtin "Update Simplification" (formula "30"))
                                    (rule "variableDeclarationAssign" (formula "30") (term "6"))
                                    (rule "variableDeclaration" (formula "30") (term "6") (newnames "j_16"))
                                    (rule "eval_order_array_access6" (formula "30") (term "6") (inst "#v0=var"))
                                    (rule "variableDeclarationAssign" (formula "30") (term "6"))
                                    (rule "variableDeclaration" (formula "30") (term "6") (newnames "var_4"))
                                    (rule "assignment_array2" (formula "30") (term "6"))
                                    (branch " Normal Execution (maze != null)"
                                       (builtin "Update Simplification" (formula "31"))
                                       (builtin "Update Simplification" (formula "30"))
                                       (rule "orRight" (formula "30"))
                                       (rule "orRight" (formula "30"))
                                       (rule "castDelInt" (formula "32") (term "1,6"))
                                       (rule "castDelInt" (formula "31") (term "0"))
                                       (rule "castDelInt" (formula "30") (term "1"))
                                       (rule "inEqSimp_ltRight" (formula "31"))
                                       (rule "times_zero_1" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "31"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                       (rule "concrete_or_1" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment_read_attribute" (formula "30") (term "7"))
                                       (branch " Normal Execution (var_4 != null)"
                                          (builtin "Update Simplification" (formula "31"))
                                          (builtin "Update Simplification" (formula "30"))
                                          (rule "less_than_comparison_new" (formula "31") (term "7"))
                                          (builtin "Update Simplification" (formula "31"))
                                          (rule "assignment_instance_field_of_this" (formula "31") (term "5,2"))
                                          (builtin "Update Simplification" (formula "31"))
                                          (rule "assignment_instance_field_of_this" (formula "31") (term "5,1"))
                                          (builtin "Update Simplification" (formula "31"))
                                          (rule "blockEmpty" (formula "31") (term "6,1"))
                                          (rule "blockEmpty" (formula "31") (term "6,2"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,0"))
                                          (rule "ifthenelse_split_for" (formula "31"))
                                          (branch "    self.maze[1 + self.playerRow].length
>= 1
 + self.playerCol TRUE"
                                             (rule "array_length_non_negative_3" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "3") (ifseqformula "9") (ifseqformula "29"))
                                             (rule "ifElseSplit" (formula "33"))
                                             (branch " if b_49 true"
                                                (builtin "Update Simplification" (formula "34"))
                                                (builtin "Update Simplification" (formula "1"))
                                                (rule "boolean_equal" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "returnUnfold" (formula "33") (term "5") (inst "#v0=b_49"))
                                                (rule "variableDeclarationAssign" (formula "33") (term "5"))
                                                (rule "variableDeclaration" (formula "33") (term "5") (newnames "b_72"))
                                                (rule "compound_inequality_comparison_1" (formula "33") (term "5") (inst "#v0=j"))
                                                (rule "variableDeclarationAssign" (formula "33") (term "5"))
                                                (rule "variableDeclaration" (formula "33") (term "5") (newnames "j_18"))
                                                (rule "eval_order_array_access4" (formula "33") (term "5") (inst "#v0=var"))
                                                (rule "variableDeclarationAssign" (formula "33") (term "5"))
                                                (rule "variableDeclaration" (formula "33") (term "5") (newnames "var_6"))
                                                (rule "assignment_array2" (formula "33") (term "5"))
                                                (branch " Normal Execution (maze != null)"
                                                   (builtin "Update Simplification" (formula "34"))
                                                   (builtin "Update Simplification" (formula "33"))
                                                   (rule "orRight" (formula "33"))
                                                   (rule "orRight" (formula "33"))
                                                   (rule "castDelInt" (formula "35") (term "1,4"))
                                                   (rule "castDelInt" (formula "34") (term "0"))
                                                   (rule "castDelInt" (formula "33") (term "1"))
                                                   (rule "inEqSimp_ltRight" (formula "34"))
                                                   (rule "mul_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "34"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                                   (rule "leq_literals" (formula "1") (term "0"))
                                                   (rule "concrete_or_1" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "assignment_array2" (formula "33") (term "5"))
                                                   (branch " Normal Execution (var_6 != null)"
                                                      (builtin "Update Simplification" (formula "34"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "orRight" (formula "33"))
                                                      (rule "orRight" (formula "33"))
                                                      (rule "inEqSimp_ltRight" (formula "34"))
                                                      (rule "times_zero_1" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "33"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                      (rule "mul_literals" (formula "1") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                      (rule "inequality_comparison_new" (formula "33") (term "4"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "insert_constant_value" (formula "33") (term "1,0,0"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "3,1"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "methodCallReturn" (formula "33") (term "4,1"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "3,2"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "4,1"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "methodCallReturn" (formula "33") (term "4,2"))
                                                      (rule "methodCallEmpty" (formula "33") (term "4,1"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "4,2"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "methodCallEmpty" (formula "33") (term "4,2"))
                                                      (rule "blockEmpty" (formula "33") (term "4,1"))
                                                      (rule "blockEmpty" (formula "33") (term "4,2"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "4,1"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "assignment_instance_field_of_this" (formula "33") (term "4,2"))
                                                      (builtin "Update Simplification" (formula "33"))
                                                      (rule "ifthenelse_negated_for" (formula "33"))
                                                      (rule "allLeft" (formula "17") (inst "t=(jint)(1 + self.playerRow@(maze.Maze))"))
                                                      (rule "castDelInt" (formula "17") (term "0,1,0,0,0,0"))
                                                      (rule "castDelInt" (formula "17") (term "0,1,0,0,0"))
                                                      (rule "castDelInt" (formula "17") (term "1,0,0,1,0,0"))
                                                      (rule "castDelInt" (formula "17") (term "1,0,0,1,0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0,0"))
                                                      (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,0,0"))
                                                      (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "1,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0"))
                                                      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                                      (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                                                      (rule "concrete_and_2" (formula "17") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "17") (term "0,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "17") (term "0,1,0,0,0"))
                                                      (rule "concrete_and_2" (formula "17") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "17") (term "0,0,0"))
                                                      (rule "allLeft" (formula "22") (inst "t=(jint)(1 + self.playerRow@(maze.Maze))"))
                                                      (rule "castDelInt" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "castDelInt" (formula "22") (term "0,1,0,0,0,0"))
                                                      (rule "castDelInt" (formula "22") (term "1,0,0,1,0"))
                                                      (rule "castDelInt" (formula "22") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0,0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,1,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,1,0,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,1,0,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "1,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1,0,0,0,0"))
                                                      (rule "concrete_and_2" (formula "22") (term "1,0,0,0,0"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0"))
                                                      (rule "leq_literals" (formula "22") (term "0,1,0,0,0"))
                                                      (rule "concrete_and_2" (formula "22") (term "1,0,0,0"))
                                                      (rule "concrete_or_4" (formula "22") (term "0,0,0"))
                                                      (rule "ifthenelse_split_for" (formula "35"))
                                                      (branch " self.maze[1 + self.playerRow][self.playerCol] = 1 TRUE"
                                                         (rule "array_length_non_negative_3" (formula "11") (term "0") (ifseqformula "4") (ifseqformula "15") (ifseqformula "31"))
                                                         (rule "allLeft" (formula "19") (inst "t=self.playerCol@(maze.Maze)"))
                                                         (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                                         (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "19") (term "1"))
                                                         (rule "concrete_or_3" (formula "19"))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "allLeft" (formula "24") (inst "t=self.playerCol@(maze.Maze)"))
                                                         (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                                         (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "1"))
                                                         (rule "leq_literals" (formula "24") (term "1"))
                                                         (rule "concrete_or_3" (formula "24"))
                                                         (rule "true_left" (formula "24"))
                                                         (rule "ifElse" (formula "37") (term "4"))
                                                         (builtin "Update Simplification" (formula "37"))
                                                         (rule "boolean_not_equal_2" (formula "37") (term "0"))
                                                         (rule "ifthenelse_false_for" (formula "37"))
                                                         (rule "blockReturn" (formula "37") (term "1"))
                                                         (rule "methodCallReturn" (formula "37") (term "1"))
                                                         (rule "assignment_instance_field_of_this" (formula "37") (term "1"))
                                                         (builtin "Update Simplification" (formula "37"))
                                                         (rule "methodCallEmpty" (formula "37") (term "1"))
                                                         (rule "tryEmpty" (formula "37") (term "1"))
                                                         (builtin "Update Simplification" (formula "37"))
                                                         (rule "emptyModality" (formula "37"))
                                                         (rule "allRight" (formula "37") (inst "sk=m_0_8"))
                                                         (rule "orRight" (formula "37"))
                                                         (rule "orRight" (formula "37"))
                                                         (rule "notRight" (formula "37"))
                                                         (rule "cut_direct" (formula "39") (term "0,1,1"))
                                                         (branch " CUT: m_0_8.playerCol >= 0 TRUE"
                                                            (rule "concrete_and_1" (formula "40") (term "1,1"))
                                                            (rule "cut_direct" (formula "40") (term "0"))
                                                            (branch " CUT: m_0_8.playerRow >= 0 TRUE"
                                                               (rule "concrete_and_1" (formula "41"))
                                                               (rule "cut_direct" (formula "41") (term "0"))
                                                               (branch " CUT: m_0_8.maze.length >= 1 + m_0_8.playerRow TRUE"
                                                                  (rule "concrete_and_1" (formula "42"))
                                                                  (rule "cut_direct" (formula "42") (term "0"))
                                                                  (branch " CUT:    m_0_8.maze[m_0_8.playerRow].length
>= 1
 + m_0_8.playerCol TRUE"
                                                                     (rule "concrete_and_1" (formula "43"))
                                                                     (rule "notRight" (formula "43"))
                                                                     (rule "allLeft" (formula "20") (inst "t=m_0_8"))
                                                                     (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "1"))
                                                                     (rule "concrete_not_1" (formula "20") (term "1"))
                                                                     (rule "concrete_or_4" (formula "20"))
                                                                     (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "6"))
                                                                     (rule "concrete_not_1" (formula "20") (term "1"))
                                                                     (rule "concrete_or_4" (formula "20"))
                                                                     (rule "close" (formula "44") (ifseqformula "20"))
                                                                  )
                                                                  (branch " CUT:    m_0_8.maze[m_0_8.playerRow].length
>= 1
 + m_0_8.playerCol FALSE"
                                                                     (rule "concrete_and_2" (formula "43"))
                                                                     (rule "false_right" (formula "43"))
                                                                     (rule "inEqSimp_geqRight" (formula "42"))
                                                                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                                     (rule "allLeft" (formula "18") (inst "t=m_0_8"))
                                                                     (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "43"))
                                                                     (rule "concrete_or_2" (formula "18") (term "0"))
                                                                     (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "5"))
                                                                     (rule "concrete_not_1" (formula "18") (term "0"))
                                                                     (rule "concrete_or_2" (formula "18"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
                                                                     (rule "andLeft" (formula "1"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "1"))
                                                                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                                     (rule "add_literals" (formula "1") (term "1,1,0"))
                                                                     (rule "times_zero_1" (formula "1") (term "1,0"))
                                                                     (rule "add_literals" (formula "1") (term "0"))
                                                                     (rule "leq_literals" (formula "1"))
                                                                     (rule "closeFalse" (formula "1"))
                                                                  )
                                                               )
                                                               (branch " CUT: m_0_8.maze.length >= 1 + m_0_8.playerRow FALSE"
                                                                  (rule "concrete_and_2" (formula "42"))
                                                                  (rule "false_right" (formula "42"))
                                                                  (rule "inEqSimp_geqRight" (formula "41"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                                  (rule "allLeft" (formula "17") (inst "t=m_0_8"))
                                                                  (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "42"))
                                                                  (rule "concrete_or_2" (formula "17") (term "0"))
                                                                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                                                                  (rule "concrete_not_1" (formula "17") (term "0"))
                                                                  (rule "concrete_or_2" (formula "17"))
                                                                  (rule "allLeft" (formula "13") (inst "t=m_0_8"))
                                                                  (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "43"))
                                                                  (rule "concrete_or_2" (formula "13") (term "0"))
                                                                  (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "4"))
                                                                  (rule "concrete_not_1" (formula "13") (term "0"))
                                                                  (rule "concrete_or_2" (formula "13"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                                                                  (rule "andLeft" (formula "13"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "13"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                                                  (rule "add_literals" (formula "13") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "1,0"))
                                                                  (rule "add_literals" (formula "13") (term "0"))
                                                                  (rule "leq_literals" (formula "13"))
                                                                  (rule "closeFalse" (formula "13"))
                                                               )
                                                            )
                                                            (branch " CUT: m_0_8.playerRow >= 0 FALSE"
                                                               (rule "concrete_and_2" (formula "41"))
                                                               (rule "false_right" (formula "41"))
                                                               (rule "inEqSimp_geqRight" (formula "40"))
                                                               (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "allLeft" (formula "16") (inst "t=m_0_8"))
                                                               (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "concrete_not_1" (formula "16") (term "1,0"))
                                                               (rule "concrete_or_4" (formula "16") (term "0"))
                                                               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "41"))
                                                               (rule "concrete_or_2" (formula "16"))
                                                               (rule "allLeft" (formula "12") (inst "t=m_0_8"))
                                                               (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "42"))
                                                               (rule "concrete_or_2" (formula "12") (term "0"))
                                                               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
                                                               (rule "concrete_not_1" (formula "12") (term "0"))
                                                               (rule "concrete_or_2" (formula "12"))
                                                               (rule "allLeft" (formula "9") (inst "t=m_0_8"))
                                                               (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "concrete_not_1" (formula "9") (term "1,0"))
                                                               (rule "concrete_or_4" (formula "9") (term "0"))
                                                               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "43"))
                                                               (rule "concrete_or_2" (formula "9"))
                                                               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "1") (term "0"))
                                                               (rule "concrete_and_2" (formula "1"))
                                                               (rule "closeFalse" (formula "1"))
                                                            )
                                                         )
                                                         (branch " CUT: m_0_8.playerCol >= 0 FALSE"
                                                            (rule "concrete_and_2" (formula "40") (term "1,1"))
                                                            (rule "concrete_and_4" (formula "40") (term "1"))
                                                            (rule "concrete_and_4" (formula "40"))
                                                            (rule "false_right" (formula "40"))
                                                            (rule "inEqSimp_geqRight" (formula "39"))
                                                            (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "mul_literals" (formula "1") (term "1"))
                                                            (rule "allLeft" (formula "15") (inst "t=m_0_8"))
                                                            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "40"))
                                                            (rule "concrete_or_2" (formula "15") (term "0"))
                                                            (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "2"))
                                                            (rule "concrete_not_1" (formula "15") (term "0"))
                                                            (rule "concrete_or_2" (formula "15"))
                                                            (rule "allLeft" (formula "17") (inst "t=m_0_8"))
                                                            (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "41"))
                                                            (rule "concrete_or_2" (formula "17") (term "0"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
                                                            (rule "concrete_not_1" (formula "17") (term "0"))
                                                            (rule "concrete_or_2" (formula "17"))
                                                            (rule "notLeft" (formula "17"))
                                                            (rule "allLeft" (formula "10") (inst "t=m_0_8"))
                                                            (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "2"))
                                                            (rule "concrete_not_1" (formula "10") (term "1,0"))
                                                            (rule "concrete_or_4" (formula "10") (term "0"))
                                                            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "42"))
                                                            (rule "concrete_or_2" (formula "10"))
                                                            (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "10") (term "0"))
                                                            (rule "concrete_and_2" (formula "10"))
                                                            (rule "closeFalse" (formula "10"))
                                                         )
                                                      )
                                                      (branch " self.maze[1 + self.playerRow][self.playerCol] = 1 FALSE"
                                                         (rule "array_length_non_negative_3" (formula "15") (term "1,1,0,0") (ifseqformula "3") (ifseqformula "14") (ifseqformula "30"))
                                                         (rule "allLeft" (formula "18") (inst "t=self.playerCol@(maze.Maze)"))
                                                         (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                                                         (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                                                         (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                                                         (rule "leq_literals" (formula "18") (term "0,1,0"))
                                                         (rule "concrete_and_2" (formula "18") (term "1,0"))
                                                         (rule "concrete_or_4" (formula "18") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "18") (term "0,0"))
                                                         (rule "concrete_and_2" (formula "18") (term "0"))
                                                         (rule "concrete_or_2" (formula "18"))
                                                         (rule "allLeft" (formula "24") (inst "t=self.playerCol@(maze.Maze)"))
                                                         (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                                                         (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                                                         (rule "add_literals" (formula "24") (term "0,0,1,0"))
                                                         (rule "leq_literals" (formula "24") (term "0,1,0"))
                                                         (rule "concrete_and_2" (formula "24") (term "1,0"))
                                                         (rule "concrete_or_4" (formula "24") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "24") (term "0,0"))
                                                         (rule "concrete_and_2" (formula "24") (term "0"))
                                                         (rule "concrete_or_2" (formula "24"))
                                                         (rule "ifElseSplit" (formula "39"))
                                                         (branch " if b_47 true"
                                                            (builtin "Update Simplification" (formula "40"))
                                                            (builtin "Update Simplification" (formula "1"))
                                                            (rule "boolean_equal" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "assignment_instance_field_of_this" (formula "39") (term "3"))
                                                            (builtin "Update Simplification" (formula "39"))
                                                            (rule "assignment_instance_field_of_this" (formula "39") (term "4"))
                                                            (builtin "Update Simplification" (formula "39"))
                                                            (rule "methodCallReturn" (formula "39") (term "3"))
                                                            (rule "assignment_instance_field_of_this" (formula "39") (term "3"))
                                                            (builtin "Update Simplification" (formula "39"))
                                                            (rule "methodCallEmpty" (formula "39") (term "3"))
                                                            (rule "tryEmpty" (formula "39") (term "3"))
                                                            (builtin "Update Simplification" (formula "39"))
                                                            (rule "castDelInt" (formula "39") (term "1"))
                                                            (rule "emptyModality" (formula "39") (term "2"))
                                                            (builtin "Update Simplification" (formula "39"))
                                                            (rule "allRight" (formula "39") (inst "sk=m_0_9"))
                                                            (rule "orRight" (formula "39"))
                                                            (rule "orRight" (formula "39"))
                                                            (rule "notRight" (formula "39"))
                                                            (rule "eqSymm" (formula "41") (term "0,1,1,0,1"))
                                                            (rule "eqSymm" (formula "41") (term "0,0,0"))
                                                            (rule "eqSymm" (formula "41") (term "0,1,0,0,0,1,1,1,1"))
                                                            (rule "eqSymm" (formula "41") (term "0,1,0,0,0,1,1,1"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41") (term "0,1"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0,1"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,1"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                                            (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                                            (rule "ifthenelse_split" (formula "41") (term "0,0"))
                                                            (branch " self = m_0_9 TRUE"
                                                               (rule "castDelInt" (formula "42") (term "0,0"))
                                                               (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,1,1,1") (ifseqformula "1"))
                                                               (rule "ifthenelse_true" (formula "42") (term "1,0,0,0,1,1,1"))
                                                               (rule "castDelInt" (formula "42") (term "1,0,0,0,1,1,1"))
                                                               (rule "replace_known_left" (formula "42") (term "0,0,0,1") (ifseqformula "1"))
                                                               (rule "ifthenelse_true" (formula "42") (term "0,0,1"))
                                                               (rule "castDelInt" (formula "42") (term "0,0,1"))
                                                               (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "1"))
                                                               (rule "ifthenelse_true" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                                               (rule "castDelInt" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                                               (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0,0,1"))
                                                               (rule "polySimp_addAssoc" (formula "42") (term "0,0,1"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0,0,1"))
                                                               (rule "add_literals" (formula "42") (term "0,0,0,0,1"))
                                                               (rule "applyEq" (formula "42") (term "0,1,1,0,0,0,1,1,1,1") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "42") (term "0,0,1,0,0,1") (ifseqformula "1"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                                               (rule "applyEq" (formula "36") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "30") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "28") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "12") (term "0,1,1") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "28") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "28") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "22") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "37") (term "0,1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "18") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "30") (term "0,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "22") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "21") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "25") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "26") (term "0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "27") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "25") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "25") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "25") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "21") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "40") (term "0,1,1") (ifseqformula "8"))
                                                               (rule "concrete_and_1" (formula "40") (term "1,1"))
                                                               (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "27") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "35") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "38") (term "0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "40") (term "0,1,1,1") (ifseqformula "38"))
                                                               (rule "concrete_not_2" (formula "40") (term "1,1,1"))
                                                               (rule "concrete_and_3" (formula "40") (term "1,1"))
                                                               (rule "applyEq" (formula "22") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "27") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "20") (term "0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4"))
                                                               (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                               (rule "applyEq" (formula "21") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "18") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "12") (term "0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "21") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                               (rule "applyEq" (formula "40") (term "0,1,1,0,0,1,1") (ifseqformula "1"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,1"))
                                                               (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                                               (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                                               (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                                               (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0"))
                                                               (rule "mul_literals" (formula "40") (term "1,0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "replace_known_left" (formula "40") (term "1,1") (ifseqformula "3"))
                                                               (rule "concrete_and_3" (formula "40") (term "1"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                               (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "4"))
                                                               (rule "concrete_and_3" (formula "40"))
                                                               (rule "inEqSimp_geqRight" (formula "40"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "7") (term "0"))
                                                               (rule "concrete_and_2" (formula "7"))
                                                               (rule "closeFalse" (formula "7"))
                                                            )
                                                            (branch " self = m_0_9 FALSE"
                                                               (rule "replace_known_right" (formula "42") (term "0,1,0,0,0,1,1,1,1") (ifseqformula "41"))
                                                               (rule "ifthenelse_false" (formula "42") (term "1,0,0,0,1,1,1,1"))
                                                               (rule "replace_known_right" (formula "42") (term "0,1,0,0,0,1,1,1") (ifseqformula "41"))
                                                               (rule "ifthenelse_false" (formula "42") (term "1,0,0,0,1,1,1"))
                                                               (rule "replace_known_right" (formula "42") (term "0,0,0,1") (ifseqformula "41"))
                                                               (rule "ifthenelse_false" (formula "42") (term "0,0,1"))
                                                               (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0,1"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0,1"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1"))
                                                               (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1"))
                                                               (rule "cut_direct" (formula "42") (term "0,1,1"))
                                                               (branch " CUT: m_0_9.playerCol >= 0 TRUE"
                                                                  (rule "concrete_and_1" (formula "43") (term "1,1"))
                                                                  (rule "allLeft" (formula "7") (inst "t=m_0_9"))
                                                                  (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "42"))
                                                                  (rule "concrete_or_2" (formula "7") (term "0"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "2"))
                                                                  (rule "concrete_not_1" (formula "7") (term "0"))
                                                                  (rule "concrete_or_2" (formula "7"))
                                                                  (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "7"))
                                                                  (rule "concrete_and_1" (formula "44"))
                                                                  (rule "allLeft" (formula "33") (inst "t=m_0_9"))
                                                                  (rule "replace_known_left" (formula "33") (term "0,1,0") (ifseqformula "2"))
                                                                  (rule "concrete_not_1" (formula "33") (term "1,0"))
                                                                  (rule "concrete_or_4" (formula "33") (term "0"))
                                                                  (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "43"))
                                                                  (rule "concrete_or_2" (formula "33"))
                                                                  (rule "notLeft" (formula "33"))
                                                                  (rule "allLeft" (formula "15") (inst "t=m_0_9"))
                                                                  (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "2"))
                                                                  (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                                  (rule "concrete_or_4" (formula "15") (term "0"))
                                                                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "44"))
                                                                  (rule "concrete_or_2" (formula "15"))
                                                                  (rule "notLeft" (formula "15"))
                                                                  (rule "replace_known_right" (formula "46") (term "0,1,1") (ifseqformula "36"))
                                                                  (rule "concrete_not_2" (formula "46") (term "1,1"))
                                                                  (rule "concrete_and_3" (formula "46") (term "1"))
                                                                  (rule "allLeft" (formula "14") (inst "t=m_0_9"))
                                                                  (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "2"))
                                                                  (rule "concrete_not_1" (formula "14") (term "1,0"))
                                                                  (rule "concrete_or_4" (formula "14") (term "0"))
                                                                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "45"))
                                                                  (rule "concrete_or_2" (formula "14"))
                                                                  (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "14"))
                                                                  (rule "concrete_and_3" (formula "47"))
                                                                  (rule "inEqSimp_geqRight" (formula "47"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                                  (rule "allLeft" (formula "12") (inst "t=m_0_9"))
                                                                  (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "47"))
                                                                  (rule "concrete_or_2" (formula "12") (term "0"))
                                                                  (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
                                                                  (rule "concrete_not_1" (formula "12") (term "0"))
                                                                  (rule "concrete_or_2" (formula "12"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                                                  (rule "andLeft" (formula "12"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "12"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                                                  (rule "add_literals" (formula "12") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "12") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "12") (term "0"))
                                                                  (rule "leq_literals" (formula "12"))
                                                                  (rule "closeFalse" (formula "12"))
                                                               )
                                                               (branch " CUT: m_0_9.playerCol >= 0 FALSE"
                                                                  (rule "concrete_and_2" (formula "43") (term "1,1"))
                                                                  (rule "concrete_and_4" (formula "43") (term "1"))
                                                                  (rule "concrete_and_4" (formula "43"))
                                                                  (rule "false_right" (formula "43"))
                                                                  (rule "inEqSimp_geqRight" (formula "42"))
                                                                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                                  (rule "add_zero_right" (formula "1") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "mul_literals" (formula "1") (term "1"))
                                                                  (rule "allLeft" (formula "9") (inst "t=m_0_9"))
                                                                  (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "2"))
                                                                  (rule "concrete_not_1" (formula "9") (term "1,0"))
                                                                  (rule "concrete_or_4" (formula "9") (term "0"))
                                                                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "42"))
                                                                  (rule "concrete_or_2" (formula "9"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "9") (term "0"))
                                                                  (rule "concrete_and_2" (formula "9"))
                                                                  (rule "closeFalse" (formula "9"))
                                                               )
                                                            )
                                                         )
                                                         (branch " if b_47 false"
                                                            (rule "false_to_not_true" (formula "1") (term "4"))
                                                            (builtin "Update Simplification" (formula "40"))
                                                            (builtin "Update Simplification" (formula "1"))
                                                            (rule "boolean_equal" (formula "1") (term "0"))
                                                            (rule "concrete_not_1" (formula "1"))
                                                            (rule "closeFalse" (formula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch " Null Reference (var_6 = null)"
                                                      (builtin "Update Simplification" (formula "34"))
                                                      (builtin "Update Simplification" (formula "1"))
                                                      (rule "close" (formula "33") (ifseqformula "1"))
                                                   )
                                                   (branch " Index Out of Bounds (var_6 != null, but newCol_10 Out of Bounds!)"
                                                      (builtin "Update Simplification" (formula "34"))
                                                      (builtin "Update Simplification" (formula "1"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                      (rule "mul_literals" (formula "1") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "1") (term "0,0"))
                                                      (rule "concrete_and_2" (formula "1") (term "0"))
                                                      (rule "concrete_or_2" (formula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (rule "concrete_and_2" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch " Null Reference (maze = null)"
                                                   (builtin "Update Simplification" (formula "34"))
                                                   (builtin "Update Simplification" (formula "1"))
                                                   (rule "close" (formula "31") (ifseqformula "1"))
                                                )
                                                (branch " Index Out of Bounds (maze != null, but newRow_10 Out of Bounds!)"
                                                   (builtin "Update Simplification" (formula "34"))
                                                   (builtin "Update Simplification" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "castDelInt" (formula "1") (term "0,1"))
                                                   (rule "castDelInt" (formula "1") (term "1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                                   (rule "add_literals" (formula "1") (term "0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                   (rule "mul_literals" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "1") (term "0,1"))
                                                   (rule "concrete_and_2" (formula "1") (term "1"))
                                                   (rule "concrete_or_4" (formula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_literals" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                             (branch " if b_49 false"
                                                (rule "false_to_not_true" (formula "1") (term "6"))
                                                (builtin "Update Simplification" (formula "34"))
                                                (builtin "Update Simplification" (formula "1"))
                                                (rule "boolean_equal" (formula "1") (term "0"))
                                                (rule "concrete_not_1" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "    self.maze[1 + self.playerRow].length
>= 1
 + self.playerCol FALSE"
                                             (rule "inEqSimp_geqRight" (formula "31"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "array_length_non_negative_3" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "3") (ifseqformula "9") (ifseqformula "29"))
                                             (rule "ifElseSplit" (formula "33"))
                                             (branch " if b_49 true"
                                                (builtin "Update Simplification" (formula "34"))
                                                (builtin "Update Simplification" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch " if b_49 false"
                                                (rule "false_to_not_true" (formula "1") (term "6"))
                                                (builtin "Update Simplification" (formula "34"))
                                                (builtin "Update Simplification" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                                (rule "concrete_not_2" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "blockReturn" (formula "33") (term "3"))
                                                (rule "methodCallReturn" (formula "33") (term "3"))
                                                (rule "assignment_instance_field_of_this" (formula "33") (term "3"))
                                                (builtin "Update Simplification" (formula "33"))
                                                (rule "methodCallEmpty" (formula "33") (term "4"))
                                                (rule "blockEmpty" (formula "33") (term "4"))
                                                (rule "assignment_instance_field_of_this" (formula "33") (term "4"))
                                                (builtin "Update Simplification" (formula "33"))
                                                (rule "ifElse" (formula "33") (term "4"))
                                                (builtin "Update Simplification" (formula "33"))
                                                (rule "boolean_not_equal_2" (formula "33") (term "0"))
                                                (rule "ifthenelse_false_for" (formula "33"))
                                                (rule "blockReturn" (formula "33") (term "1"))
                                                (rule "methodCallReturn" (formula "33") (term "1"))
                                                (rule "assignment_instance_field_of_this" (formula "33") (term "1"))
                                                (builtin "Update Simplification" (formula "33"))
                                                (rule "methodCallEmpty" (formula "33") (term "1"))
                                                (rule "tryEmpty" (formula "33") (term "1"))
                                                (builtin "Update Simplification" (formula "33"))
                                                (rule "emptyModality" (formula "33"))
                                                (rule "allRight" (formula "33") (inst "sk=m_0_12"))
                                                (rule "orRight" (formula "33"))
                                                (rule "orRight" (formula "33"))
                                                (rule "notRight" (formula "33"))
                                                (rule "cut_direct" (formula "35") (term "0,1,1"))
                                                (branch " CUT: m_0_12.playerCol >= 0 TRUE"
                                                   (rule "concrete_and_1" (formula "36") (term "1,1"))
                                                   (rule "cut_direct" (formula "36") (term "0"))
                                                   (branch " CUT: m_0_12.playerRow >= 0 TRUE"
                                                      (rule "concrete_and_1" (formula "37"))
                                                      (rule "cut_direct" (formula "37") (term "0"))
                                                      (branch " CUT: m_0_12.maze.length >= 1 + m_0_12.playerRow TRUE"
                                                         (rule "concrete_and_1" (formula "38"))
                                                         (rule "cut_direct" (formula "38") (term "0"))
                                                         (branch " CUT:    m_0_12.maze[m_0_12.playerRow].length
>= 1
 + m_0_12.playerCol TRUE"
                                                            (rule "concrete_and_1" (formula "39"))
                                                            (rule "notRight" (formula "39"))
                                                            (rule "allLeft" (formula "31") (inst "t=m_0_12"))
                                                            (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "6"))
                                                            (rule "concrete_not_1" (formula "31") (term "1,0"))
                                                            (rule "concrete_or_4" (formula "31") (term "0"))
                                                            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "40"))
                                                            (rule "concrete_or_2" (formula "31"))
                                                            (rule "notLeft" (formula "31"))
                                                            (rule "allLeft" (formula "28") (inst "t=m_0_12"))
                                                            (rule "replace_known_right" (formula "28") (term "1,0,0,0,0,0,0") (ifseqformula "41"))
                                                            (rule "concrete_or_4" (formula "28") (term "0,0,0,0,0,0"))
                                                            (rule "replace_known_left" (formula "28") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                                            (rule "concrete_not_1" (formula "28") (term "1,0,0,0,0,0"))
                                                            (rule "concrete_or_4" (formula "28") (term "0,0,0,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0,0,0"))
                                                            (rule "allLeft" (formula "28") (inst "t=m_0_12.playerRow@(maze.Maze)"))
                                                            (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                                            (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                                            (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                                            (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                                                            (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                                            (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                                            (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "4"))
                                                            (rule "qeq_literals" (formula "28") (term "0,1,0,0,0"))
                                                            (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                                            (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                                            (rule "allLeft" (formula "18") (inst "t=m_0_12"))
                                                            (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "43"))
                                                            (rule "concrete_or_2" (formula "18") (term "0"))
                                                            (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "6"))
                                                            (rule "concrete_not_1" (formula "18") (term "0"))
                                                            (rule "concrete_or_2" (formula "18"))
                                                            (rule "notLeft" (formula "18"))
                                                            (rule "close" (formula "36") (ifseqformula "1"))
                                                         )
                                                         (branch " CUT:    m_0_12.maze[m_0_12.playerRow].length
>= 1
 + m_0_12.playerCol FALSE"
                                                            (rule "concrete_and_2" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (rule "inEqSimp_geqRight" (formula "38"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "allLeft" (formula "30") (inst "t=m_0_12"))
                                                            (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "5"))
                                                            (rule "concrete_not_1" (formula "30") (term "1,0"))
                                                            (rule "concrete_or_4" (formula "30") (term "0"))
                                                            (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "39"))
                                                            (rule "concrete_or_2" (formula "30"))
                                                            (rule "notLeft" (formula "30"))
                                                            (rule "allLeft" (formula "16") (inst "t=m_0_12"))
                                                            (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "5"))
                                                            (rule "concrete_not_1" (formula "16") (term "1,0"))
                                                            (rule "concrete_or_4" (formula "16") (term "0"))
                                                            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "40"))
                                                            (rule "concrete_or_2" (formula "16"))
                                                            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                                            (rule "andLeft" (formula "1"))
                                                            (rule "inEqSimp_homoInEq1" (formula "1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                            (rule "add_literals" (formula "1") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "1") (term "1,0"))
                                                            (rule "add_literals" (formula "1") (term "0"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "closeFalse" (formula "1"))
                                                         )
                                                      )
                                                      (branch " CUT: m_0_12.maze.length >= 1 + m_0_12.playerRow FALSE"
                                                         (rule "concrete_and_2" (formula "38"))
                                                         (rule "false_right" (formula "38"))
                                                         (rule "inEqSimp_geqRight" (formula "37"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "allLeft" (formula "29") (inst "t=m_0_12"))
                                                         (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "4"))
                                                         (rule "concrete_not_1" (formula "29") (term "1,0"))
                                                         (rule "concrete_or_4" (formula "29") (term "0"))
                                                         (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "38"))
                                                         (rule "concrete_or_2" (formula "29"))
                                                         (rule "notLeft" (formula "29"))
                                                         (rule "allLeft" (formula "15") (inst "t=m_0_12"))
                                                         (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "4"))
                                                         (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                         (rule "concrete_or_4" (formula "15") (term "0"))
                                                         (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "39"))
                                                         (rule "concrete_or_2" (formula "15"))
                                                         (rule "allLeft" (formula "17") (inst "t=m_0_12"))
                                                         (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "40"))
                                                         (rule "concrete_or_2" (formula "17") (term "0"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                                                         (rule "concrete_not_1" (formula "17") (term "0"))
                                                         (rule "concrete_or_2" (formula "17"))
                                                         (rule "notLeft" (formula "17"))
                                                         (rule "allLeft" (formula "12") (inst "t=m_0_12"))
                                                         (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                                                         (rule "concrete_not_1" (formula "12") (term "1,0"))
                                                         (rule "concrete_or_4" (formula "12") (term "0"))
                                                         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "41"))
                                                         (rule "concrete_or_2" (formula "12"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0"))
                                                         (rule "add_literals" (formula "1") (term "0"))
                                                         (rule "leq_literals" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                   (branch " CUT: m_0_12.playerRow >= 0 FALSE"
                                                      (rule "concrete_and_2" (formula "37"))
                                                      (rule "false_right" (formula "37"))
                                                      (rule "inEqSimp_geqRight" (formula "36"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "14") (inst "t=m_0_12"))
                                                      (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "concrete_not_1" (formula "14") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "14") (term "0"))
                                                      (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "37"))
                                                      (rule "concrete_or_2" (formula "14"))
                                                      (rule "allLeft" (formula "29") (inst "t=m_0_12"))
                                                      (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "concrete_not_1" (formula "29") (term "1,0"))
                                                      (rule "concrete_or_4" (formula "29") (term "0"))
                                                      (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "38"))
                                                      (rule "concrete_or_2" (formula "29"))
                                                      (rule "notLeft" (formula "29"))
                                                      (rule "allLeft" (formula "16") (inst "t=m_0_12"))
                                                      (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "39"))
                                                      (rule "concrete_or_2" (formula "16") (term "0"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "3"))
                                                      (rule "concrete_not_1" (formula "16") (term "0"))
                                                      (rule "concrete_or_2" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "allLeft" (formula "8") (inst "t=m_0_12"))
                                                      (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "40"))
                                                      (rule "concrete_or_2" (formula "8") (term "0"))
                                                      (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
                                                      (rule "concrete_not_1" (formula "8") (term "0"))
                                                      (rule "concrete_or_2" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0"))
                                                      (rule "concrete_and_2" (formula "8"))
                                                      (rule "closeFalse" (formula "8"))
                                                   )
                                                )
                                                (branch " CUT: m_0_12.playerCol >= 0 FALSE"
                                                   (rule "concrete_and_2" (formula "36") (term "1,1"))
                                                   (rule "concrete_and_4" (formula "36") (term "1"))
                                                   (rule "concrete_and_4" (formula "36"))
                                                   (rule "false_right" (formula "36"))
                                                   (rule "inEqSimp_geqRight" (formula "35"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "9") (inst "t=m_0_12"))
                                                   (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "36"))
                                                   (rule "concrete_or_2" (formula "9") (term "0"))
                                                   (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "9") (term "0"))
                                                   (rule "concrete_or_2" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "9") (term "0"))
                                                   (rule "concrete_and_2" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                             )
                                          )
                                       )
                                       (branch " Null Reference (var_4 = null)"
                                          (builtin "Update Simplification" (formula "31"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "blockThrow" (formula "31") (term "6"))
                                          (builtin "Update Simplification" (formula "31"))
                                          (rule "allLeft" (formula "22") (inst "t=(jint)(1 + self.playerRow@(maze.Maze))"))
                                          (rule "castDelInt" (formula "22") (term "1,0,0,1"))
                                          (rule "castDelInt" (formula "22") (term "0,0,0"))
                                          (rule "castDelInt" (formula "22") (term "0,1,0"))
                                          (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "22") (term "1"))
                                          (rule "concrete_or_4" (formula "22"))
                                          (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                          (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                          (rule "leq_literals" (formula "22") (term "0,1"))
                                          (rule "concrete_and_2" (formula "22") (term "1"))
                                          (rule "concrete_or_4" (formula "22"))
                                          (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                          (rule "concrete_and_2" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                    )
                                    (branch " Null Reference (maze = null)"
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "close" (formula "29") (ifseqformula "1"))
                                    )
                                    (branch " Index Out of Bounds (maze != null, but newRow_10 Out of Bounds!)"
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "blockThrow" (formula "31") (term "6"))
                                       (builtin "Update Simplification" (formula "31"))
                                       (rule "castDelInt" (formula "1") (term "1,0"))
                                       (rule "castDelInt" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0"))
                                       (rule "concrete_or_2" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " if b_51 false"
                                    (rule "false_to_not_true" (formula "1") (term "6"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_equal" (formula "1") (term "0"))
                                    (rule "concrete_not_1" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch " self.maze.length >= 2 + self.playerRow FALSE"
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                                 (rule "applyEq" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,0"))
                                 (rule "times_zero_1" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "18") (term "1,1,0,0,0,0") (ifseqformula "6"))
                                 (rule "compound_assignment_1" (formula "29") (term "6"))
                                 (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "13") (term "0,1,1,0,0") (ifseqformula "8") (ifseqformula "1") (ifseqformula "25"))
                                 (rule "ifElse" (formula "30") (term "6"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "boolean_not_equal_2" (formula "30") (term "0"))
                                 (rule "ifthenelse_false_for" (formula "30"))
                                 (rule "assignment_instance_field_of_this" (formula "30") (term "5"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "ifElse" (formula "30") (term "6"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "boolean_equal" (formula "30") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "30"))
                                 (rule "assignment_instance_field_of_this" (formula "30") (term "5"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "ifElse" (formula "30") (term "6"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "boolean_not_equal_2" (formula "30") (term "0"))
                                 (rule "ifthenelse_false_for" (formula "30"))
                                 (rule "blockReturn" (formula "30") (term "3"))
                                 (rule "methodCallReturn" (formula "30") (term "3"))
                                 (rule "assignment" (formula "30") (term "3"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "methodCallEmpty" (formula "30") (term "4"))
                                 (rule "blockEmpty" (formula "30") (term "4"))
                                 (rule "assignment_instance_field_of_this" (formula "30") (term "4"))
                                 (builtin "Update Simplification" (formula "30"))
                                 (rule "ifElseSplit" (formula "30"))
                                 (branch " if b_47 true"
                                    (builtin "Update Simplification" (formula "31"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch " if b_47 false"
                                    (rule "false_to_not_true" (formula "1") (term "4"))
                                    (builtin "Update Simplification" (formula "31"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                    (rule "concrete_not_2" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockReturn" (formula "30") (term "1"))
                                    (rule "methodCallReturn" (formula "30") (term "1"))
                                    (rule "assignment" (formula "30") (term "1"))
                                    (builtin "Update Simplification" (formula "30"))
                                    (rule "methodCallEmpty" (formula "30") (term "1"))
                                    (rule "tryEmpty" (formula "30") (term "1"))
                                    (builtin "Update Simplification" (formula "30"))
                                    (rule "emptyModality" (formula "30"))
                                    (rule "allRight" (formula "30") (inst "sk=m_0_5"))
                                    (rule "orRight" (formula "30"))
                                    (rule "orRight" (formula "30"))
                                    (rule "notRight" (formula "30"))
                                    (rule "cut_direct" (formula "32") (term "0"))
                                    (branch " CUT: m_0_5.playerRow >= 0 TRUE"
                                       (rule "concrete_and_1" (formula "33"))
                                       (rule "cut_direct" (formula "33") (term "0,1"))
                                       (branch " CUT: m_0_5.playerCol >= 0 TRUE"
                                          (rule "concrete_and_1" (formula "34") (term "1"))
                                          (rule "cut_direct" (formula "34") (term "0"))
                                          (branch " CUT: m_0_5.maze.length >= 1 + m_0_5.playerRow TRUE"
                                             (rule "concrete_and_1" (formula "35"))
                                             (rule "cut_direct" (formula "35") (term "0"))
                                             (branch " CUT:    m_0_5.maze[m_0_5.playerRow].length
>= 1
 + m_0_5.playerCol TRUE"
                                                (rule "concrete_and_1" (formula "36"))
                                                (rule "notRight" (formula "36"))
                                                (rule "allLeft" (formula "28") (inst "t=m_0_5"))
                                                (rule "replace_known_right" (formula "28") (term "1,0,0,0,0") (ifseqformula "37"))
                                                (rule "concrete_or_4" (formula "28") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "6"))
                                                (rule "concrete_not_1" (formula "28") (term "1,0,0,0"))
                                                (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                                (rule "allLeft" (formula "28") (inst "t=m_0_5.playerRow@(maze.Maze)"))
                                                (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "28") (term "0,0,0"))
                                                (rule "concrete_and_2" (formula "28") (term "0,0"))
                                                (rule "concrete_or_2" (formula "28") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0,0"))
                                                (rule "leq_literals" (formula "28") (term "0,0"))
                                                (rule "concrete_and_2" (formula "28") (term "0"))
                                                (rule "concrete_or_2" (formula "28"))
                                                (rule "notLeft" (formula "28"))
                                                (rule "allLeft" (formula "17") (inst "t=m_0_5"))
                                                (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "39"))
                                                (rule "concrete_or_2" (formula "17") (term "0"))
                                                (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "6"))
                                                (rule "concrete_not_1" (formula "17") (term "0"))
                                                (rule "concrete_or_2" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "close" (formula "33") (ifseqformula "1"))
                                             )
                                             (branch " CUT:    m_0_5.maze[m_0_5.playerRow].length
>= 1
 + m_0_5.playerCol FALSE"
                                                (rule "concrete_and_2" (formula "36"))
                                                (rule "false_right" (formula "36"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "15") (inst "t=m_0_5"))
                                                (rule "replace_known_left" (formula "15") (term "0,1,0") (ifseqformula "5"))
                                                (rule "concrete_not_1" (formula "15") (term "1,0"))
                                                (rule "concrete_or_4" (formula "15") (term "0"))
                                                (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "36"))
                                                (rule "concrete_or_2" (formula "15"))
                                                (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                                                (rule "andLeft" (formula "15"))
                                                (rule "inEqSimp_homoInEq1" (formula "15"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                                (rule "add_literals" (formula "15") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0"))
                                                (rule "add_literals" (formula "15") (term "0"))
                                                (rule "leq_literals" (formula "15"))
                                                (rule "closeFalse" (formula "15"))
                                             )
                                          )
                                          (branch " CUT: m_0_5.maze.length >= 1 + m_0_5.playerRow FALSE"
                                             (rule "concrete_and_2" (formula "35"))
                                             (rule "false_right" (formula "35"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "14") (inst "t=m_0_5"))
                                             (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "14") (term "1,0"))
                                             (rule "concrete_or_4" (formula "14") (term "0"))
                                             (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "14"))
                                             (rule "allLeft" (formula "28") (inst "t=m_0_5"))
                                             (rule "replace_known_left" (formula "28") (term "0,1,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "28") (term "1,0"))
                                             (rule "concrete_or_4" (formula "28") (term "0"))
                                             (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "36"))
                                             (rule "concrete_or_2" (formula "28"))
                                             (rule "notLeft" (formula "28"))
                                             (rule "allLeft" (formula "16") (inst "t=m_0_5"))
                                             (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "37"))
                                             (rule "concrete_or_2" (formula "16") (term "0"))
                                             (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "16") (term "0"))
                                             (rule "concrete_or_2" (formula "16"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "allLeft" (formula "11") (inst "t=m_0_5"))
                                             (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "38"))
                                             (rule "concrete_or_2" (formula "11") (term "0"))
                                             (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "11") (term "0"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                                             (rule "andLeft" (formula "11"))
                                             (rule "inEqSimp_homoInEq1" (formula "11"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0"))
                                             (rule "add_literals" (formula "11") (term "0"))
                                             (rule "leq_literals" (formula "11"))
                                             (rule "closeFalse" (formula "11"))
                                          )
                                       )
                                       (branch " CUT: m_0_5.playerCol >= 0 FALSE"
                                          (rule "concrete_and_2" (formula "34") (term "1"))
                                          (rule "concrete_and_4" (formula "34"))
                                          (rule "false_right" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "13") (inst "t=m_0_5"))
                                          (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "34"))
                                          (rule "concrete_or_2" (formula "13") (term "0"))
                                          (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "3"))
                                          (rule "concrete_not_1" (formula "13") (term "0"))
                                          (rule "concrete_or_2" (formula "13"))
                                          (rule "allLeft" (formula "8") (inst "t=m_0_5"))
                                          (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "3"))
                                          (rule "concrete_not_1" (formula "8") (term "1,0"))
                                          (rule "concrete_or_4" (formula "8") (term "0"))
                                          (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "35"))
                                          (rule "concrete_or_2" (formula "8"))
                                          (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "8") (term "0"))
                                          (rule "concrete_and_2" (formula "8"))
                                          (rule "closeFalse" (formula "8"))
                                       )
                                    )
                                    (branch " CUT: m_0_5.playerRow >= 0 FALSE"
                                       (rule "concrete_and_2" (formula "33"))
                                       (rule "false_right" (formula "33"))
                                       (rule "inEqSimp_geqRight" (formula "32"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "allLeft" (formula "12") (inst "t=m_0_5"))
                                       (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "33"))
                                       (rule "concrete_or_2" (formula "12") (term "0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "2"))
                                       (rule "concrete_not_1" (formula "12") (term "0"))
                                       (rule "concrete_or_2" (formula "12"))
                                       (rule "allLeft" (formula "5") (inst "t=m_0_5"))
                                       (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "2"))
                                       (rule "concrete_not_1" (formula "5") (term "1,0"))
                                       (rule "concrete_or_4" (formula "5") (term "0"))
                                       (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "34"))
                                       (rule "concrete_or_2" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                           (branch " Null Reference (maze = null)"
                              (builtin "Update Simplification" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                        )
                     )
                  )
                  (branch " self.playerRow >= -1 FALSE"
                     (rule "inEqSimp_geqRight" (formula "14"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "compound_assignment_1" (formula "15") (term "6"))
                     (rule "allLeft" (formula "6") (inst "t=self"))
                     (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "15"))
                     (rule "concrete_or_2" (formula "6") (term "0"))
                     (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "14"))
                     (rule "concrete_not_1" (formula "6") (term "0"))
                     (rule "concrete_or_2" (formula "6"))
                     (rule "allLeft" (formula "3") (inst "t=self"))
                     (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "16"))
                     (rule "concrete_or_2" (formula "3") (term "0"))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "15"))
                     (rule "concrete_not_1" (formula "3") (term "0"))
                     (rule "concrete_or_2" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (rule "concrete_and_2" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch " if b_7 false"
                  (rule "false_to_not_true" (formula "1") (term "5"))
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_equal" (formula "1") (term "0"))
                  (rule "concrete_not_1" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch " direction = 1 FALSE"
               (rule "castDelInt" (formula "12") (term "1,0,1,0,1,1"))
               (rule "add_zero_right" (formula "12") (term "0,1,0,1,1"))
               (rule "castDelInt" (formula "12") (term "1,0,1,1"))
               (rule "replace_known_right" (formula "12") (term "0,1,0,1,0,0,1,1,0") (ifseqformula "14"))
               (rule "ifthenelse_false" (formula "12") (term "1,0,1,0,0,1,1,0"))
               (rule "castDelInt" (formula "12") (term "1,0,1,0,0,1,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,1,0"))
               (rule "castDelInt" (formula "12") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "14"))
               (rule "add_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "1"))
               (rule "add_zero_left" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "0,0"))
               (rule "qeq_literals" (formula "14") (term "0"))
               (rule "concrete_and_2" (formula "14"))
               (rule "false_right" (formula "14"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "14"))
               (rule "add_zero_right" (formula "1") (term "1"))
               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
               (rule "concrete_or_1" (formula "12") (term "0"))
               (rule "concrete_or_1" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_contradEq3" (formula "13") (ifseqformula "1"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "qeq_literals" (formula "13") (term "0"))
               (rule "concrete_and_2" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "methodBodyExpand" (formula "14") (term "2"))
               (rule "variableDeclarationAssign" (formula "14") (term "2"))
               (rule "variableDeclaration" (formula "14") (term "2") (newnames "newRow_6"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "variableDeclarationAssign" (formula "14") (term "3"))
               (rule "variableDeclaration" (formula "14") (term "3") (newnames "newCol_6"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "3"))
               (builtin "Update Simplification" (formula "14"))
               (rule "switch" (formula "14") (term "4"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "_var_5"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
               (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_8"))
               (rule "equality_comparison_new" (formula "14") (term "4"))
               (builtin "Update Simplification" (formula "14"))
               (rule "insert_constant_value" (formula "14") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
               (builtin "Update Simplification" (formula "14"))
               (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
               (builtin "Update Simplification" (formula "14"))
               (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "14") (term "0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0"))
               (rule "concrete_not_2" (formula "14") (term "0"))
               (rule "ifthenelse_true_for" (formula "14"))
               (rule "ifSplit" (formula "14"))
               (branch " if b_8 true"
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_8 false"
                  (rule "false_to_not_true" (formula "1") (term "5"))
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                  (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_9"))
                  (rule "equality_comparison_new" (formula "14") (term "4"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                  (builtin "Update Simplification" (formula "14"))
                  (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "14") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "14") (term "0,0"))
                  (rule "concrete_not_2" (formula "14") (term "0"))
                  (rule "ifthenelse_true_for" (formula "14"))
                  (rule "ifSplit" (formula "14"))
                  (branch " if b_9 true"
                     (builtin "Update Simplification" (formula "15"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " if b_9 false"
                     (rule "false_to_not_true" (formula "1") (term "5"))
                     (builtin "Update Simplification" (formula "15"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "0"))
                     (rule "concrete_not_2" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                     (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_56"))
                     (rule "equality_comparison_new" (formula "14") (term "4"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                     (builtin "Update Simplification" (formula "14"))
                     (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "14") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "14") (term "0,0"))
                     (rule "concrete_not_2" (formula "14") (term "0"))
                     (rule "ifthenelse_true_for" (formula "14"))
                     (rule "ifSplit" (formula "14"))
                     (branch " if b_56 true"
                        (builtin "Update Simplification" (formula "15"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch " if b_56 false"
                        (rule "false_to_not_true" (formula "1") (term "5"))
                        (builtin "Update Simplification" (formula "15"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "0"))
                        (rule "concrete_not_2" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                        (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_57"))
                        (rule "equality_comparison_new" (formula "14") (term "4"))
                        (builtin "Update Simplification" (formula "14"))
                        (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                        (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                        (builtin "Update Simplification" (formula "14"))
                        (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                        (builtin "Update Simplification" (formula "14"))
                        (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "14") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "14") (term "0,0"))
                        (rule "concrete_not_2" (formula "14") (term "0"))
                        (rule "ifthenelse_true_for" (formula "14"))
                        (rule "ifSplit" (formula "14"))
                        (branch " if b_57 true"
                           (builtin "Update Simplification" (formula "15"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch " if b_57 false"
                           (rule "false_to_not_true" (formula "1") (term "5"))
                           (builtin "Update Simplification" (formula "15"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "0"))
                           (rule "concrete_not_2" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "unusedLabel" (formula "14") (term "4"))
                           (rule "ifUnfold" (formula "14") (term "4") (inst "#boolv=b"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_58"))
                           (rule "evaluate_lazy_and" (formula "14") (term "4"))
                           (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_59"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_59"))
                           (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_60"))
                           (rule "variableDeclarationAssign" (formula "14") (term "4"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_60"))
                           (rule "remove_parentheses_right" (formula "14") (term "4"))
                           (rule "evaluate_lazy_and" (formula "14") (term "4"))
                           (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_61"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_61"))
                           (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_62"))
                           (rule "variableDeclarationAssign" (formula "14") (term "4"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_62"))
                           (rule "remove_parentheses_right" (formula "14") (term "4"))
                           (rule "evaluate_lazy_and" (formula "14") (term "4"))
                           (rule "ifElseUnfold" (formula "14") (term "4") (inst "#boolv=b_63"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_63"))
                           (rule "compound_assignment_2" (formula "14") (term "4") (inst "#v=b_64"))
                           (rule "variableDeclarationAssign" (formula "14") (term "4"))
                           (rule "variableDeclaration" (formula "14") (term "4") (newnames "b_64"))
                           (rule "remove_parentheses_right" (formula "14") (term "4"))
                           (rule "inequality_comparison_new" (formula "14") (term "4"))
                           (builtin "Update Simplification" (formula "14"))
                           (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                           (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                           (builtin "Update Simplification" (formula "14"))
                           (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                           (builtin "Update Simplification" (formula "14"))
                           (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "14") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "14") (term "0,0"))
                           (rule "concrete_not_2" (formula "14") (term "0"))
                           (rule "ifthenelse_true_for" (formula "14"))
                           (rule "compound_assignment_1" (formula "14") (term "5"))
                           (rule "ifElseSplit" (formula "14"))
                           (branch " if b_64 true"
                              (builtin "Update Simplification" (formula "15"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "boolean_equal" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                              (builtin "Update Simplification" (formula "14"))
                              (rule "ifElseSplit" (formula "14"))
                              (branch " if b_63 true"
                                 (builtin "Update Simplification" (formula "15"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " if b_63 false"
                                 (rule "false_to_not_true" (formula "1") (term "5"))
                                 (builtin "Update Simplification" (formula "15"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "0"))
                                 (rule "concrete_not_2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block_2" (formula "14") (term "4"))
                                 (rule "inequality_comparison_new" (formula "14") (term "4"))
                                 (builtin "Update Simplification" (formula "14"))
                                 (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                                 (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                                 (builtin "Update Simplification" (formula "14"))
                                 (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                                 (builtin "Update Simplification" (formula "14"))
                                 (rule "blockEmpty" (formula "14") (term "5,1"))
                                 (rule "blockEmpty" (formula "14") (term "5,2"))
                                 (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "14") (term "0,0"))
                                 (rule "concrete_not_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "14"))
                                 (rule "compound_assignment_1" (formula "14") (term "5"))
                                 (rule "ifElseSplit" (formula "14"))
                                 (branch " if b_62 true"
                                    (builtin "Update Simplification" (formula "15"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_equal" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "ifElse" (formula "14") (term "5"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "boolean_not_equal_2" (formula "14") (term "0"))
                                    (rule "ifthenelse_false_for" (formula "14"))
                                    (rule "elim_double_block_2" (formula "14") (term "4"))
                                    (rule "inequality_comparison_new" (formula "14") (term "4"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "4,1"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "4,2"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "blockEmpty" (formula "14") (term "5,1"))
                                    (rule "blockEmpty" (formula "14") (term "5,2"))
                                    (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "14") (term "0,0"))
                                    (rule "concrete_not_2" (formula "14") (term "0"))
                                    (rule "ifthenelse_true_for" (formula "14"))
                                    (rule "compound_assignment_1" (formula "14") (term "5"))
                                    (rule "ifElse" (formula "14") (term "5"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "boolean_equal" (formula "14") (term "0"))
                                    (rule "ifthenelse_true_for" (formula "14"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "4"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "ifElse" (formula "14") (term "5"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "boolean_not_equal_2" (formula "14") (term "0"))
                                    (rule "ifthenelse_false_for" (formula "14"))
                                    (rule "elim_double_block_2" (formula "14") (term "4"))
                                    (rule "inequality_comparison_new" (formula "14") (term "4"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "insert_constant_value" (formula "14") (term "1,0,0"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "3,1"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "assignment" (formula "14") (term "3,2"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "blockEmpty" (formula "14") (term "4,1"))
                                    (rule "blockEmpty" (formula "14") (term "4,2"))
                                    (rule "inEqSimp_contradEq3" (formula "14") (term "0,0") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "14") (term "0,0"))
                                    (rule "concrete_not_2" (formula "14") (term "0"))
                                    (rule "ifthenelse_true_for" (formula "14"))
                                    (rule "if" (formula "14") (term "4"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "boolean_equal" (formula "14") (term "0"))
                                    (rule "ifthenelse_true_for" (formula "14"))
                                    (rule "blockThrow" (formula "14") (term "3"))
                                    (rule "throwUnfold" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException"))
                                    (rule "variableDeclarationAssign" (formula "14") (term "3"))
                                    (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_4"))
                                    (rule "instanceCreationAssignment" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_5"))
                                    (rule "variableDeclarationAssign" (formula "14") (term "3"))
                                    (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_5"))
                                    (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_6"))
                                    (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_6"))
                                    (rule "methodBodyExpand" (formula "14") (term "3"))
                                    (rule "variableDeclaration" (formula "14") (term "3") (newnames "__NEW___1"))
                                    (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "3") (inst "#v0=v_IllegalArgumentException_7"))
                                    (rule "variableDeclaration" (formula "14") (term "3") (newnames "v_IllegalArgumentException_7"))
                                    (rule "allocateInstance" (formula "14") (term "3") (inst "#v0=var"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "blockEmpty" (formula "14") (term "7"))
                                    (rule "assignment" (formula "14") (term "7"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "polySimp_addComm0" (formula "14") (term "4"))
                                    (rule "methodBodyExpand" (formula "14") (term "7"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "7"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "assignment_instance_field_of_this" (formula "14") (term "9"))
                                    (builtin "Update Simplification" (formula "14"))
                                    (rule "methodCallWithinClass" (formula "14") (term "11"))
                                    (rule "methodBodyExpand" (formula "14") (term "11"))
                                    (rule "methodCallSuper" (formula "14") (term "11"))
                                    (rule "nextToCreate_non_negative" (formula "14") (term "0,7") (ifseqformula "2"))
                                    (rule "methodBodyExpand" (formula "15") (term "11"))
                                    (rule "methodCallSuper" (formula "15") (term "11"))
                                    (rule "methodBodyExpand" (formula "15") (term "11"))
                                    (rule "methodCallSuper" (formula "15") (term "11"))
                                    (rule "methodBodyExpand" (formula "15") (term "11"))
                                    (rule "methodCallSuper" (formula "15") (term "11"))
                                    (rule "methodBodyExpand" (formula "15") (term "11"))
                                    (rule "methodCallEmpty" (formula "15") (term "11"))
                                    (rule "blockEmpty" (formula "15") (term "11"))
                                    (rule "assignment_instance_field_of_this" (formula "15") (term "11"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "assignment_instance_field_of_this" (formula "15") (term "13"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "blockEmpty" (formula "15") (term "15"))
                                    (rule "methodCallReturnIgnoreResult" (formula "15") (term "15"))
                                    (rule "methodCallReturn" (formula "15") (term "15"))
                                    (rule "assignment" (formula "15") (term "15"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "blockEmpty" (formula "15") (term "15"))
                                    (rule "assignment" (formula "15") (term "15"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "methodBodyExpand" (formula "15") (term "15"))
                                    (rule "methodCallSuper" (formula "15") (term "15"))
                                    (rule "methodBodyExpand" (formula "15") (term "15"))
                                    (rule "methodCallSuper" (formula "15") (term "15"))
                                    (rule "methodBodyExpand" (formula "15") (term "15"))
                                    (rule "methodCallSuper" (formula "15") (term "15"))
                                    (rule "methodBodyExpand" (formula "15") (term "15"))
                                    (rule "methodCallSuper" (formula "15") (term "15"))
                                    (rule "methodBodyExpand" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "blockEmpty" (formula "15") (term "15"))
                                    (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "methodCallEmpty" (formula "15") (term "15"))
                                    (rule "blockEmpty" (formula "15") (term "15"))
                                    (rule "assignment_write_attribute_primitive" (formula "15") (term "15"))
                                    (branch " Normal Execution (v_IllegalArgumentException_5 != null)"
                                       (builtin "Update Simplification" (formula "16"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "repository_object_non_null" (formula "15"))
                                       (rule "false_right" (formula "15"))
                                       (rule "assignment_instance_field_of_this" (formula "15") (term "15"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "methodCallParamThrow" (formula "15") (term "15"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "tryCatchThrow" (formula "15") (term "13"))
                                       (rule "ifElseUnfold" (formula "15") (term "13") (inst "#boolv=b"))
                                       (rule "variableDeclaration" (formula "15") (term "13") (newnames "b_68"))
                                       (rule "equality_comparison_new" (formula "15") (term "13"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "repository_object_non_null" (formula "15") (term "0,0"))
                                       (rule "concrete_not_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_true_for" (formula "15"))
                                       (rule "assignment_instance_field_of_this" (formula "15") (term "13"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "ifElse" (formula "15") (term "14"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "boolean_not_equal_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_false_for" (formula "15"))
                                       (rule "elim_double_block" (formula "15") (term "13"))
                                       (rule "ifElse" (formula "15") (term "13"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "repository_object_non_null" (formula "15") (term "0,0,0"))
                                       (rule "ifthenelse_false" (formula "15") (term "0,0"))
                                       (rule "elim_double_block" (formula "15") (term "13,1"))
                                       (rule "blockThrow" (formula "15") (term "12,2"))
                                       (rule "variableDeclaration" (formula "15") (term "13,1") (newnames "e_1"))
                                       (rule "assignment_instance_field_of_this" (formula "15") (term "13,1"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "assignment_instance_field_of_this" (formula "15") (term "13,1"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "throwBox" (formula "15") (term "12,2"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "instanceof_static_type" (formula "15") (term "0,0"))
                                       (rule "boolean_equal" (formula "15") (term "0"))
                                       (rule "ifthenelse_true_for" (formula "15"))
                                       (rule "emptyModality" (formula "15") (term "11"))
                                       (builtin "Update Simplification" (formula "15"))
                                       (rule "allRight" (formula "15") (inst "sk=m_0_4"))
                                       (rule "orRight" (formula "15"))
                                       (rule "orRight" (formula "15"))
                                       (rule "notRight" (formula "15"))
                                       (rule "cut_direct" (formula "17") (term "0"))
                                       (branch " CUT: m_0_4.playerRow >= 0 TRUE"
                                          (rule "concrete_and_1" (formula "18"))
                                          (rule "cut_direct" (formula "18") (term "0,1"))
                                          (branch " CUT: m_0_4.playerCol >= 0 TRUE"
                                             (rule "concrete_and_1" (formula "19") (term "1"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch " CUT: m_0_4.maze.length >= 1 + m_0_4.playerRow TRUE"
                                                (rule "concrete_and_1" (formula "20"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch " CUT:    m_0_4.maze[m_0_4.playerRow].length
>= 1
 + m_0_4.playerCol TRUE"
                                                   (rule "concrete_and_1" (formula "21"))
                                                   (rule "notRight" (formula "21"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_4"))
                                                   (rule "replace_known_right" (formula "15") (term "1,0,0,0,0,0,0") (ifseqformula "22"))
                                                   (rule "concrete_or_4" (formula "15") (term "0,0,0,0,0,0"))
                                                   (rule "replace_known_left" (formula "15") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                                   (rule "concrete_not_1" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "concrete_or_4" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,0,0"))
                                                   (rule "allLeft" (formula "15") (inst "t=m_0_4.playerRow@(maze.Maze)"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                                   (rule "leq_literals" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "concrete_and_2" (formula "15") (term "1,0,0,0"))
                                                   (rule "concrete_or_4" (formula "15") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "concrete_and_2" (formula "15") (term "1,0,0,0"))
                                                   (rule "concrete_or_4" (formula "15") (term "0,0,0"))
                                                   (rule "allLeft" (formula "14") (inst "t=m_0_4"))
                                                   (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "24"))
                                                   (rule "concrete_or_2" (formula "14") (term "0"))
                                                   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "6"))
                                                   (rule "concrete_not_1" (formula "14") (term "0"))
                                                   (rule "concrete_or_2" (formula "14"))
                                                   (rule "notLeft" (formula "14"))
                                                   (rule "close" (formula "22") (ifseqformula "1"))
                                                )
                                                (branch " CUT:    m_0_4.maze[m_0_4.playerRow].length
>= 1
 + m_0_4.playerCol FALSE"
                                                   (rule "concrete_and_2" (formula "21"))
                                                   (rule "false_right" (formula "21"))
                                                   (rule "inEqSimp_geqRight" (formula "20"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "13") (inst "t=m_0_4"))
                                                   (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "concrete_not_1" (formula "13") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "13") (term "0"))
                                                   (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "21"))
                                                   (rule "concrete_or_2" (formula "13"))
                                                   (rule "notLeft" (formula "13"))
                                                   (rule "allLeft" (formula "12") (inst "t=m_0_4"))
                                                   (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "concrete_not_1" (formula "12") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "12") (term "0"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "22"))
                                                   (rule "concrete_or_2" (formula "12"))
                                                   (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0"))
                                                   (rule "leq_literals" (formula "12"))
                                                   (rule "closeFalse" (formula "12"))
                                                )
                                             )
                                             (branch " CUT: m_0_4.maze.length >= 1 + m_0_4.playerRow FALSE"
                                                (rule "concrete_and_2" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "19"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "10") (inst "t=m_0_4"))
                                                (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "20"))
                                                (rule "concrete_or_2" (formula "10") (term "0"))
                                                (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "10") (term "0"))
                                                (rule "concrete_or_2" (formula "10"))
                                                (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                                                (rule "andLeft" (formula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "10"))
                                                (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                (rule "add_literals" (formula "10") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "10") (term "1,0"))
                                                (rule "add_literals" (formula "10") (term "0"))
                                                (rule "leq_literals" (formula "10"))
                                                (rule "closeFalse" (formula "10"))
                                             )
                                          )
                                          (branch " CUT: m_0_4.playerCol >= 0 FALSE"
                                             (rule "concrete_and_2" (formula "19") (term "1"))
                                             (rule "concrete_and_4" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "inEqSimp_geqRight" (formula "18"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "allLeft" (formula "9") (inst "t=m_0_4"))
                                             (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "19"))
                                             (rule "concrete_or_2" (formula "9") (term "0"))
                                             (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "9") (term "0"))
                                             (rule "concrete_or_2" (formula "9"))
                                             (rule "allLeft" (formula "12") (inst "t=m_0_4"))
                                             (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "12") (term "1,0"))
                                             (rule "concrete_or_4" (formula "12") (term "0"))
                                             (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "20"))
                                             (rule "concrete_or_2" (formula "12"))
                                             (rule "notLeft" (formula "12"))
                                             (rule "allLeft" (formula "11") (inst "t=m_0_4"))
                                             (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "11") (term "1,0"))
                                             (rule "concrete_or_4" (formula "11") (term "0"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "21"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "allLeft" (formula "8") (inst "t=m_0_4"))
                                             (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "8") (term "1,0"))
                                             (rule "concrete_or_4" (formula "8") (term "0"))
                                             (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "22"))
                                             (rule "concrete_or_2" (formula "8"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (rule "concrete_and_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch " CUT: m_0_4.playerRow >= 0 FALSE"
                                          (rule "concrete_and_2" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "inEqSimp_geqRight" (formula "17"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "8") (inst "t=m_0_4"))
                                          (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "18"))
                                          (rule "concrete_or_2" (formula "8") (term "0"))
                                          (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "8") (term "0"))
                                          (rule "concrete_or_2" (formula "8"))
                                          (rule "allLeft" (formula "11") (inst "t=m_0_4"))
                                          (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "11") (term "1,0"))
                                          (rule "concrete_or_4" (formula "11") (term "0"))
                                          (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "19"))
                                          (rule "concrete_or_2" (formula "11"))
                                          (rule "notLeft" (formula "11"))
                                          (rule "allLeft" (formula "6") (inst "t=m_0_4"))
                                          (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "20"))
                                          (rule "concrete_or_2" (formula "6") (term "0"))
                                          (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "6") (term "0"))
                                          (rule "concrete_or_2" (formula "6"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (rule "concrete_and_2" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                    (branch " Null Reference (v_IllegalArgumentException_5 = null)"
                                       (builtin "Update Simplification" (formula "1"))
                                       (rule "repository_object_non_null" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch " if b_62 false"
                                    (rule "false_to_not_true" (formula "1") (term "5"))
                                    (builtin "Update Simplification" (formula "15"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "boolean_equal" (formula "1") (term "0"))
                                    (rule "concrete_not_1" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch " if b_64 false"
                              (rule "false_to_not_true" (formula "1") (term "5"))
                              (builtin "Update Simplification" (formula "15"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "boolean_equal" (formula "1") (term "0"))
                              (rule "concrete_not_1" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)

}
