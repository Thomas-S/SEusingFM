\settings {
"#Proof-Settings-Config-File
#Thu Feb 16 16:33:57 CET 2012
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=SIMPLIFY_PROVER
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[Choice]DefaultChoices=transactions-transactions\\:transactionsOff , throughout-throughout\\:toutOff , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff , rtsj-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool , memory-memory\\:off , javacard-javacard\\:jcOff
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_EXPAND
[DecisionProcedure]pd_mode=0
[DecisionProcedure]Exec=Z3\\=z3 -smt -m %f\\:Simplify\\=simplify.exe %f\\:Yices\\=yices -tc -e -smt %f\\:CVC3\\=cvc3 -lang smt +model %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=throughout-throughout\\:toutOn-throughout\\:toutOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , programRules-programRules\\:Java-programRules\\:ODL , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , rtsj-rtsj\\:on-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool-stringRules\\:withoutStringPool , memory-memory\\:off-memory\\:on , javacard-javacard\\:jcOff-javacard\\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[TacletTranslation]maxGeneric=3
"
}

\javaSource "C:\\Users\\dome\\UNI\\WS_11_12\\SEFM\\SEFM_Git\\Lab_2\\MazeLab";



\programVariables {
java.lang.Throwable exc;
maze.Maze self;
int _direction;
int direction;
boolean result;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & (  \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (     (jint)(0) <= i
                    & i <  m_0.maze@(maze.Maze).length
                    & inInt(i)
                 -> !m_0.maze@(maze.Maze)[i] = null))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> !m_0.maze@(maze.Maze) = null)
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \exists jint colNr; 
                (  colNr >= (jint)(0)
                 & inInt(colNr)
                 & \forall jint row; 
                     (     row >= (jint)(0)
                         &    row
                           <  m_0.maze@(maze.Maze).length
                         & inInt(row)
                      ->   m_0.maze@(maze.Maze)[row].length
                         = colNr)))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint row; 
                (     row >= (jint)(0)
                    &    row
                      <  m_0.maze@(maze.Maze).length
                    & inInt(row)
                 -> \forall jint col; 
                      (     col >= (jint)(0)
                          &    col
                            <  m_0.maze@(maze.Maze)[row].length
                          & inInt(col)
                       ->      m_0.maze@(maze.Maze)[row][col]
                            >= maze.Maze.FREE
                          &    m_0.maze@(maze.Maze)[row][col]
                            <= maze.Maze.EXIT)))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \exists jint row; 
                (  row >= (jint)(0)
                 & row <  m_0.maze@(maze.Maze).length
                 & inInt(row)
                 & \exists jint col; 
                     (  col >= (jint)(0)
                      &    col
                        <  m_0.maze@(maze.Maze)[row].length
                      & inInt(col)
                      & (    m_0.maze@(maze.Maze)[row][col]
                           = maze.Maze.EXIT
                         & \forall jint row2; 
                             (   inInt(row2)
                              -> \forall jint col2; 
                                   (        row2
                                         >= (jint)(0)
                                       & (     row2
                                            <  m_0.maze@(maze.Maze).length
                                          & (     col2
                                               >= (jint)(0)
                                             &    col2
                                               <  m_0.maze@(maze.Maze)[row].length))
                                       & inInt(col2)
                                    ->   m_0.maze@(maze.Maze)[row2][col2]
                                       = maze.Maze.EXIT
                                    ->   row2 = row
                                       & col2 = col))))))
      & \forall maze.Maze m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->   m_0.playerRow@(maze.Maze) >= (jint)(0)
              & (     m_0.playerRow@(maze.Maze)
                   <  m_0.maze@(maze.Maze).length
                 & (     m_0.playerCol@(maze.Maze)
                      >= (jint)(0)
                    & (     m_0.playerCol@(maze.Maze)
                         <  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)].length
                       & !  m_0.maze@(maze.Maze)[m_0.playerRow@(maze.Maze)][m_0.playerCol@(maze.Maze)]
                          = maze.Maze.WALL)))))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & inInt(direction)
   & (direction <  (jint)(0) | direction >  (jint)(3))
-> {_direction:=direction}
     \<{
         exc=null;try {
           result=self.move(_direction)@maze.Maze;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\> (  !exc = null
            &   java.lang.IllegalArgumentException::instance(exc)
              = TRUE)

}

\proof {
(keyLog "0" (keyUser "dome" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "3869")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,1,1,1,1,0,1,1,0,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,0,0,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "concrete_impl_1" (formula "1") (term "0,1,1,0,1,0,1,0,1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "assignment_instance_field_of_this" (formula "11") (term "1"))
(builtin "Update Simplification" (formula "11"))
(rule "castDelInt" (formula "9") (term "1,0"))
(rule "castDelInt" (formula "9") (term "1,1"))
(rule "castDelInt" (formula "7") (term "1,0,1,1,1,0"))
(rule "castDelInt" (formula "7") (term "1,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,0,1,1,0,1,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "5") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "5") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "4") (term "1,0,0,0,1,0,1,0"))
(rule "castDelInt" (formula "4") (term "1,0,0,1,0"))
(rule "castDelInt" (formula "2") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "9") (term "1"))
(rule "mul_literals" (formula "9") (term "1,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,1,0"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
(rule "mul_literals" (formula "9") (term "1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
(rule "mul_literals" (formula "9") (term "1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "double_not" (formula "7") (term "1,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "double_not" (formula "6") (term "1,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "double_not" (formula "5") (term "1,0,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "double_not" (formula "4") (term "1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0"))
(rule "nnf_imp2or" (formula "2") (term "0,1,0"))
(rule "nnf_imp2or" (formula "4") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1,0"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,1,1,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "1,0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,0,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "shift_paren_and" (formula "7") (term "1,1,1,0"))
(rule "commute_and" (formula "6") (term "1,1,0,0,1,1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "5") (term "0,1,0,1,0"))
(rule "commute_or" (formula "5") (term "1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "1,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,1,0,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "6") (term "1,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,1,0,0,1,1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "6") (term "0,0,1,1,0,1,0,1,0"))
(rule "commute_or_2" (formula "6") (term "1,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or_2" (formula "6") (term "0,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or_2" (formula "6") (term "0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,1,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,1,0,0,1,1,0,1,0,1,0"))
(rule "commute_or" (formula "6") (term "0,0,0,1,0,0,1,1,0,1,0,1,0"))
(rule "shift_paren_and" (formula "7") (term "1,1,0"))
(rule "cut_direct" (formula "9") (term "1"))
(branch " CUT: direction >= 4 TRUE"
   (rule "concrete_or_3" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "shift_paren_and" (formula "7") (term "0,1,1,0"))
   (rule "commute_and" (formula "7") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "7") (term "0"))
   (rule "distr_forallAnd" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "commute_or" (formula "8") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "methodBodyExpand" (formula "15") (term "2"))
   (rule "variableDeclarationAssign" (formula "15") (term "2"))
   (rule "variableDeclaration" (formula "15") (term "2") (newnames "newRow"))
   (rule "assignment" (formula "15") (term "2"))
   (builtin "Update Simplification" (formula "15"))
   (rule "variableDeclarationAssign" (formula "15") (term "3"))
   (rule "variableDeclaration" (formula "15") (term "3") (newnames "newCol"))
   (rule "assignment" (formula "15") (term "3"))
   (builtin "Update Simplification" (formula "15"))
   (rule "all_pull_out1" (formula "4") (term "0,1,0"))
   (rule "switch" (formula "15") (term "4"))
   (rule "variableDeclaration" (formula "15") (term "4") (newnames "_var"))
   (rule "assignment" (formula "15") (term "4"))
   (builtin "Update Simplification" (formula "15"))
   (rule "all_pull_out3" (formula "2") (term "0"))
   (rule "shift_paren_or" (formula "2") (term "0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
   (rule "all_pull_out3" (formula "5") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "1,0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,1,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0,0,0,1,0"))
   (rule "all_pull_out1" (formula "6") (term "1,0,1,0,1,0"))
   (rule "ex_pull_out3" (formula "4") (term "0"))
   (rule "all_pull_out3" (formula "5") (term "0"))
   (rule "all_pull_out1" (formula "6") (term "0,1,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "6") (term "0,0,1,0,1,0,1,0"))
   (rule "all_pull_out3" (formula "4") (term "0,0"))
   (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
   (rule "commute_or" (formula "4") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,1,0,0,0"))
   (rule "shift_paren_or" (formula "4") (term "0,0,1,0,0,0"))
   (rule "all_pull_out3" (formula "5") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "commute_or_2" (formula "6") (term "0,0,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0,0,0,0"))
   (rule "all_pull_out1" (formula "7") (term "0,1,0,1,0"))
   (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_1"))
   (rule "equality_comparison_new" (formula "16") (term "4"))
   (builtin "Update Simplification" (formula "16"))
   (rule "insert_constant_value" (formula "16") (term "1,0,0"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
   (builtin "Update Simplification" (formula "16"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
   (builtin "Update Simplification" (formula "16"))
   (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
   (rule "leq_literals" (formula "16") (term "0,0,0"))
   (rule "concrete_and_2" (formula "16") (term "0,0"))
   (rule "concrete_not_2" (formula "16") (term "0"))
   (rule "ifthenelse_true_for" (formula "16"))
   (rule "all_pull_out1" (formula "7") (term "0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0,1,0"))
   (rule "ex_pull_out1" (formula "7") (term "0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "0,0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,0,0,1,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0,0,1,0"))
   (rule "commute_and" (formula "7") (term "0,0,0,0,0,0,0,0,0,1,0"))
   (rule "ex_pull_out3" (formula "7") (term "0"))
   (rule "ex_pull_out3" (formula "7") (term "0,0"))
   (rule "all_pull_out3" (formula "7") (term "0,0,0"))
   (rule "all_pull_out3" (formula "7") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,1,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,1,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0,0"))
   (rule "ifSplit" (formula "16"))
   (branch " if b_1 true"
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " if b_1 false"
      (rule "false_to_not_true" (formula "1") (term "5"))
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "0"))
      (rule "concrete_not_2" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_2"))
      (rule "equality_comparison_new" (formula "16") (term "4"))
      (builtin "Update Simplification" (formula "16"))
      (rule "insert_constant_value" (formula "16") (term "1,0,0"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
      (builtin "Update Simplification" (formula "16"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
      (builtin "Update Simplification" (formula "16"))
      (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0"))
      (rule "leq_literals" (formula "16") (term "0,0,0"))
      (rule "concrete_and_2" (formula "16") (term "0,0"))
      (rule "concrete_not_2" (formula "16") (term "0"))
      (rule "ifthenelse_true_for" (formula "16"))
      (rule "if" (formula "16") (term "5"))
      (builtin "Update Simplification" (formula "16"))
      (rule "boolean_not_equal_2" (formula "16") (term "0"))
      (rule "ifthenelse_false_for" (formula "16"))
      (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_3"))
      (rule "equality_comparison_new" (formula "16") (term "4"))
      (builtin "Update Simplification" (formula "16"))
      (rule "insert_constant_value" (formula "16") (term "1,0,0"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
      (builtin "Update Simplification" (formula "16"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
      (builtin "Update Simplification" (formula "16"))
      (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0"))
      (rule "leq_literals" (formula "16") (term "0,0,0"))
      (rule "concrete_and_2" (formula "16") (term "0,0"))
      (rule "concrete_not_2" (formula "16") (term "0"))
      (rule "ifthenelse_true_for" (formula "16"))
      (rule "ifSplit" (formula "16"))
      (branch " if b_3 true"
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch " if b_3 false"
         (rule "false_to_not_true" (formula "1") (term "5"))
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "0"))
         (rule "concrete_not_2" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_4"))
         (rule "equality_comparison_new" (formula "16") (term "4"))
         (builtin "Update Simplification" (formula "16"))
         (rule "insert_constant_value" (formula "16") (term "1,0,0"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
         (builtin "Update Simplification" (formula "16"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
         (builtin "Update Simplification" (formula "16"))
         (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
         (rule "concrete_and_2" (formula "16") (term "0,0"))
         (rule "concrete_not_2" (formula "16") (term "0"))
         (rule "ifthenelse_true_for" (formula "16"))
         (rule "ifSplit" (formula "16"))
         (branch " if b_4 true"
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " if b_4 false"
            (rule "false_to_not_true" (formula "1") (term "5"))
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "0"))
            (rule "concrete_not_2" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "unusedLabel" (formula "16") (term "4"))
            (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_5"))
            (rule "compound_assignment_3" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_6"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_6"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_7"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_7"))
            (rule "evaluate_lazy_and" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_8"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_8"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_9"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_9"))
            (rule "remove_parentheses_right" (formula "16") (term "4"))
            (rule "evaluate_lazy_and" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_10"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_10"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_11"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_13"))
            (rule "remove_parentheses_right" (formula "16") (term "4"))
            (rule "inequality_comparison_new" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "insert_constant_value" (formula "16") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
            (builtin "Update Simplification" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
            (builtin "Update Simplification" (formula "16"))
            (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
            (rule "leq_literals" (formula "16") (term "0,0,0"))
            (rule "concrete_and_2" (formula "16") (term "0,0"))
            (rule "concrete_not_2" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "compound_assignment_1" (formula "16") (term "5"))
            (rule "ifElse" (formula "16") (term "5"))
            (builtin "Update Simplification" (formula "16"))
            (rule "boolean_equal" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "ifElse" (formula "16") (term "5"))
            (builtin "Update Simplification" (formula "16"))
            (rule "boolean_not_equal_2" (formula "16") (term "0"))
            (rule "ifthenelse_false_for" (formula "16"))
            (rule "elim_double_block_2" (formula "16") (term "4"))
            (rule "inequality_comparison_new" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "insert_constant_value" (formula "16") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
            (builtin "Update Simplification" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
            (builtin "Update Simplification" (formula "16"))
            (rule "blockEmpty" (formula "16") (term "5,1"))
            (rule "blockEmpty" (formula "16") (term "5,2"))
            (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "leq_literals" (formula "16") (term "0,0,0"))
            (rule "concrete_and_2" (formula "16") (term "0,0"))
            (rule "concrete_not_2" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "compound_assignment_1" (formula "16") (term "5"))
            (rule "ifElse" (formula "16") (term "5"))
            (builtin "Update Simplification" (formula "16"))
            (rule "boolean_equal" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "ifElseSplit" (formula "16"))
            (branch " if b_8 true"
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " if b_8 false"
               (rule "false_to_not_true" (formula "1") (term "5"))
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "0"))
               (rule "concrete_not_2" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "elim_double_block_2" (formula "16") (term "4"))
               (rule "inequality_comparison_new" (formula "16") (term "4"))
               (builtin "Update Simplification" (formula "16"))
               (rule "insert_constant_value" (formula "16") (term "1,0,0"))
               (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
               (builtin "Update Simplification" (formula "16"))
               (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
               (builtin "Update Simplification" (formula "16"))
               (rule "blockEmpty" (formula "16") (term "5,1"))
               (rule "blockEmpty" (formula "16") (term "5,2"))
               (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "leq_literals" (formula "16") (term "0,0,0"))
               (rule "concrete_and_2" (formula "16") (term "0,0"))
               (rule "concrete_not_2" (formula "16") (term "0"))
               (rule "ifthenelse_true_for" (formula "16"))
               (rule "compound_assignment_1" (formula "16") (term "5"))
               (rule "ifElse" (formula "16") (term "5"))
               (builtin "Update Simplification" (formula "16"))
               (rule "boolean_equal" (formula "16") (term "0"))
               (rule "ifthenelse_true_for" (formula "16"))
               (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
               (builtin "Update Simplification" (formula "16"))
               (rule "ifElseSplit" (formula "16"))
               (branch " if b_6 true"
                  (builtin "Update Simplification" (formula "17"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_6 false"
                  (rule "false_to_not_true" (formula "1") (term "5"))
                  (builtin "Update Simplification" (formula "17"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inequality_comparison_new" (formula "16") (term "4"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "insert_constant_value" (formula "16") (term "1,0,0"))
                  (rule "assignment_instance_field_of_this" (formula "16") (term "3,2"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "assignment_instance_field_of_this" (formula "16") (term "3,1"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "4,1"))
                  (rule "blockEmpty" (formula "16") (term "4,2"))
                  (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "14"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "16") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "16") (term "0,0"))
                  (rule "concrete_not_2" (formula "16") (term "0"))
                  (rule "ifthenelse_true_for" (formula "16"))
                  (rule "ifSplit" (formula "16"))
                  (branch " if b_5 true"
                     (builtin "Update Simplification" (formula "17"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_equal" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "blockThrow" (formula "16") (term "3"))
                     (rule "throwUnfold" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException"))
                     (rule "variableDeclarationAssign" (formula "16") (term "3"))
                     (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException"))
                     (rule "instanceCreationAssignment" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_1"))
                     (rule "variableDeclarationAssign" (formula "16") (term "3"))
                     (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_1"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_2"))
                     (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_2"))
                     (rule "methodBodyExpand" (formula "16") (term "3"))
                     (rule "variableDeclaration" (formula "16") (term "3") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_3"))
                     (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_3"))
                     (rule "allocateInstance" (formula "16") (term "3") (inst "#v0=var"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "blockEmpty" (formula "16") (term "7"))
                     (rule "assignment" (formula "16") (term "7"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "polySimp_addComm0" (formula "16") (term "4"))
                     (rule "methodBodyExpand" (formula "16") (term "7"))
                     (rule "assignment_instance_field_of_this" (formula "16") (term "7"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "assignment_instance_field_of_this" (formula "16") (term "9"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "methodCallWithinClass" (formula "16") (term "11"))
                     (rule "methodBodyExpand" (formula "16") (term "11"))
                     (rule "methodCallSuper" (formula "16") (term "11"))
                     (rule "nextToCreate_non_negative" (formula "16") (term "0,5") (ifseqformula "1"))
                     (rule "methodBodyExpand" (formula "17") (term "11"))
                     (rule "methodCallSuper" (formula "17") (term "11"))
                     (rule "methodBodyExpand" (formula "17") (term "11"))
                     (rule "methodCallSuper" (formula "17") (term "11"))
                     (rule "methodBodyExpand" (formula "17") (term "11"))
                     (rule "methodCallSuper" (formula "17") (term "11"))
                     (rule "methodBodyExpand" (formula "17") (term "11"))
                     (rule "methodCallEmpty" (formula "17") (term "11"))
                     (rule "blockEmpty" (formula "17") (term "11"))
                     (rule "assignment_instance_field_of_this" (formula "17") (term "11"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "assignment_instance_field_of_this" (formula "17") (term "13"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "blockEmpty" (formula "17") (term "15"))
                     (rule "methodCallReturnIgnoreResult" (formula "17") (term "15"))
                     (rule "methodCallReturn" (formula "17") (term "15"))
                     (rule "assignment" (formula "17") (term "15"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "blockEmpty" (formula "17") (term "15"))
                     (rule "assignment" (formula "17") (term "15"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "methodBodyExpand" (formula "17") (term "15"))
                     (rule "methodCallSuper" (formula "17") (term "15"))
                     (rule "methodBodyExpand" (formula "17") (term "15"))
                     (rule "methodCallSuper" (formula "17") (term "15"))
                     (rule "methodBodyExpand" (formula "17") (term "15"))
                     (rule "methodCallSuper" (formula "17") (term "15"))
                     (rule "methodBodyExpand" (formula "17") (term "15"))
                     (rule "methodCallSuper" (formula "17") (term "15"))
                     (rule "methodBodyExpand" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "blockEmpty" (formula "17") (term "15"))
                     (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                     (builtin "Update Simplification" (formula "17"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "methodCallEmpty" (formula "17") (term "15"))
                     (rule "blockEmpty" (formula "17") (term "15"))
                     (rule "assignment_write_attribute_primitive" (formula "17") (term "15"))
                     (branch " Normal Execution (v_IllegalArgumentException_1 != null)"
                        (builtin "Update Simplification" (formula "18"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "repository_object_non_null" (formula "17"))
                        (rule "false_right" (formula "17"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "methodCallParamThrow" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "tryCatchThrow" (formula "17") (term "13"))
                        (rule "ifElseUnfold" (formula "17") (term "13") (inst "#boolv=b"))
                        (rule "variableDeclaration" (formula "17") (term "13") (newnames "b_22"))
                        (rule "equality_comparison_new" (formula "17") (term "13"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "repository_object_non_null" (formula "17") (term "0,0"))
                        (rule "concrete_not_2" (formula "17") (term "0"))
                        (rule "ifthenelse_true_for" (formula "17"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "13"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "ifElseSplit" (formula "17"))
                        (branch " if b_22 true"
                           (builtin "Update Simplification" (formula "18"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch " if b_22 false"
                           (rule "false_to_not_true" (formula "1") (term "14"))
                           (builtin "Update Simplification" (formula "18"))
                           (builtin "Update Simplification" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "0"))
                           (rule "concrete_not_2" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "elim_double_block" (formula "17") (term "13"))
                           (rule "ifElse" (formula "17") (term "13"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "repository_object_non_null" (formula "17") (term "0,0,0"))
                           (rule "ifthenelse_false" (formula "17") (term "0,0"))
                           (rule "elim_double_block" (formula "17") (term "13,1"))
                           (rule "blockThrow" (formula "17") (term "13,2"))
                           (rule "variableDeclaration" (formula "17") (term "13,1") (newnames "e"))
                           (rule "throwDiamond" (formula "17") (term "13,2"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "assignment_instance_field_of_this" (formula "17") (term "13,1"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "assignment_instance_field_of_this" (formula "17") (term "13,1"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "instanceof_static_type" (formula "17") (term "0,0"))
                           (rule "boolean_equal" (formula "17") (term "0"))
                           (rule "ifthenelse_true_for" (formula "17"))
                           (rule "emptyModality" (formula "17") (term "12"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "repository_object_non_null" (formula "17") (term "0,0"))
                           (rule "concrete_not_2" (formula "17") (term "0"))
                           (rule "concrete_and_1" (formula "17"))
                           (rule "instanceof_static_type" (formula "17") (term "0"))
                           (rule "boolean_equal" (formula "17"))
                           (rule "closeTrue" (formula "17"))
                        )
                     )
                     (branch " Null Reference (v_IllegalArgumentException_1 = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "repository_object_non_null" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch " if b_5 false"
                     (rule "false_to_not_true" (formula "1") (term "4"))
                     (builtin "Update Simplification" (formula "17"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_equal" (formula "1") (term "0"))
                     (rule "concrete_not_1" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
   )
)
(branch " CUT: direction >= 4 FALSE"
   (rule "concrete_or_4" (formula "9"))
   (rule "inEqSimp_geqRight" (formula "10"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "10"))
   (rule "leq_literals" (formula "1") (term "0"))
   (rule "concrete_or_1" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "shift_paren_and" (formula "7") (term "0,1,1,0"))
   (rule "commute_and" (formula "7") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "7") (term "0"))
   (rule "distr_forallAnd" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "commute_or" (formula "8") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or" (formula "9") (term "0"))
   (rule "methodBodyExpand" (formula "15") (term "2"))
   (rule "variableDeclarationAssign" (formula "15") (term "2"))
   (rule "variableDeclaration" (formula "15") (term "2") (newnames "newRow_1"))
   (rule "assignment_instance_field_of_this" (formula "15") (term "2"))
   (builtin "Update Simplification" (formula "15"))
   (rule "variableDeclarationAssign" (formula "15") (term "3"))
   (rule "variableDeclaration" (formula "15") (term "3") (newnames "newCol_1"))
   (rule "assignment" (formula "15") (term "3"))
   (builtin "Update Simplification" (formula "15"))
   (rule "all_pull_out1" (formula "4") (term "0,1,0"))
   (rule "switch" (formula "15") (term "4"))
   (rule "variableDeclaration" (formula "15") (term "4") (newnames "_var_1"))
   (rule "assignment" (formula "15") (term "4"))
   (builtin "Update Simplification" (formula "15"))
   (rule "all_pull_out3" (formula "2") (term "0"))
   (rule "shift_paren_or" (formula "2") (term "0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
   (rule "all_pull_out3" (formula "5") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "1,0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,1,0,0,1,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,1,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0,0,0,1,0"))
   (rule "all_pull_out1" (formula "6") (term "1,0,1,0,1,0"))
   (rule "ex_pull_out3" (formula "4") (term "0"))
   (rule "all_pull_out3" (formula "5") (term "0"))
   (rule "all_pull_out1" (formula "6") (term "0,1,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "6") (term "0,0,1,0,1,0,1,0"))
   (rule "all_pull_out3" (formula "4") (term "0,0"))
   (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
   (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,1,0,0,0"))
   (rule "commute_or" (formula "4") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "4") (term "0,0,1,0,0,0"))
   (rule "all_pull_out3" (formula "5") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "commute_or_2" (formula "6") (term "0,0,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0,0,0,0"))
   (rule "all_pull_out1" (formula "7") (term "0,1,0,1,0"))
   (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "16") (term "4") (newnames "b"))
   (rule "equality_comparison_new" (formula "16") (term "4"))
   (builtin "Update Simplification" (formula "16"))
   (rule "insert_constant_value" (formula "16") (term "1,0,0"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
   (builtin "Update Simplification" (formula "16"))
   (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
   (builtin "Update Simplification" (formula "16"))
   (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "16") (term "0,0,0"))
   (rule "concrete_and_2" (formula "16") (term "0,0"))
   (rule "concrete_not_2" (formula "16") (term "0"))
   (rule "ifthenelse_true_for" (formula "16"))
   (rule "all_pull_out1" (formula "7") (term "0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,1,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0,1,0"))
   (rule "ex_pull_out1" (formula "7") (term "0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "0,0,1,0"))
   (rule "all_pull_out1" (formula "7") (term "0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,0,1,0"))
   (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,0,0,1,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0,0,1,0"))
   (rule "commute_and" (formula "7") (term "0,0,0,0,0,0,0,0,0,1,0"))
   (rule "ex_pull_out3" (formula "7") (term "0"))
   (rule "ex_pull_out3" (formula "7") (term "0,0"))
   (rule "all_pull_out3" (formula "7") (term "0,0,0"))
   (rule "all_pull_out3" (formula "7") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,1,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,1,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "7") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0"))
   (rule "commute_and_2" (formula "7") (term "0,0,0,0,0,0,0,0"))
   (rule "ifSplit" (formula "16"))
   (branch " if b true"
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " if b false"
      (rule "false_to_not_true" (formula "1") (term "5"))
      (builtin "Update Simplification" (formula "17"))
      (builtin "Update Simplification" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "0"))
      (rule "concrete_not_2" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_11"))
      (rule "equality_comparison_new" (formula "16") (term "4"))
      (builtin "Update Simplification" (formula "16"))
      (rule "insert_constant_value" (formula "16") (term "1,0,0"))
      (rule "assignment" (formula "16") (term "4,1"))
      (builtin "Update Simplification" (formula "16"))
      (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
      (builtin "Update Simplification" (formula "16"))
      (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "16") (term "0,0,0"))
      (rule "concrete_and_2" (formula "16") (term "0,0"))
      (rule "concrete_not_2" (formula "16") (term "0"))
      (rule "ifthenelse_true_for" (formula "16"))
      (rule "ifSplit" (formula "16"))
      (branch " if b_11 true"
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch " if b_11 false"
         (rule "false_to_not_true" (formula "1") (term "5"))
         (builtin "Update Simplification" (formula "17"))
         (builtin "Update Simplification" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "0"))
         (rule "concrete_not_2" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_12"))
         (rule "equality_comparison_new" (formula "16") (term "4"))
         (builtin "Update Simplification" (formula "16"))
         (rule "insert_constant_value" (formula "16") (term "1,0,0"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
         (builtin "Update Simplification" (formula "16"))
         (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
         (builtin "Update Simplification" (formula "16"))
         (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "16") (term "0,0,0"))
         (rule "concrete_and_2" (formula "16") (term "0,0"))
         (rule "concrete_not_2" (formula "16") (term "0"))
         (rule "ifthenelse_true_for" (formula "16"))
         (rule "ifSplit" (formula "16"))
         (branch " if b_12 true"
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " if b_12 false"
            (rule "false_to_not_true" (formula "1") (term "5"))
            (builtin "Update Simplification" (formula "17"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "0"))
            (rule "concrete_not_2" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_14"))
            (rule "equality_comparison_new" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "insert_constant_value" (formula "16") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
            (builtin "Update Simplification" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
            (builtin "Update Simplification" (formula "16"))
            (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,0,0"))
            (rule "concrete_and_2" (formula "16") (term "0,0"))
            (rule "concrete_not_2" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "if" (formula "16") (term "5"))
            (builtin "Update Simplification" (formula "16"))
            (rule "boolean_not_equal_2" (formula "16") (term "0"))
            (rule "ifthenelse_false_for" (formula "16"))
            (rule "unusedLabel" (formula "16") (term "4"))
            (rule "ifUnfold" (formula "16") (term "4") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_15"))
            (rule "evaluate_lazy_and" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_16"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_16"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_17"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_17"))
            (rule "remove_parentheses_right" (formula "16") (term "4"))
            (rule "evaluate_lazy_and" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_18"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_18"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_19"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_19"))
            (rule "remove_parentheses_right" (formula "16") (term "4"))
            (rule "evaluate_lazy_and" (formula "16") (term "4"))
            (rule "ifElseUnfold" (formula "16") (term "4") (inst "#boolv=b_20"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_20"))
            (rule "compound_assignment_2" (formula "16") (term "4") (inst "#v=b_21"))
            (rule "variableDeclarationAssign" (formula "16") (term "4"))
            (rule "variableDeclaration" (formula "16") (term "4") (newnames "b_21"))
            (rule "remove_parentheses_right" (formula "16") (term "4"))
            (rule "inequality_comparison_new" (formula "16") (term "4"))
            (builtin "Update Simplification" (formula "16"))
            (rule "insert_constant_value" (formula "16") (term "1,0,0"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
            (builtin "Update Simplification" (formula "16"))
            (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
            (builtin "Update Simplification" (formula "16"))
            (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,0,0"))
            (rule "concrete_and_2" (formula "16") (term "0,0"))
            (rule "concrete_not_2" (formula "16") (term "0"))
            (rule "ifthenelse_true_for" (formula "16"))
            (rule "compound_assignment_1" (formula "16") (term "5"))
            (rule "ifElseSplit" (formula "16"))
            (branch " if b_21 true"
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
               (builtin "Update Simplification" (formula "16"))
               (rule "ifElseSplit" (formula "16"))
               (branch " if b_20 true"
                  (builtin "Update Simplification" (formula "17"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch " if b_20 false"
                  (rule "false_to_not_true" (formula "1") (term "5"))
                  (builtin "Update Simplification" (formula "17"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "0"))
                  (rule "concrete_not_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "elim_double_block_2" (formula "16") (term "4"))
                  (rule "inequality_comparison_new" (formula "16") (term "4"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "insert_constant_value" (formula "16") (term "1,0,0"))
                  (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "5,1"))
                  (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "5,2"))
                  (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "16") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "16") (term "0,0"))
                  (rule "concrete_not_2" (formula "16") (term "0"))
                  (rule "ifthenelse_true_for" (formula "16"))
                  (rule "compound_assignment_1" (formula "16") (term "5"))
                  (rule "ifElse" (formula "16") (term "5"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "boolean_equal" (formula "16") (term "0"))
                  (rule "ifthenelse_true_for" (formula "16"))
                  (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
                  (builtin "Update Simplification" (formula "16"))
                  (rule "ifElseSplit" (formula "16"))
                  (branch " if b_18 true"
                     (builtin "Update Simplification" (formula "17"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " if b_18 false"
                     (rule "false_to_not_true" (formula "1") (term "5"))
                     (builtin "Update Simplification" (formula "17"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "0"))
                     (rule "concrete_not_2" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elim_double_block_2" (formula "16") (term "4"))
                     (rule "inequality_comparison_new" (formula "16") (term "4"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "insert_constant_value" (formula "16") (term "1,0,0"))
                     (rule "assignment_instance_field_of_this" (formula "16") (term "4,1"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "blockEmpty" (formula "16") (term "5,1"))
                     (rule "assignment_instance_field_of_this" (formula "16") (term "4,2"))
                     (builtin "Update Simplification" (formula "16"))
                     (rule "blockEmpty" (formula "16") (term "5,2"))
                     (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "16") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "16") (term "0,0"))
                     (rule "concrete_not_2" (formula "16") (term "0"))
                     (rule "ifthenelse_true_for" (formula "16"))
                     (rule "compound_assignment_1" (formula "16") (term "5"))
                     (rule "ifElseSplit" (formula "16"))
                     (branch " if b_17 true"
                        (builtin "Update Simplification" (formula "17"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment_instance_field_of_this" (formula "16") (term "4"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "ifElse" (formula "16") (term "5"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "boolean_not_equal_2" (formula "16") (term "0"))
                        (rule "ifthenelse_false_for" (formula "16"))
                        (rule "elim_double_block_2" (formula "16") (term "4"))
                        (rule "inequality_comparison_new" (formula "16") (term "4"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "insert_constant_value" (formula "16") (term "1,0,0"))
                        (rule "assignment_instance_field_of_this" (formula "16") (term "3,1"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "blockEmpty" (formula "16") (term "4,1"))
                        (rule "assignment_instance_field_of_this" (formula "16") (term "3,2"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "blockEmpty" (formula "16") (term "4,2"))
                        (rule "inEqSimp_contradEq3" (formula "16") (term "0,0") (ifseqformula "14"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "16") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "16") (term "0,0"))
                        (rule "concrete_not_2" (formula "16") (term "0"))
                        (rule "ifthenelse_true_for" (formula "16"))
                        (rule "if" (formula "16") (term "4"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "boolean_equal" (formula "16") (term "0"))
                        (rule "ifthenelse_true_for" (formula "16"))
                        (rule "blockThrow" (formula "16") (term "3"))
                        (rule "throwUnfold" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException"))
                        (rule "variableDeclarationAssign" (formula "16") (term "3"))
                        (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_4"))
                        (rule "instanceCreationAssignment" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_5"))
                        (rule "variableDeclarationAssign" (formula "16") (term "3"))
                        (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_5"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_6"))
                        (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_6"))
                        (rule "methodBodyExpand" (formula "16") (term "3"))
                        (rule "variableDeclaration" (formula "16") (term "3") (newnames "__NEW___1"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "3") (inst "#v0=v_IllegalArgumentException_7"))
                        (rule "variableDeclaration" (formula "16") (term "3") (newnames "v_IllegalArgumentException_7"))
                        (rule "allocateInstance" (formula "16") (term "3") (inst "#v0=var"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "blockEmpty" (formula "16") (term "7"))
                        (rule "assignment" (formula "16") (term "7"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "polySimp_addComm0" (formula "16") (term "4"))
                        (rule "methodBodyExpand" (formula "16") (term "7"))
                        (rule "assignment_instance_field_of_this" (formula "16") (term "7"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "assignment_instance_field_of_this" (formula "16") (term "9"))
                        (builtin "Update Simplification" (formula "16"))
                        (rule "methodCallWithinClass" (formula "16") (term "11"))
                        (rule "methodBodyExpand" (formula "16") (term "11"))
                        (rule "methodCallSuper" (formula "16") (term "11"))
                        (rule "nextToCreate_non_negative" (formula "16") (term "0,5") (ifseqformula "1"))
                        (rule "methodBodyExpand" (formula "17") (term "11"))
                        (rule "methodCallSuper" (formula "17") (term "11"))
                        (rule "methodBodyExpand" (formula "17") (term "11"))
                        (rule "methodCallSuper" (formula "17") (term "11"))
                        (rule "methodBodyExpand" (formula "17") (term "11"))
                        (rule "methodCallSuper" (formula "17") (term "11"))
                        (rule "methodBodyExpand" (formula "17") (term "11"))
                        (rule "methodCallEmpty" (formula "17") (term "11"))
                        (rule "blockEmpty" (formula "17") (term "11"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "11"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "13"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "blockEmpty" (formula "17") (term "15"))
                        (rule "methodCallReturnIgnoreResult" (formula "17") (term "15"))
                        (rule "methodCallReturn" (formula "17") (term "15"))
                        (rule "assignment" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "blockEmpty" (formula "17") (term "15"))
                        (rule "assignment" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "methodBodyExpand" (formula "17") (term "15"))
                        (rule "methodCallSuper" (formula "17") (term "15"))
                        (rule "methodBodyExpand" (formula "17") (term "15"))
                        (rule "methodCallSuper" (formula "17") (term "15"))
                        (rule "methodBodyExpand" (formula "17") (term "15"))
                        (rule "methodCallSuper" (formula "17") (term "15"))
                        (rule "methodBodyExpand" (formula "17") (term "15"))
                        (rule "methodCallSuper" (formula "17") (term "15"))
                        (rule "methodBodyExpand" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "blockEmpty" (formula "17") (term "15"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                        (builtin "Update Simplification" (formula "17"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "methodCallEmpty" (formula "17") (term "15"))
                        (rule "blockEmpty" (formula "17") (term "15"))
                        (rule "assignment_write_attribute_primitive" (formula "17") (term "15"))
                        (branch " Normal Execution (v_IllegalArgumentException_5 != null)"
                           (builtin "Update Simplification" (formula "18"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "repository_object_non_null" (formula "17"))
                           (rule "false_right" (formula "17"))
                           (rule "assignment_instance_field_of_this" (formula "17") (term "15"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "methodCallParamThrow" (formula "17") (term "15"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "tryCatchThrow" (formula "17") (term "13"))
                           (rule "ifElseUnfold" (formula "17") (term "13") (inst "#boolv=b"))
                           (rule "variableDeclaration" (formula "17") (term "13") (newnames "b_23"))
                           (rule "equality_comparison_new" (formula "17") (term "13"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "repository_object_non_null" (formula "17") (term "0,0"))
                           (rule "concrete_not_2" (formula "17") (term "0"))
                           (rule "ifthenelse_true_for" (formula "17"))
                           (rule "assignment_instance_field_of_this" (formula "17") (term "13"))
                           (builtin "Update Simplification" (formula "17"))
                           (rule "ifElseSplit" (formula "17"))
                           (branch " if b_23 true"
                              (builtin "Update Simplification" (formula "18"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch " if b_23 false"
                              (rule "false_to_not_true" (formula "1") (term "14"))
                              (builtin "Update Simplification" (formula "18"))
                              (builtin "Update Simplification" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "0"))
                              (rule "concrete_not_2" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "elim_double_block" (formula "17") (term "13"))
                              (rule "ifElse" (formula "17") (term "13"))
                              (builtin "Update Simplification" (formula "17"))
                              (rule "repository_object_non_null" (formula "17") (term "0,0,0"))
                              (rule "ifthenelse_false" (formula "17") (term "0,0"))
                              (rule "elim_double_block" (formula "17") (term "13,1"))
                              (rule "blockThrow" (formula "17") (term "13,2"))
                              (rule "variableDeclaration" (formula "17") (term "13,1") (newnames "e_1"))
                              (rule "throwDiamond" (formula "17") (term "13,2"))
                              (builtin "Update Simplification" (formula "17"))
                              (rule "assignment_instance_field_of_this" (formula "17") (term "13,1"))
                              (builtin "Update Simplification" (formula "17"))
                              (rule "assignment_instance_field_of_this" (formula "17") (term "13,1"))
                              (builtin "Update Simplification" (formula "17"))
                              (rule "instanceof_static_type" (formula "17") (term "0,0"))
                              (rule "boolean_equal" (formula "17") (term "0"))
                              (rule "ifthenelse_true_for" (formula "17"))
                              (rule "emptyModality" (formula "17") (term "12"))
                              (builtin "Update Simplification" (formula "17"))
                              (rule "repository_object_non_null" (formula "17") (term "0,0"))
                              (rule "concrete_not_2" (formula "17") (term "0"))
                              (rule "concrete_and_1" (formula "17"))
                              (rule "instanceof_static_type" (formula "17") (term "0"))
                              (rule "boolean_equal" (formula "17"))
                              (rule "closeTrue" (formula "17"))
                           )
                        )
                        (branch " Null Reference (v_IllegalArgumentException_5 = null)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "repository_object_non_null" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch " if b_17 false"
                        (rule "false_to_not_true" (formula "1") (term "5"))
                        (builtin "Update Simplification" (formula "17"))
                        (builtin "Update Simplification" (formula "1"))
                        (rule "boolean_equal" (formula "1") (term "0"))
                        (rule "concrete_not_1" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch " if b_21 false"
               (rule "false_to_not_true" (formula "1") (term "5"))
               (builtin "Update Simplification" (formula "17"))
               (builtin "Update Simplification" (formula "1"))
               (rule "boolean_equal" (formula "1") (term "0"))
               (rule "concrete_not_1" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
)
)

}
