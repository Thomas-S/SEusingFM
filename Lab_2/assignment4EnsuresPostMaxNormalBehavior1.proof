\settings {
"#Proof-Settings-Config-File
#Tue Feb 14 15:05:14 CET 2012
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=SIMPLIFY_PROVER
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[Choice]DefaultChoices=transactions-transactions\\:transactionsOff , throughout-throughout\\:toutOff , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff , rtsj-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool , memory-memory\\:off , javacard-javacard\\:jcOff
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_EXPAND
[DecisionProcedure]pd_mode=0
[DecisionProcedure]Exec=Z3\\=z3 -smt -m %f\\:Simplify\\=simplify.exe %f\\:Yices\\=yices -tc -e -smt %f\\:CVC3\\=cvc3 -lang smt +model %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , throughout-throughout\\:toutOn-throughout\\:toutOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:Java-programRules\\:ODL , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , rtsj-rtsj\\:on-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool-stringRules\\:withoutStringPool , memory-memory\\:off-memory\\:on , javacard-javacard\\:jcOff-javacard\\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[TacletTranslation]maxGeneric=3
"
}

\javaSource "C:\\Users\\dome\\UNI\\WS_11_12\\SEFM\\SEFM_Git\\Lab_2\\MazeLab";



\programVariables {
java.lang.Throwable exc;
maze.HighscoreSorted self;
int result;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & (  \forall maze.HighscoreSorted m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (   inInt(i)
                 -> \forall jint j; 
                      (     i >= (jint)(0)
                          & (  j >= (jint)(0)
                             & (  j <= i
                                &    i
                                  <  m_0.size@(maze.Highscore)))
                          & inInt(j)
                       ->    m_0.highscores@(maze.Highscore)[j].score@(maze.Record)
                          <= m_0.highscores@(maze.Highscore)[i].score@(maze.Record))))
      & \forall maze.HighscoreSorted m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (   inInt(i)
                 -> \forall jint j; 
                      (     i >= (jint)(0)
                          & (  j >= (jint)(0)
                             & (  j <= i
                                &    i
                                  <  m_0.size@(maze.Highscore)))
                          & inInt(j)
                       ->    m_0.highscores@(maze.Highscore)[j].score@(maze.Record)
                          <= m_0.highscores@(maze.Highscore)[i].score@(maze.Record)))))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & self.size@(maze.Highscore) >  (jint)(0)
-> \<{
       exc=null;try {
         result=self.max()@maze.HighscoreSorted;
       }  catch (java.lang.Throwable e) {
         exc=e;
       }
     }\> (  \forall jint i; 
              (     i >= (jint)(0)
                  & i <  self.size@(maze.Highscore)
                  & inInt(i)
               ->    self.highscores@(maze.Highscore)[i].score@(maze.Record)
                  <= self.highscores@(maze.Highscore)[result].score@(maze.Record))
          & exc = null)

}

\proof {
(keyLog "0" (keyUser "dome" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "480")

(branch "dummy ID"
(rule "eq_and" (formula "1") (term "1,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,0,0,1"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,1,0,0,0"))
(rule "inInt" (formula "1") (term "0,0,1,0,1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,1,0,0,0"))
(rule "concrete_impl_1" (formula "1") (term "0,1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "4"))
(rule "assignment_instance_field_of_this" (formula "6"))
(rule "castDelInt" (formula "4") (term "1"))
(rule "castDelInt" (formula "2") (term "1,0,1,0,0,0,1,0"))
(rule "castDelInt" (formula "2") (term "1,0,0,0,0,1,0"))
(rule "castDelInt" (formula "6") (term "1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,1,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,1,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,1,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,1,1,1,0,0,0,1,0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0,0,0,1"))
(rule "nnf_imp2or" (formula "2") (term "0,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,0,1"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "2") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,1,0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,1,0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,1,0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "1,0,1,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "2") (term "1,1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,1,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,1,1,0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,1,1,0,0,0,1,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,1,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "0,1,1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,1,1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,1,1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,1,1,0,0,0,1,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "shift_paren_or" (formula "2") (term "1,0,0,0,1,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0,1,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0,0,1,0"))
(rule "all_pull_out3" (formula "2") (term "0"))
(rule "all_pull_out3" (formula "2") (term "0,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
(rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
(rule "commute_or" (formula "2") (term "0,0,0,0,0,0"))
(rule "methodBodyExpand" (formula "6") (term "1"))
(rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "b"))
(rule "greater_than_comparison_new" (formula "6") (term "1"))
(builtin "Update Simplification" (formula "6"))
(rule "assignment_instance_field_of_this" (formula "6") (term "1,2"))
(builtin "Update Simplification" (formula "6"))
(rule "assignment_instance_field_of_this" (formula "6") (term "1,1"))
(builtin "Update Simplification" (formula "6"))
(rule "inEqSimp_gtToGeq" (formula "6") (term "0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0"))
(rule "mul_literals" (formula "6") (term "1,0"))
(rule "replace_known_left" (formula "6") (term "0") (ifseqformula "4"))
(rule "ifthenelse_true_for" (formula "6"))
(rule "ifElse" (formula "6") (term "2"))
(builtin "Update Simplification" (formula "6"))
(rule "boolean_equal" (formula "6") (term "0"))
(rule "ifthenelse_true_for" (formula "6"))
(rule "returnUnfold" (formula "6") (term "1") (inst "#v0=j"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "j"))
(rule "assignmentSubtractionInt" (formula "6") (term "1"))
(builtin "Update Simplification" (formula "6"))
(rule "methodCallReturn" (formula "6") (term "2"))
(rule "assignment" (formula "6") (term "2"))
(builtin "Update Simplification" (formula "6"))
(rule "methodCallEmpty" (formula "6") (term "2"))
(rule "tryEmpty" (formula "6") (term "2"))
(rule "castDelInt" (formula "6") (term "1"))
(rule "translateJavaSubInt" (formula "6") (term "1"))
(rule "polySimp_elimSub" (formula "6") (term "1"))
(rule "mul_literals" (formula "6") (term "1,1"))
(rule "polySimp_addComm0" (formula "6") (term "1"))
(rule "emptyModality" (formula "6") (term "2"))
(builtin "Update Simplification" (formula "6"))
(rule "eqClose" (formula "6") (term "1"))
(rule "concrete_and_3" (formula "6"))
(rule "allRight" (formula "6") (inst "sk=i_0"))
(rule "orRight" (formula "6"))
(rule "orRight" (formula "6"))
(rule "castDelInt" (formula "8") (term "1,0,1"))
(rule "inEqSimp_leqRight" (formula "6"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "add_zero_left" (formula "1") (term "0"))
(rule "inEqSimp_geqRight" (formula "7"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
(rule "inEqSimp_leqRight" (formula "8"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0"))
(rule "allLeft" (formula "5") (inst "t=self"))
(rule "replace_known_left" (formula "5") (term "0,1,0,0,0,0") (ifseqformula "7"))
(rule "concrete_not_1" (formula "5") (term "1,0,0,0,0"))
(rule "concrete_or_4" (formula "5") (term "0,0,0,0"))
(rule "replace_known_right" (formula "5") (term "1,0,0,0,0") (ifseqformula "9"))
(rule "concrete_or_4" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,0"))
(rule "commute_or_2" (formula "5") (term "0,0,0"))
(rule "commute_or_2" (formula "5") (term "0,0,0,0"))
(rule "allLeft" (formula "5") (inst "t=(jint)(-1 + self.size@(maze.Highscore))"))
(rule "castDelInt" (formula "5") (term "1,1,1,0,0"))
(rule "castDelInt" (formula "5") (term "0,0,0,0,0,0"))
(rule "castDelInt" (formula "5") (term "0,1,0,0,0,0"))
(rule "castDelInt" (formula "5") (term "1,0,1,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "1,1,0,0"))
(rule "add_literals" (formula "5") (term "0,1,1,0,0"))
(rule "add_zero_left" (formula "5") (term "1,1,0,0"))
(rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,0,0,0,0"))
(rule "inEqSimp_homoInEq1" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,1,0,0,0,0"))
(rule "polySimp_addComm0" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "5") (term "0,1,0,0,0,0"))
(rule "add_literals" (formula "5") (term "1,1,0,1,0,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,1,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,1,0,0,0,0"))
(rule "leq_literals" (formula "5") (term "1,0,0,0,0"))
(rule "concrete_or_4" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_invertInEq1" (formula "5") (term "0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0,0"))
(rule "times_zero_2" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0,0") (ifseqformula "9"))
(rule "qeq_literals" (formula "5") (term "0,0,0,0,0"))
(rule "concrete_and_2" (formula "5") (term "0,0,0,0"))
(rule "concrete_or_2" (formula "5") (term "0,0,0"))
(rule "allLeft" (formula "5") (inst "t=i_0"))
(rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "1"))
(rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "3"))
(rule "qeq_literals" (formula "5") (term "0,0,0"))
(rule "concrete_and_2" (formula "5") (term "0,0"))
(rule "concrete_or_2" (formula "5") (term "0"))
(rule "inEqSimp_contradInEq0" (formula "5") (term "1") (ifseqformula "1"))
(rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
(rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
(rule "add_literals" (formula "5") (term "1,1,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,1"))
(rule "leq_literals" (formula "5") (term "0,1"))
(rule "concrete_and_2" (formula "5") (term "1"))
(rule "concrete_or_4" (formula "5"))
(rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "2"))
(rule "andLeft" (formula "5"))
(rule "inEqSimp_homoInEq1" (formula "5"))
(rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
(rule "add_literals" (formula "5") (term "1,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0"))
(rule "add_zero_right" (formula "5") (term "0"))
(rule "leq_literals" (formula "5"))
(rule "closeFalse" (formula "5"))
)

}
