\settings {
"#Proof-Settings-Config-File
#Mon Feb 13 14:11:23 CET 2012
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=SIMPLIFY_PROVER
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[Choice]DefaultChoices=throughout-throughout\\:toutOff , transactions-transactions\\:transactionsOff , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff , rtsj-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool , memory-memory\\:off , javacard-javacard\\:jcOff
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_EXPAND
[DecisionProcedure]pd_mode=0
[DecisionProcedure]Exec=Z3\\=z3 -smt -m %f\\:Simplify\\=simplify.exe %f\\:Yices\\=yices -tc -e -smt %f\\:CVC3\\=cvc3 -lang smt +model %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , throughout-throughout\\:toutOn-throughout\\:toutOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:Java-programRules\\:ODL , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , rtsj-rtsj\\:on-rtsj\\:off , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , stringRules-stringRules\\:withStringPool-stringRules\\:withoutStringPool , memory-memory\\:off-memory\\:on , javacard-javacard\\:jcOff-javacard\\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[TacletTranslation]maxGeneric=3
"
}

\javaSource "C:\\Users\\dome\\UNI\\WS_11_12\\SEFM\\SEFM_Git\\Lab_2\\MazeLab";



\programVariables {
java.lang.Throwable exc;
maze.Highscore self;
int result;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & (  \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->      m_0.capacity@(maze.Highscore)
                >  (jint)(0)
              &    m_0.capacity@(maze.Highscore)
                <= m_0.highscores@(maze.Highscore).length)
      & \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->      m_0.size@(maze.Highscore)
                <= m_0.capacity@(maze.Highscore)
              & m_0.size@(maze.Highscore) >= (jint)(0))
      & \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->    m_0.highscores@(maze.Highscore).length
              <= m_0.capacity@(maze.Highscore))
      & \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> \forall jint i; 
                (     i >= (jint)(0)
                    & i <  m_0.size@(maze.Highscore)
                    & inInt(i)
                 -> !  m_0.highscores@(maze.Highscore)[i]
                     = null))
      & \forall maze.Highscore h; 
          (   !h = null
           ->   h = null
              | \forall maze.Highscore other; 
                  (       h.highscores@(maze.Highscore)
                        = other.highscores@(maze.Highscore)
                      & !other = null
                   -> h = other))
      & \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           -> !m_0.highscores@(maze.Highscore) = null)
      & \forall maze.Highscore m_0; 
          (     m_0.<created>@(java.lang.Object) = TRUE
              & !m_0 = null
           ->      m_0.min@(maze.Highscore)
                >= (jint)-((jint)(1))
              &    m_0.min@(maze.Highscore)
                <  m_0.size@(maze.Highscore)
              & (  (      m_0.min@(maze.Highscore)
                        = (jint)-((jint)(1))
                    <->   m_0.size@(maze.Highscore)
                        = (jint)(0))
                 & (    !  m_0.min@(maze.Highscore)
                         = (jint)-((jint)(1))
                    <-> !\exists jint i; 
                           (  !  i
                               = m_0.min@(maze.Highscore)
                            & (  i >= (jint)(0)
                               &    i
                                 <  m_0.size@(maze.Highscore))
                            & inInt(i)
                            &    m_0.highscores@(maze.Highscore)[i].score@(maze.Record)
                              <  m_0.highscores@(maze.Highscore)[m_0.min@(maze.Highscore)].score@(maze.Record))))))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
-> \<{
       exc=null;try {
         result=self.minScore()@maze.Highscore;
       }  catch (java.lang.Throwable e) {
         exc=e;
       }
     }\> (  \forall jint i; 
              (     i >= (jint)(0)
                  & i <  self.size@(maze.Highscore)
                  & inInt(i)
               ->    result
                  <= self.highscores@(maze.Highscore)[i].score@(maze.Record))
          & \exists jint i; 
              (  i >= (jint)(0)
               & i <  self.size@(maze.Highscore)
               & inInt(i)
               &   result
                 = self.highscores@(maze.Highscore)[i].score@(maze.Record))
          & exc = null)

}

\proof {
(keyLog "0" (keyUser "dome" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "3383")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,1,0,1,0,0,0,1,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,0,1,1,1,1,0,1,1,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,0,0,0,1"))
(rule "inInt" (formula "1") (term "1,0,0,1,0,0,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,1,1,1,1,0,1,1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "assignment_instance_field_of_this" (formula "11"))
(rule "castDelInt" (formula "8") (term "1,0,0,1,0"))
(rule "castDelInt" (formula "8") (term "1,0,1,0,0,0,1,1,1,1,0"))
(rule "castDelInt" (formula "8") (term "0,0,1,0,0,1,1,1,0"))
(rule "neg_literal" (formula "8") (term "0,1,0,0,1,1,1,0"))
(rule "castDelInt" (formula "8") (term "1,1,0,1,1,0"))
(rule "castDelInt" (formula "8") (term "0,0,1,0,0,1,1,0"))
(rule "neg_literal" (formula "8") (term "0,1,0,0,1,1,0"))
(rule "castDelInt" (formula "5") (term "1,0,0,0,1,0"))
(rule "castDelInt" (formula "3") (term "1,1,1,0"))
(rule "castDelInt" (formula "2") (term "1,0,1,0"))
(rule "castDelInt" (formula "11") (term "1,0,0,0,0,0,0,1"))
(rule "castDelInt" (formula "11") (term "1,0,0,0,1,0,0,1"))
(rule "castDelInt" (formula "8") (term "0,1,0,0,1,0"))
(rule "neg_literal" (formula "8") (term "1,0,0,1,0"))
(rule "castDelInt" (formula "8") (term "1,0,0,1,1,1,0"))
(rule "castDelInt" (formula "8") (term "1,0,0,1,1,0"))
(rule "eqSymm" (formula "8") (term "0,0,0,0,0,1,1,1,1,0"))
(rule "eqSymm" (formula "6") (term "1,0,1,1,0"))
(rule "eqSymm" (formula "6") (term "0,0,0,1,1,0"))
(rule "eqSymm" (formula "11") (term "1,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0,0,0,1,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0,0,1,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "2") (term "0,1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,1,1,1,1,0"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,1,0,0,0,1,1,1,1,0"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,1,0"))
(rule "mul_literals" (formula "2") (term "1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,1,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,1,0,0,0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,1,0,0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,1,0,0,0,1,1,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,1,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "double_not" (formula "6") (term "0,0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "double_not" (formula "7") (term "1,0,0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "double_not" (formula "4") (term "1,0,0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "double_not" (formula "8") (term "1,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "double_not" (formula "5") (term "1,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "0,1,1,0"))
(rule "nnf_notEx" (formula "8") (term "1,1,1,1,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,1,0"))
(rule "double_not" (formula "6") (term "1,0,0,1,1,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,1,1,1,1,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "1,0,1,1,1,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,1,1,1,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,1,1,1,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,1,1,1,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,1,1,1,1,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,1,1,1,1,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,1,1,1,0"))
(rule "double_not" (formula "8") (term "0,0,0,1,1,1,1,0"))
(rule "nnf_notAnd" (formula "8") (term "1,0,0,1,1,1,1,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,1,0,0,1,1,1,1,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,1,0,0,1,1,1,1,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,1,0,0,1,1,1,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,1,0,0,1,1,1,1,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0,1,1,1,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,1,0,0,1,1,1,1,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,1,0,0,1,1,1,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,1,0,0,1,1,1,1,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,1,0,0,1,1,1,1,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,1,0,0,1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0,1,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1,1,1,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "commute_or" (formula "8") (term "0,0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0,1,1,0"))
(rule "commute_and" (formula "3") (term "1,0"))
(rule "commute_or_2" (formula "6") (term "0,1,1,0"))
(rule "shift_paren_or" (formula "8") (term "0,0,1,1,1,1,0"))
(rule "commute_or" (formula "8") (term "0,0,0,1,1,1,1,0"))
(rule "cnf_eqv" (formula "8") (term "0,1,1,0"))
(rule "cnf_rightDist" (formula "2") (term "0"))
(rule "distr_forallAnd" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "commute_or" (formula "3") (term "0"))
(rule "cnf_rightDist" (formula "4") (term "0"))
(rule "distr_forallAnd" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "commute_or" (formula "5") (term "0"))
(rule "cnf_eqv" (formula "10") (term "1,1,1,0"))
(rule "double_not" (formula "10") (term "0,1,1,1,1,0"))
(rule "nnf_notAll" (formula "10") (term "1,0,1,1,1,0"))
(rule "nnf_notOr" (formula "10") (term "0,1,0,1,1,1,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,0,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,0,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,1,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,1,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,1,0,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,1,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,1,1,0"))
(rule "nnf_notOr" (formula "10") (term "0,0,1,0,1,1,1,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1,1,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1,1,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1,1,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1,1,1,0"))
(rule "nnf_notOr" (formula "10") (term "0,0,0,1,0,1,1,1,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0,1,0,1,1,1,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,1,1,0"))
(rule "add_literals" (formula "10") (term "0,0,0,0,0,0,1,0,1,1,1,0"))
(rule "add_zero_left" (formula "10") (term "0,0,0,0,0,1,0,1,1,1,0"))
(rule "all_pull_out3" (formula "7") (term "0"))
(rule "shift_paren_or" (formula "7") (term "0,0"))
(rule "shift_paren_or" (formula "7") (term "0,0,0"))
(rule "commute_or_2" (formula "7") (term "0,0,0,0"))
(rule "commute_or" (formula "7") (term "0,0,0,0,0"))
(rule "all_pull_out3" (formula "8") (term "1,0"))
(rule "shift_paren_or" (formula "8") (term "0,1,0"))
(rule "shift_paren_or" (formula "8") (term "0,0,1,0"))
(rule "all_pull_out3" (formula "10") (term "1,1,1,1,0"))
(rule "shift_paren_or" (formula "10") (term "0,1,1,1,1,0"))
(rule "shift_paren_or" (formula "10") (term "0,0,1,1,1,1,0"))
(rule "shift_paren_or" (formula "10") (term "0,0,0,1,1,1,1,0"))
(rule "commute_or" (formula "10") (term "0,0,0,0,1,1,1,1,0"))
(rule "ex_pull_out3" (formula "10") (term "0,1,1,1,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,1,1,1,0"))
(rule "commute_or" (formula "10") (term "1,0,0,1,1,1,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,1,1,1,0"))
(rule "commute_or" (formula "10") (term "1,0,0,0,1,1,1,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,1,1,1,0"))
(rule "commute_or" (formula "10") (term "0,0,0,0,0,1,1,1,0"))
(rule "commute_or" (formula "10") (term "1,0,0,0,0,1,1,1,0"))
(rule "applyEq_or_gen2" (formula "10") (term "1,0,0,0,0,1,1,1,0"))
(rule "commute_and" (formula "10") (term "0,0,0,0,1,1,1,0"))
(rule "ex_pull_out0" (formula "10") (term "1,1,1,0"))
(rule "all_pull_out3" (formula "8") (term "0"))
(rule "shift_paren_or" (formula "8") (term "0,0"))
(rule "shift_paren_or" (formula "8") (term "0,0,0"))
(rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
(rule "eq_or" (formula "8") (term "0,0,0,0,0"))
(rule "all_pull_out1" (formula "10") (term "0,1,1,1,0"))
(rule "ex_pull_out1" (formula "10") (term "1,1,0"))
(rule "all_pull_out1" (formula "10") (term "0,1,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,1,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,1,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,1,0"))
(rule "commute_and_2" (formula "10") (term "0,0,0,0,0,0,1,1,0"))
(rule "commute_and" (formula "10") (term "0,0,0,0,0,0,0,1,1,0"))
(rule "commute_and_2" (formula "10") (term "0,0,0,0,0,1,1,0"))
(rule "commute_and_2" (formula "10") (term "0,0,0,0,0,0,1,1,0"))
(rule "ex_pull_out1" (formula "10") (term "1,0"))
(rule "all_pull_out1" (formula "10") (term "0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,0,1,0"))
(rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,0,0,1,0"))
(rule "ex_pull_out3" (formula "10") (term "0"))
(rule "methodBodyExpand" (formula "13") (term "1"))
(rule "returnUnfold" (formula "13") (term "1") (inst "#v0=j"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "j"))
(rule "all_pull_out3" (formula "10") (term "0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0"))
(rule "distr_forallAnd" (formula "10") (term "0,0"))
(rule "distr_existsAnd1" (formula "10") (term "0"))
(rule "distr_forallAnd" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "commute_or_2" (formula "11") (term "0,0"))
(rule "commute_or_2" (formula "11") (term "0,0,0"))
(rule "commute_or_2" (formula "11") (term "0,0,0,0"))
(rule "commute_or_2" (formula "11") (term "0,0,0,0,0"))
(rule "shift_paren_or" (formula "11") (term "0,0,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0"))
(rule "commute_or" (formula "10") (term "0,1,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0,0"))
(rule "commute_or" (formula "10") (term "0,1,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0"))
(rule "commute_or" (formula "10") (term "0,1,0,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0,0"))
(rule "commute_or" (formula "10") (term "0,1,0,0,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0,0,0"))
(rule "shift_paren_or" (formula "10") (term "0,1,0,0,0,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
(rule "shift_paren_or" (formula "10") (term "0,1,0,0,0,0,0,0,0,0"))
(rule "cnf_rightDist" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
(rule "commute_or" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "all_unused" (formula "10") (term "0,0"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "14") (term "1") (inst "#v0=v_Record"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "v_Record"))
(rule "assignment_array2" (formula "14") (term "1"))
(branch " Normal Execution (highscores != null)"
   (builtin "Update Simplification" (formula "15"))
   (builtin "Update Simplification" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "inEqSimp_ltRight" (formula "16"))
   (rule "mul_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "16"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "methodCallWithAssignment" (formula "17") (term "2") (inst "#v0=j_1"))
   (branch " Normal Execution (v_Record != null)"
      (builtin "Update Simplification" (formula "17"))
      (rule "variableDeclaration" (formula "18") (term "2") (newnames "j_1"))
      (rule "allLeft" (formula "8") (inst "t=self"))
      (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "15"))
      (rule "concrete_not_1" (formula "8") (term "1,0"))
      (rule "concrete_or_4" (formula "8") (term "0"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "16"))
      (rule "concrete_or_2" (formula "8"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
      (rule "times_zero_1" (formula "3") (term "0,0"))
      (rule "add_zero_left" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "allLeft" (formula "7") (inst "t=self"))
      (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "19"))
      (rule "concrete_or_2" (formula "7") (term "0"))
      (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "18"))
      (rule "concrete_not_1" (formula "7") (term "0"))
      (rule "concrete_or_2" (formula "7"))
      (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "11"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "12"))
      (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
      (rule "add_literals" (formula "12") (term "1,0"))
      (rule "times_zero_1" (formula "12") (term "0"))
      (rule "qeq_literals" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "1,0"))
      (rule "times_zero_1" (formula "8") (term "0"))
      (rule "leq_literals" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "allLeft" (formula "9") (inst "t=self"))
      (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "17"))
      (rule "concrete_not_1" (formula "9") (term "1,0"))
      (rule "concrete_or_4" (formula "9") (term "0"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
      (rule "concrete_or_2" (formula "9"))
      (rule "allLeft" (formula "8") (inst "t=self"))
      (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "19"))
      (rule "concrete_or_2" (formula "8") (term "0"))
      (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "18"))
      (rule "concrete_not_1" (formula "8") (term "0"))
      (rule "concrete_or_2" (formula "8"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "10"))
      (rule "times_zero_1" (formula "8") (term "0,0"))
      (rule "add_zero_left" (formula "8") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
      (rule "leq_literals" (formula "8") (term "0"))
      (rule "concrete_or_1" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "methodBodyExpand" (formula "22") (term "2"))
      (rule "methodCallReturn" (formula "22") (term "2"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "2"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallEmpty" (formula "22") (term "3"))
      (builtin "Update Simplification" (formula "22"))
      (rule "blockEmpty" (formula "22") (term "2"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "2"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallReturn" (formula "22") (term "2"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "2"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallEmpty" (formula "22") (term "2"))
      (rule "tryEmpty" (formula "22") (term "2"))
      (rule "emptyModality" (formula "22") (term "2"))
      (builtin "Update Simplification" (formula "22"))
      (rule "eqClose" (formula "22") (term "1"))
      (rule "concrete_and_3" (formula "22"))
      (rule "andRight" (formula "22"))
      (branch " Case 1"
         (rule "allRight" (formula "22") (inst "sk=i_1"))
         (rule "orRight" (formula "22"))
         (rule "orRight" (formula "22"))
         (rule "inEqSimp_geqRight" (formula "24"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_geqRight" (formula "24"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "24"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "allLeft" (formula "17") (inst "t=self"))
         (rule "replace_known_left" (formula "17") (term "0,1,0,0,0") (ifseqformula "23"))
         (rule "concrete_not_1" (formula "17") (term "1,0,0,0"))
         (rule "concrete_or_4" (formula "17") (term "0,0,0"))
         (rule "replace_known_right" (formula "17") (term "1,0,0,0") (ifseqformula "24"))
         (rule "concrete_or_4" (formula "17") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
         (rule "allLeft" (formula "17") (inst "t=i_1"))
         (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "17") (term "0,0,0"))
         (rule "concrete_and_2" (formula "17") (term "0,0"))
         (rule "concrete_or_2" (formula "17") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0"))
         (rule "leq_literals" (formula "17") (term "0,0"))
         (rule "concrete_and_2" (formula "17") (term "0"))
         (rule "concrete_or_2" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "only_created_object_are_referenced_non_null" (formula "26") (term "0") (ifseqformula "23") (ifseqformula "8") (ifseqformula "26"))
         (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "5") (term "0,0") (ifseqformula "1") (ifseqformula "9") (ifseqformula "28"))
         (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "6") (term "0,1,1") (ifseqformula "1") (ifseqformula "10") (ifseqformula "26"))
         (rule "array_length_non_negative_3" (formula "13") (term "0") (ifseqformula "11") (ifseqformula "1") (ifseqformula "29"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "9"))
         (rule "leq_literals" (formula "13") (term "0"))
         (rule "concrete_or_1" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "allLeft" (formula "25") (inst "t=self"))
         (rule "eqSymm" (formula "25") (term "1,0,0,0"))
         (rule "replace_known_left" (formula "25") (term "0,1,0,0,0,0,0") (ifseqformula "27"))
         (rule "concrete_not_1" (formula "25") (term "1,0,0,0,0,0"))
         (rule "concrete_or_4" (formula "25") (term "0,0,0,0,0"))
         (rule "replace_known_right" (formula "25") (term "1,0,0,0,0,0") (ifseqformula "29"))
         (rule "concrete_or_4" (formula "25") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
         (rule "inEqSimp_contradEq7" (formula "25") (term "1,0,0,0,0") (ifseqformula "10"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,0,1,0,0,0,0"))
         (rule "leq_literals" (formula "25") (term "0,1,0,0,0,0"))
         (rule "concrete_and_2" (formula "25") (term "1,0,0,0,0"))
         (rule "concrete_or_4" (formula "25") (term "0,0,0,0"))
         (rule "allLeft" (formula "25") (inst "t=i_1"))
         (rule "eqSymm" (formula "25") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
         (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
         (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "25") (term "0,0,1"))
         (rule "leq_literals" (formula "25") (term "0,1"))
         (rule "concrete_and_2" (formula "25") (term "1"))
         (rule "concrete_or_4" (formula "25"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "25") (term "0,0,0"))
         (rule "concrete_and_2" (formula "25") (term "0,0"))
         (rule "concrete_or_2" (formula "25") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
         (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "25") (term "0,0,1"))
         (rule "leq_literals" (formula "25") (term "0,1"))
         (rule "concrete_and_2" (formula "25") (term "1"))
         (rule "concrete_or_4" (formula "25"))
         (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "24"))
         (rule "inEqSimp_homoInEq0" (formula "7"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "24"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "times_zero_1" (formula "6") (term "1,0"))
         (rule "add_literals" (formula "6") (term "0"))
         (rule "leq_literals" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
      (branch " Case 2"
         (rule "nnf_ex2all" (formula "22"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "allLeft" (formula "1") (inst "t=self.min@(maze.Highscore)"))
         (rule "eqClose" (formula "1") (term "0,1"))
         (rule "concrete_not_1" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "5"))
         (rule "qeq_literals" (formula "1") (term "0,0"))
         (rule "concrete_and_2" (formula "1") (term "0"))
         (rule "concrete_or_2" (formula "1"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
         (rule "mul_literals" (formula "10") (term "0,0"))
         (rule "add_zero_left" (formula "10") (term "0"))
         (rule "allLeft" (formula "18") (inst "t=self"))
         (rule "exLeft" (formula "18") (inst "sk=i_2"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "18") (term "1,0"))
         (rule "concrete_or_4" (formula "18") (term "0"))
         (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "18"))
         (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "19") (term "0"))
         (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "19") (term "0"))
         (rule "concrete_or_2" (formula "19"))
         (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "25") (term "0,0"))
         (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "25") (term "0,0"))
         (rule "concrete_or_2" (formula "25") (term "0"))
         (rule "replace_known_left" (formula "23") (term "0,1,0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "23") (term "1,0,0"))
         (rule "concrete_or_4" (formula "23") (term "0,0"))
         (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "23") (term "0"))
         (rule "replace_known_left" (formula "24") (term "0,1,0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "24") (term "1,0,0"))
         (rule "concrete_or_4" (formula "24") (term "0,0"))
         (rule "replace_known_right" (formula "21") (term "1,0,0") (ifseqformula "29"))
         (rule "concrete_or_4" (formula "21") (term "0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "replace_known_right" (formula "20") (term "1,0,0") (ifseqformula "29"))
         (rule "concrete_or_4" (formula "20") (term "0,0"))
         (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "21") (term "1,0"))
         (rule "concrete_or_4" (formula "21") (term "0"))
         (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "20") (term "1,0"))
         (rule "concrete_or_4" (formula "20") (term "0"))
         (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "28"))
         (rule "concrete_not_1" (formula "22") (term "0,0"))
         (rule "concrete_or_2" (formula "22") (term "0"))
         (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "29"))
         (rule "concrete_or_2" (formula "24") (term "0"))
         (rule "inEqSimp_contradEq7" (formula "21") (term "0,1") (ifseqformula "5"))
         (rule "add_zero_left" (formula "21") (term "0,0,0,1"))
         (rule "mul_literals" (formula "21") (term "0,0,0,1"))
         (rule "leq_literals" (formula "21") (term "0,0,1"))
         (rule "concrete_and_2" (formula "21") (term "0,1"))
         (rule "concrete_not_2" (formula "21") (term "1"))
         (rule "concrete_or_3" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "inEqSimp_contradEq7" (formula "24") (term "0,0") (ifseqformula "5"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,0,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0"))
         (rule "concrete_and_2" (formula "24") (term "0,0"))
         (rule "concrete_not_2" (formula "24") (term "0"))
         (rule "concrete_or_1" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "inEqSimp_contradEq7" (formula "23") (term "0,0") (ifseqformula "5"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,0,0"))
         (rule "leq_literals" (formula "23") (term "0,0,0"))
         (rule "concrete_and_2" (formula "23") (term "0,0"))
         (rule "concrete_not_2" (formula "23") (term "0"))
         (rule "concrete_or_1" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "inEqSimp_contradEq7" (formula "21") (term "0") (ifseqformula "5"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0"))
         (rule "concrete_and_2" (formula "21") (term "0"))
         (rule "concrete_or_2" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "25"))
         (rule "concrete_or_4" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "5"))
         (rule "mul_literals" (formula "24") (term "1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0"))
         (rule "leq_literals" (formula "24") (term "0"))
         (rule "concrete_and_2" (formula "24"))
         (rule "false_right" (formula "24"))
         (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "24"))
         (rule "add_zero_right" (formula "10") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "10"))
         (rule "times_zero_1" (formula "24") (term "1,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0"))
         (rule "leq_literals" (formula "24") (term "0"))
         (rule "concrete_and_2" (formula "24"))
         (rule "false_right" (formula "24"))
         (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "1"))
         (rule "andLeft" (formula "19"))
         (rule "inEqSimp_homoInEq1" (formula "19"))
         (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "times_zero_1" (formula "19") (term "1,0"))
         (rule "add_zero_right" (formula "19") (term "0"))
         (rule "leq_literals" (formula "19"))
         (rule "closeFalse" (formula "19"))
      )
   )
   (branch " Null Reference (v_Record = null)"
      (builtin "Update Simplification" (formula "18"))
      (builtin "Update Simplification" (formula "1"))
      (rule "allLeft" (formula "9") (inst "t=self"))
      (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "17"))
      (rule "concrete_or_2" (formula "9") (term "0"))
      (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "16"))
      (rule "concrete_not_1" (formula "9") (term "0"))
      (rule "concrete_or_2" (formula "9"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
      (rule "times_zero_1" (formula "4") (term "0,0"))
      (rule "add_zero_left" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "mul_literals" (formula "4") (term "1"))
      (rule "allLeft" (formula "8") (inst "t=self"))
      (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "19"))
      (rule "concrete_not_1" (formula "8") (term "1,0"))
      (rule "concrete_or_4" (formula "8") (term "0"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
      (rule "concrete_or_2" (formula "8"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "12"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq0" (formula "13"))
      (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
      (rule "add_literals" (formula "13") (term "1,0"))
      (rule "times_zero_1" (formula "13") (term "0"))
      (rule "qeq_literals" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "9"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
      (rule "add_literals" (formula "9") (term "1,0"))
      (rule "times_zero_1" (formula "9") (term "0"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "allLeft" (formula "12") (inst "t=self"))
      (rule "replace_known_right" (formula "12") (term "1,0,0,0,0") (ifseqformula "19"))
      (rule "concrete_or_4" (formula "12") (term "0,0,0,0"))
      (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "18"))
      (rule "concrete_not_1" (formula "12") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
      (rule "allLeft" (formula "10") (inst "t=self"))
      (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "19"))
      (rule "concrete_not_1" (formula "10") (term "1,0"))
      (rule "concrete_or_4" (formula "10") (term "0"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
      (rule "concrete_or_2" (formula "10"))
      (rule "allLeft" (formula "9") (inst "t=self"))
      (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "20"))
      (rule "concrete_not_1" (formula "9") (term "1,0"))
      (rule "concrete_or_4" (formula "9") (term "0"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "21"))
      (rule "concrete_or_2" (formula "9"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "11"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
      (rule "leq_literals" (formula "9") (term "0"))
      (rule "concrete_or_1" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "allLeft" (formula "14") (inst "t=self.min@(maze.Highscore)"))
      (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "14") (term "1"))
      (rule "concrete_or_4" (formula "14"))
      (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "14") (term "0,0"))
      (rule "concrete_and_2" (formula "14") (term "0"))
      (rule "concrete_or_2" (formula "14"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "14"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "allLeft" (formula "19") (inst "t=self"))
      (rule "exLeft" (formula "19") (inst "sk=i_0"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "20") (term "0"))
      (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "20") (term "0"))
      (rule "concrete_or_2" (formula "20"))
      (rule "replace_known_left" (formula "19") (term "0,1,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "19") (term "1,0"))
      (rule "concrete_or_4" (formula "19") (term "0"))
      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "19"))
      (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "26") (term "1,0,0"))
      (rule "concrete_or_4" (formula "26") (term "0,0"))
      (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "26") (term "0"))
      (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "25") (term "0,0"))
      (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "25") (term "0,0"))
      (rule "concrete_or_2" (formula "25") (term "0"))
      (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "24") (term "0,0"))
      (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "30"))
      (rule "concrete_or_2" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "22") (term "1,0,0") (ifseqformula "30"))
      (rule "concrete_or_4" (formula "22") (term "0,0"))
      (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "21") (term "1,0"))
      (rule "concrete_or_4" (formula "21") (term "0"))
      (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "22") (term "1,0"))
      (rule "concrete_or_4" (formula "22") (term "0"))
      (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "24") (term "0,0"))
      (rule "concrete_or_2" (formula "24") (term "0"))
      (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "29"))
      (rule "concrete_not_1" (formula "23") (term "0,0"))
      (rule "concrete_or_2" (formula "23") (term "0"))
      (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "30"))
      (rule "concrete_or_4" (formula "21") (term "0"))
      (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "26") (term "1"))
      (rule "polySimp_addComm1" (formula "26") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1"))
      (rule "mul_literals" (formula "26") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
      (rule "inEqSimp_contradEq7" (formula "26") (term "0,0") (ifseqformula "4"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,0,0"))
      (rule "leq_literals" (formula "26") (term "0,0,0"))
      (rule "concrete_and_2" (formula "26") (term "0,0"))
      (rule "concrete_not_2" (formula "26") (term "0"))
      (rule "concrete_or_1" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "inEqSimp_contradEq7" (formula "24") (term "0,0") (ifseqformula "4"))
      (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
      (rule "add_zero_left" (formula "24") (term "0,0,0,0"))
      (rule "leq_literals" (formula "24") (term "0,0,0"))
      (rule "concrete_and_2" (formula "24") (term "0,0"))
      (rule "concrete_not_2" (formula "24") (term "0"))
      (rule "concrete_or_1" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "inEqSimp_contradEq7" (formula "23") (term "0") (ifseqformula "4"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,0"))
      (rule "leq_literals" (formula "23") (term "0,0"))
      (rule "concrete_and_2" (formula "23") (term "0"))
      (rule "concrete_or_2" (formula "23"))
      (rule "notLeft" (formula "23"))
      (rule "inEqSimp_contradEq7" (formula "23") (term "0,0") (ifseqformula "4"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0"))
      (rule "leq_literals" (formula "23") (term "0,0,0"))
      (rule "concrete_and_2" (formula "23") (term "0,0"))
      (rule "concrete_not_2" (formula "23") (term "0"))
      (rule "concrete_or_1" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "inEqSimp_contradEq7" (formula "22") (term "0,1") (ifseqformula "4"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,1"))
      (rule "add_literals" (formula "22") (term "0,0,0,1"))
      (rule "leq_literals" (formula "22") (term "0,0,1"))
      (rule "concrete_and_2" (formula "22") (term "0,1"))
      (rule "concrete_not_2" (formula "22") (term "1"))
      (rule "concrete_or_3" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "25"))
      (rule "add_zero_right" (formula "9") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "9"))
      (rule "times_zero_1" (formula "25") (term "1,0,0"))
      (rule "add_literals" (formula "25") (term "0,0"))
      (rule "leq_literals" (formula "25") (term "0"))
      (rule "concrete_and_2" (formula "25"))
      (rule "false_right" (formula "25"))
      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "4"))
      (rule "leq_literals" (formula "19") (term "0"))
      (rule "concrete_or_1" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "14"))
      (rule "andLeft" (formula "19"))
      (rule "inEqSimp_homoInEq1" (formula "19"))
      (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
      (rule "add_literals" (formula "19") (term "1,1,0"))
      (rule "times_zero_1" (formula "19") (term "1,0"))
      (rule "add_zero_right" (formula "19") (term "0"))
      (rule "leq_literals" (formula "19"))
      (rule "closeFalse" (formula "19"))
   )
)
(branch " Null Reference (highscores = null)"
   (builtin "Update Simplification" (formula "1"))
   (rule "allLeft" (formula "10") (inst "t=self"))
   (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "14"))
   (rule "concrete_not_1" (formula "10") (term "1,0"))
   (rule "concrete_or_4" (formula "10") (term "0"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
   (rule "concrete_or_2" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "close" (formula "14") (ifseqformula "1"))
)
(branch " Index Out of Bounds (highscores != null, but min Out of Bounds!)"
   (builtin "Update Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "allLeft" (formula "4") (inst "t=self"))
   (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "14"))
   (rule "concrete_not_1" (formula "4") (term "1,0"))
   (rule "concrete_or_4" (formula "4") (term "0"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
   (rule "concrete_or_2" (formula "4"))
   (rule "allLeft" (formula "8") (inst "t=self"))
   (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "17"))
   (rule "concrete_or_2" (formula "8") (term "0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "15"))
   (rule "concrete_not_1" (formula "8") (term "0"))
   (rule "concrete_or_2" (formula "8"))
   (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "8"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq0" (formula "9"))
   (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,0"))
   (rule "times_zero_1" (formula "9") (term "0"))
   (rule "qeq_literals" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "4"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "5"))
   (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
   (rule "add_literals" (formula "5") (term "1,0"))
   (rule "times_zero_1" (formula "5") (term "0"))
   (rule "leq_literals" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "allLeft" (formula "7") (inst "t=self"))
   (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "17"))
   (rule "concrete_or_2" (formula "7") (term "0"))
   (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "15"))
   (rule "concrete_not_1" (formula "7") (term "0"))
   (rule "concrete_or_2" (formula "7"))
   (rule "cut_direct" (formula "1") (term "0"))
   (branch " CUT: self.min >= self.capacity TRUE"
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "allLeft" (formula "3") (inst "t=self"))
      (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "18"))
      (rule "concrete_or_2" (formula "3") (term "0"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "16"))
      (rule "concrete_not_1" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "allLeft" (formula "7") (inst "t=self"))
      (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "17"))
      (rule "concrete_not_1" (formula "7") (term "1,0"))
      (rule "concrete_or_4" (formula "7") (term "0"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
      (rule "concrete_or_2" (formula "7"))
      (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
      (rule "times_zero_1" (formula "7") (term "0,0"))
      (rule "add_zero_left" (formula "7") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
      (rule "leq_literals" (formula "7") (term "0"))
      (rule "concrete_or_1" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "only_created_object_are_referenced_non_null" (formula "5") (term "0,0") (ifseqformula "17") (ifseqformula "2") (ifseqformula "18"))
      (rule "array_length_non_negative_3" (formula "6") (term "0") (ifseqformula "2") (ifseqformula "5") (ifseqformula "19"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "3"))
      (rule "leq_literals" (formula "6") (term "0"))
      (rule "concrete_or_1" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "throwUnfold" (formula "21") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "v_ArrayIndexOutOfBoundsException"))
      (rule "instanceCreationAssignment" (formula "21") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_1"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_2"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_2"))
      (rule "methodBodyExpand" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_3"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_3"))
      (rule "allocateInstance" (formula "21") (term "1") (inst "#v0=var"))
      (builtin "Update Simplification" (formula "21"))
      (rule "blockEmpty" (formula "21") (term "5"))
      (rule "assignment" (formula "21") (term "5"))
      (builtin "Update Simplification" (formula "21"))
      (rule "polySimp_addComm0" (formula "21") (term "2"))
      (rule "methodBodyExpand" (formula "21") (term "5"))
      (rule "assignment_instance_field_of_this" (formula "21") (term "5"))
      (builtin "Update Simplification" (formula "21"))
      (rule "assignment_instance_field_of_this" (formula "21") (term "7"))
      (builtin "Update Simplification" (formula "21"))
      (rule "methodCallWithinClass" (formula "21") (term "9"))
      (rule "methodBodyExpand" (formula "21") (term "9"))
      (rule "methodCallSuper" (formula "21") (term "9"))
      (rule "nextToCreate_non_negative" (formula "21") (term "1,2") (ifseqformula "2"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallSuper" (formula "22") (term "9"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallSuper" (formula "22") (term "9"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallSuper" (formula "22") (term "9"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallSuper" (formula "22") (term "9"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallEmpty" (formula "22") (term "9"))
      (rule "blockEmpty" (formula "22") (term "9"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "9"))
      (builtin "Update Simplification" (formula "22"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "11"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "blockEmpty" (formula "22") (term "13"))
      (rule "methodCallReturnIgnoreResult" (formula "22") (term "13"))
      (rule "methodCallReturn" (formula "22") (term "13"))
      (rule "assignment" (formula "22") (term "13"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "blockEmpty" (formula "22") (term "13"))
      (rule "assignment" (formula "22") (term "13"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallSuper" (formula "22") (term "13"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallSuper" (formula "22") (term "13"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallSuper" (formula "22") (term "13"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallSuper" (formula "22") (term "13"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallSuper" (formula "22") (term "13"))
      (rule "methodBodyExpand" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "blockEmpty" (formula "22") (term "13"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "13"))
      (builtin "Update Simplification" (formula "22"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "13"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "methodCallEmpty" (formula "22") (term "13"))
      (rule "blockEmpty" (formula "22") (term "13"))
      (rule "assignment_write_attribute_primitive" (formula "22") (term "13"))
      (branch " Normal Execution (v_ArrayIndexOutOfBoundsException_1 != null)"
         (builtin "Update Simplification" (formula "23"))
         (builtin "Update Simplification" (formula "22"))
         (rule "repository_object_non_null" (formula "22"))
         (rule "false_right" (formula "22"))
         (rule "assignment_instance_field_of_this" (formula "22") (term "13"))
         (builtin "Update Simplification" (formula "22"))
         (rule "methodCallParamThrow" (formula "22") (term "13"))
         (rule "tryCatchThrow" (formula "22") (term "13"))
         (rule "ifElseUnfold" (formula "22") (term "13") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "22") (term "13") (newnames "b"))
         (rule "equality_comparison_new" (formula "22") (term "13"))
         (builtin "Update Simplification" (formula "22"))
         (rule "repository_object_non_null" (formula "22") (term "0,0"))
         (rule "concrete_not_2" (formula "22") (term "0"))
         (rule "ifthenelse_true_for" (formula "22"))
         (rule "assignment" (formula "22") (term "13"))
         (builtin "Update Simplification" (formula "22"))
         (rule "ifElse" (formula "22") (term "14"))
         (builtin "Update Simplification" (formula "22"))
         (rule "boolean_not_equal_2" (formula "22") (term "0"))
         (rule "ifthenelse_false_for" (formula "22"))
         (rule "elim_double_block" (formula "22") (term "13"))
         (rule "ifElseSplit" (formula "22"))
         (branch " if v_ArrayIndexOutOfBoundsException instanceof  java.lang.Throwable true"
            (builtin "Update Simplification" (formula "1"))
            (rule "repository_object_non_null" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "elim_double_block" (formula "23") (term "13"))
            (rule "variableDeclaration" (formula "23") (term "13") (newnames "e"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "13"))
            (builtin "Update Simplification" (formula "23"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "13"))
            (builtin "Update Simplification" (formula "23"))
            (rule "instanceof_static_type" (formula "1") (term "0"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "emptyModality" (formula "22") (term "12"))
            (builtin "Update Simplification" (formula "22"))
            (rule "repository_object_non_null" (formula "22") (term "1"))
            (rule "concrete_and_4" (formula "22"))
            (rule "false_right" (formula "22"))
            (rule "allLeft" (formula "17") (inst "t=self"))
            (rule "exLeft" (formula "17") (inst "sk=i_4"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "17") (term "1,0"))
            (rule "concrete_or_4" (formula "17") (term "0"))
            (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "17"))
            (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "18") (term "1,0"))
            (rule "concrete_or_4" (formula "18") (term "0"))
            (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "18"))
            (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "24") (term "0,0"))
            (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "24") (term "0,0"))
            (rule "concrete_or_2" (formula "24") (term "0"))
            (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "23") (term "0,0"))
            (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "23") (term "0,0"))
            (rule "concrete_or_2" (formula "23") (term "0"))
            (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "22") (term "0,0"))
            (rule "replace_known_left" (formula "21") (term "0,1,0,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "21") (term "1,0,0"))
            (rule "concrete_or_4" (formula "21") (term "0,0"))
            (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "20") (term "1,0"))
            (rule "concrete_or_4" (formula "20") (term "0"))
            (rule "replace_known_left" (formula "19") (term "0,1,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "19") (term "1,0"))
            (rule "concrete_or_4" (formula "19") (term "0"))
            (rule "replace_known_right" (formula "19") (term "1,0") (ifseqformula "29"))
            (rule "concrete_or_4" (formula "19") (term "0"))
            (rule "replace_known_right" (formula "20") (term "1,0") (ifseqformula "29"))
            (rule "concrete_or_4" (formula "20") (term "0"))
            (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "29"))
            (rule "concrete_or_2" (formula "21") (term "0"))
            (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "27"))
            (rule "concrete_not_1" (formula "22") (term "0,0"))
            (rule "concrete_or_2" (formula "22") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
            (rule "polySimp_rightDist" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "polySimp_elimOne" (formula "18") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
            (rule "andLeft" (formula "18"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
            (rule "add_literals" (formula "18") (term "1,1,0"))
            (rule "times_zero_1" (formula "18") (term "1,0"))
            (rule "add_literals" (formula "18") (term "0"))
            (rule "leq_literals" (formula "18"))
            (rule "closeFalse" (formula "18"))
         )
         (branch " if v_ArrayIndexOutOfBoundsException instanceof  java.lang.Throwable false"
            (rule "false_to_not_true" (formula "1") (term "13"))
            (builtin "Update Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "repository_object_non_null" (formula "20") (term "0,0"))
            (rule "ifthenelse_false" (formula "20") (term "0"))
            (rule "blockThrow" (formula "23") (term "13"))
            (rule "throwDiamond" (formula "23") (term "13"))
            (builtin "Update Simplification" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "instanceof_static_type" (formula "20") (term "0"))
            (rule "boolean_equal" (formula "20"))
            (rule "closeTrue" (formula "20"))
         )
      )
      (branch " Null Reference (v_ArrayIndexOutOfBoundsException_1 = null)"
         (builtin "Update Simplification" (formula "1"))
         (rule "repository_object_non_null" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch " CUT: self.min >= self.capacity FALSE"
      (rule "concrete_or_2" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "16"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "allLeft" (formula "4") (inst "t=self"))
      (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "17"))
      (rule "concrete_not_1" (formula "4") (term "1,0"))
      (rule "concrete_or_4" (formula "4") (term "0"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
      (rule "concrete_or_2" (formula "4"))
      (rule "allLeft" (formula "8") (inst "t=self"))
      (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "18"))
      (rule "concrete_not_1" (formula "8") (term "1,0"))
      (rule "concrete_or_4" (formula "8") (term "0"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
      (rule "concrete_or_2" (formula "8"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "10"))
      (rule "times_zero_1" (formula "8") (term "0,0"))
      (rule "add_zero_left" (formula "8") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "4"))
      (rule "leq_literals" (formula "8") (term "0"))
      (rule "concrete_or_1" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "only_created_object_are_referenced_non_null" (formula "6") (term "0,0") (ifseqformula "18") (ifseqformula "3") (ifseqformula "19"))
      (rule "array_length_non_negative_3" (formula "7") (term "0") (ifseqformula "3") (ifseqformula "6") (ifseqformula "20"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "4"))
      (rule "leq_literals" (formula "7") (term "0"))
      (rule "concrete_or_1" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_4"))
      (rule "instanceCreationAssignment" (formula "22") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_5"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_5"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_6"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_6"))
      (rule "methodBodyExpand" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "__NEW___1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=v_ArrayIndexOutOfBoundsException_7"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "v_ArrayIndexOutOfBoundsException_7"))
      (rule "allocateInstance" (formula "22") (term "1") (inst "#v0=var"))
      (builtin "Update Simplification" (formula "22"))
      (rule "blockEmpty" (formula "22") (term "5"))
      (rule "assignment" (formula "22") (term "5"))
      (builtin "Update Simplification" (formula "22"))
      (rule "polySimp_addComm0" (formula "22") (term "2"))
      (rule "methodBodyExpand" (formula "22") (term "5"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "5"))
      (builtin "Update Simplification" (formula "22"))
      (rule "assignment_instance_field_of_this" (formula "22") (term "7"))
      (builtin "Update Simplification" (formula "22"))
      (rule "methodCallWithinClass" (formula "22") (term "9"))
      (rule "methodBodyExpand" (formula "22") (term "9"))
      (rule "methodCallSuper" (formula "22") (term "9"))
      (rule "nextToCreate_non_negative" (formula "22") (term "0,5") (ifseqformula "3"))
      (rule "methodBodyExpand" (formula "23") (term "9"))
      (rule "methodCallSuper" (formula "23") (term "9"))
      (rule "methodBodyExpand" (formula "23") (term "9"))
      (rule "methodCallSuper" (formula "23") (term "9"))
      (rule "methodBodyExpand" (formula "23") (term "9"))
      (rule "methodCallSuper" (formula "23") (term "9"))
      (rule "methodBodyExpand" (formula "23") (term "9"))
      (rule "methodCallSuper" (formula "23") (term "9"))
      (rule "methodBodyExpand" (formula "23") (term "9"))
      (rule "methodCallEmpty" (formula "23") (term "9"))
      (rule "blockEmpty" (formula "23") (term "9"))
      (rule "assignment_instance_field_of_this" (formula "23") (term "9"))
      (builtin "Update Simplification" (formula "23"))
      (rule "assignment_instance_field_of_this" (formula "23") (term "11"))
      (builtin "Update Simplification" (formula "23"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "blockEmpty" (formula "23") (term "13"))
      (rule "methodCallReturnIgnoreResult" (formula "23") (term "13"))
      (rule "methodCallReturn" (formula "23") (term "13"))
      (rule "assignment" (formula "23") (term "13"))
      (builtin "Update Simplification" (formula "23"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "blockEmpty" (formula "23") (term "13"))
      (rule "assignment" (formula "23") (term "13"))
      (builtin "Update Simplification" (formula "23"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallSuper" (formula "23") (term "13"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallSuper" (formula "23") (term "13"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallSuper" (formula "23") (term "13"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallSuper" (formula "23") (term "13"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallSuper" (formula "23") (term "13"))
      (rule "methodBodyExpand" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "blockEmpty" (formula "23") (term "13"))
      (rule "assignment_instance_field_of_this" (formula "23") (term "13"))
      (builtin "Update Simplification" (formula "23"))
      (rule "assignment_instance_field_of_this" (formula "23") (term "13"))
      (builtin "Update Simplification" (formula "23"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "methodCallEmpty" (formula "23") (term "13"))
      (rule "blockEmpty" (formula "23") (term "13"))
      (rule "assignment_write_attribute_primitive" (formula "23") (term "13"))
      (branch " Normal Execution (v_ArrayIndexOutOfBoundsException_5 != null)"
         (builtin "Update Simplification" (formula "24"))
         (builtin "Update Simplification" (formula "23"))
         (rule "repository_object_non_null" (formula "23"))
         (rule "false_right" (formula "23"))
         (rule "assignment_instance_field_of_this" (formula "23") (term "13"))
         (builtin "Update Simplification" (formula "23"))
         (rule "methodCallParamThrow" (formula "23") (term "13"))
         (rule "tryCatchThrow" (formula "23") (term "13"))
         (rule "ifElseUnfold" (formula "23") (term "13") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "23") (term "13") (newnames "b_1"))
         (rule "equality_comparison_new" (formula "23") (term "13"))
         (builtin "Update Simplification" (formula "23"))
         (rule "repository_object_non_null" (formula "23") (term "0,0"))
         (rule "concrete_not_2" (formula "23") (term "0"))
         (rule "ifthenelse_true_for" (formula "23"))
         (rule "assignment" (formula "23") (term "13"))
         (builtin "Update Simplification" (formula "23"))
         (rule "ifElseSplit" (formula "23"))
         (branch " if b_1 true"
            (builtin "Update Simplification" (formula "24"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " if b_1 false"
            (rule "false_to_not_true" (formula "1") (term "14"))
            (builtin "Update Simplification" (formula "24"))
            (builtin "Update Simplification" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "0"))
            (rule "concrete_not_2" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "23") (term "13"))
            (rule "ifElse" (formula "23") (term "13"))
            (builtin "Update Simplification" (formula "23"))
            (rule "repository_object_non_null" (formula "23") (term "0,0,0"))
            (rule "ifthenelse_false" (formula "23") (term "0,0"))
            (rule "elim_double_block" (formula "23") (term "13,1"))
            (rule "variableDeclaration" (formula "23") (term "13,1") (newnames "e_1"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "13,1"))
            (builtin "Update Simplification" (formula "23"))
            (rule "assignment_instance_field_of_this" (formula "23") (term "13,1"))
            (builtin "Update Simplification" (formula "23"))
            (rule "blockThrow" (formula "23") (term "13,2"))
            (rule "throwDiamond" (formula "23") (term "13,2"))
            (builtin "Update Simplification" (formula "23"))
            (rule "instanceof_static_type" (formula "23") (term "0,0"))
            (rule "boolean_equal" (formula "23") (term "0"))
            (rule "ifthenelse_true_for" (formula "23"))
            (rule "emptyModality" (formula "23") (term "12"))
            (builtin "Update Simplification" (formula "23"))
            (rule "repository_object_non_null" (formula "23") (term "1"))
            (rule "concrete_and_4" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "allLeft" (formula "18") (inst "t=self"))
            (rule "exLeft" (formula "18") (inst "sk=i_3"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "18") (term "1,0"))
            (rule "concrete_or_4" (formula "18") (term "0"))
            (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "18"))
            (rule "replace_known_left" (formula "19") (term "0,1,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "19") (term "1,0"))
            (rule "concrete_or_4" (formula "19") (term "0"))
            (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "19"))
            (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "25") (term "0,0"))
            (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "25") (term "0,0"))
            (rule "concrete_or_2" (formula "25") (term "0"))
            (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "24") (term "0,0"))
            (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "24") (term "0,0"))
            (rule "concrete_or_2" (formula "24") (term "0"))
            (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "23") (term "0,0"))
            (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "22") (term "1,0,0"))
            (rule "concrete_or_4" (formula "22") (term "0,0"))
            (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "21") (term "1,0"))
            (rule "concrete_or_4" (formula "21") (term "0"))
            (rule "replace_known_right" (formula "20") (term "1,0,0") (ifseqformula "30"))
            (rule "concrete_or_4" (formula "20") (term "0,0"))
            (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "20") (term "1,0"))
            (rule "concrete_or_4" (formula "20") (term "0"))
            (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "28"))
            (rule "concrete_not_1" (formula "23") (term "0,0"))
            (rule "concrete_or_2" (formula "23") (term "0"))
            (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "30"))
            (rule "concrete_or_2" (formula "22") (term "0"))
            (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "30"))
            (rule "concrete_or_4" (formula "21") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "3"))
            (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "18"))
            (rule "concrete_not_1" (formula "26") (term "0"))
            (rule "concrete_or_2" (formula "26"))
            (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "18"))
            (rule "concrete_not_1" (formula "25") (term "0"))
            (rule "concrete_or_2" (formula "25"))
            (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "18"))
            (rule "concrete_not_1" (formula "24") (term "0"))
            (rule "concrete_or_2" (formula "24"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "18"))
            (rule "concrete_or_1" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "18"))
            (rule "concrete_not_1" (formula "22") (term "1"))
            (rule "concrete_or_4" (formula "22"))
            (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "18"))
            (rule "inEqSimp_homoInEq1" (formula "25"))
            (rule "polySimp_addComm1" (formula "25") (term "0"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
            (rule "qeq_literals" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
            (rule "leq_literals" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "17"))
            (rule "eqSymm" (formula "19") (term "0,1"))
            (rule "eq_or" (formula "19"))
            (rule "notLeft" (formula "19"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "20"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_homoInEq1" (formula "17"))
            (rule "times_zero_2" (formula "17") (term "1,0"))
            (rule "add_zero_right" (formula "17") (term "0"))
            (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_homoInEq1" (formula "20"))
            (rule "times_zero_2" (formula "20") (term "1,0"))
            (rule "add_zero_right" (formula "20") (term "0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "19"))
            (rule "qeq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "15"))
            (rule "add_literals" (formula "16") (term "0"))
            (rule "leq_literals" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1"))
            (rule "polySimp_rightDist" (formula "19") (term "1"))
            (rule "mul_literals" (formula "19") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18"))
            (rule "mul_literals" (formula "18") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "16"))
            (rule "mul_literals" (formula "23") (term "1,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0"))
            (rule "leq_literals" (formula "23") (term "0"))
            (rule "concrete_and_2" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "18"))
            (rule "qeq_literals" (formula "16") (term "0"))
            (rule "concrete_and_2" (formula "16"))
            (rule "closeFalse" (formula "16"))
         )
      )
      (branch " Null Reference (v_ArrayIndexOutOfBoundsException_5 = null)"
         (builtin "Update Simplification" (formula "1"))
         (rule "repository_object_non_null" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)

}
